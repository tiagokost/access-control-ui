{"version":3,"file":"dx-grid-core.umd.js","sources":["../src/plugins/grid-core/computeds.js","../src/plugins/sorting-state/reducers.js","../src/plugins/sorting-state/helpers.js","../src/utils/merge-sort.js","../src/utils/hierarchical-data.js","../src/plugins/integrated-sorting/computeds.js","../src/plugins/filtering-state/reducers.js","../src/plugins/filtering-state/helpers.js","../src/plugins/filtering-state/computeds.js","../src/plugins/integrated-filtering/computeds.js","../src/plugins/grouping-state/constants.js","../src/plugins/grouping-state/reducers.js","../src/plugins/grouping-state/helpers.js","../src/plugins/integrated-grouping/constants.js","../src/plugins/integrated-grouping/computeds.js","../src/plugins/custom-grouping/computeds.js","../src/plugins/grouping-panel/helpers.js","../src/plugins/paging-state/reducers.js","../src/plugins/integrated-paging/helpers.js","../src/plugins/integrated-paging/computeds.js","../src/plugins/paging-panel/helpers.js","../src/utils/common-reducers.js","../src/plugins/selection-state/reducers.js","../src/plugins/integrated-selection/computeds.js","../src/plugins/editing-state/reducers.js","../src/plugins/editing-state/computeds.js","../src/plugins/editing-state/helpers.js","../src/plugins/table-column-reordering/constants.js","../src/plugins/table-column-reordering/reducers.js","../src/plugins/table/constants.js","../src/plugins/table-column-reordering/computeds.js","../src/plugins/table-column-resizing/computeds.js","../src/plugins/table-column-resizing/reducers.js","../src/plugins/table-edit-column/constants.js","../src/plugins/table-edit-row/constants.js","../src/plugins/table-header-row/constants.js","../src/plugins/table-edit-column/helpers.js","../src/plugins/table-edit-column/computeds.js","../src/plugins/table-edit-row/helpers.js","../src/plugins/table-edit-row/computeds.js","../src/plugins/table-filter-row/constants.js","../src/plugins/table-filter-row/helpers.js","../src/plugins/table-filter-row/computeds.js","../src/plugins/table-group-row/constants.js","../src/plugins/table-group-row/helpers.js","../src/plugins/table-group-row/computeds.js","../src/plugins/table-header-row/helpers.js","../src/plugins/table-header-row/computeds.js","../src/plugins/table-band-header/constants.js","../src/plugins/table-band-header/helpers.js","../src/plugins/table-band-header/computeds.js","../src/plugins/row-detail-state/reducers.js","../src/plugins/table-row-detail/constants.js","../src/plugins/table-row-detail/helpers.js","../src/plugins/table-row-detail/computeds.js","../src/plugins/table-selection/constants.js","../src/plugins/table-selection/helpers.js","../src/plugins/table-selection/computeds.js","../src/plugins/table/helpers.js","../src/utils/column-extension.js","../src/plugins/table/computeds.js","../src/plugins/table-column-visibility/computeds.js","../src/plugins/table-column-visibility/helpers.js","../src/plugins/column-chooser/computeds.js","../src/plugins/column-chooser/reducers.js","../src/plugins/tree-data-state/reducers.js","../src/plugins/custom-tree-data/constants.js","../src/plugins/custom-tree-data/computeds.js","../src/plugins/table-tree-column/helpers.js","../src/plugins/search-state/reducers.js","../src/plugins/search-state/computeds.js","../src/plugins/data-type-provider/computeds.js","../src/plugins/integrated-summary/computeds.js","../src/plugins/table-summary-row/constants.js","../src/plugins/table-summary-row/computeds.js","../src/plugins/table-summary-row/helpers.js","../src/utils/column-geometries.js","../src/utils/table.js","../src/utils/group-panel.js","../src/utils/messages-formatter.js","../src/utils/virtual-table.js"],"sourcesContent":["export const rowIdGetter = (getRowId, rows) => {\n  if (!getRowId) {\n    const map = new Map(rows.map((row, rowIndex) => [row, rowIndex]));\n    return row => map.get(row);\n  }\n  return getRowId;\n};\n\nconst defaultGetCellValue = (row, columnName) => row[columnName];\nexport const cellValueGetter = (getCellValue = defaultGetCellValue, columns) => {\n  let useFastAccessor = true;\n  const map = columns.reduce((acc, column) => {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return (row, columnName) => (map[columnName]\n    ? map[columnName](row, columnName)\n    : getCellValue(row, columnName));\n};\n","export const changeColumnSorting = (state, {\n  columnName, direction, keepOther, sortIndex,\n}) => {\n  const { sorting } = state;\n\n  let nextSorting = [];\n  if (keepOther === true) {\n    nextSorting = sorting.slice();\n  }\n  if (Array.isArray(keepOther)) {\n    nextSorting = sorting.slice()\n      .filter(columnSorting => keepOther.indexOf(columnSorting.columnName) > -1);\n  }\n\n  const columnSortingIndex = sorting\n    .findIndex(columnSorting => columnSorting.columnName === columnName);\n  const columnSorting = sorting[columnSortingIndex];\n  const newColumnSorting = {\n    columnName,\n    direction: direction\n      || (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc'),\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    const newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    const newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting,\n  };\n};\n","const unique = arr => [...new Set(arr)];\n\nexport const getColumnSortingDirection = (sorting, columnName) => {\n  const columnSorting = sorting.filter(s => s.columnName === columnName)[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nexport const getPersistentSortedColumns = (\n  sorting, columnExtensions = [],\n) => columnExtensions.reduce((acc, { columnName, sortingEnabled }) => {\n  if (sortingEnabled === false) {\n    if (sorting.findIndex(sortItem => sortItem.columnName === columnName) > -1) {\n      acc.push(columnName);\n    }\n  }\n  return acc;\n}, []);\n\nexport const calculateKeepOther = (sorting, keepOther, persistentSortedColumns = []) => {\n  if (!persistentSortedColumns.length) return keepOther;\n  if (!keepOther) return persistentSortedColumns;\n\n  return Array.isArray(keepOther)\n    ? unique([...keepOther, ...persistentSortedColumns])\n    : unique([...sorting.map(item => item.columnName), ...persistentSortedColumns]);\n};\n","/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n\nconst merge = (array, auxiliary, lo, mid, hi, compare) => {\n  let i = lo;\n  let j = mid + 1;\n  let k = lo;\n  while (true) {\n    const cmp = compare(array[i], array[j]);\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n        break;\n      }\n    }\n  }\n};\n\nconst sortArrayToAuxiliary = (array, auxiliary, lo, hi, compare) => {\n  if (hi < lo) return;\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nconst sortAuxiliaryToArray = (array, auxiliary, lo, hi, compare) => {\n  if (hi <= lo) return;\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nexport default (\n  array,\n  compare = (a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  },\n) => {\n  const result = array.slice();\n  const auxiliary = array.slice();\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n","export const NODE_CHECK = Symbol('node');\n\nexport const rowsToTree = (rows, getRowLevelKey) => {\n  if (!rows.length) return rows;\n\n  const levels = [{ children: [] }];\n\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.slice(1)\n        .findIndex(level => getRowLevelKey(level.root) === levelKey) + 1;\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n      const node = { [NODE_CHECK]: true, root: row, children: [] };\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n\n  return levels[0].children;\n};\n\nexport const treeToRows = (tree, rows = []) => {\n  if (!tree.length) return tree;\n  return tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        acc.push(node.root);\n        treeToRows(node.children, rows);\n      } else {\n        acc.push(node);\n      }\n      return acc;\n    },\n    rows,\n  );\n};\n","import mergeSort from '../../utils/merge-sort';\nimport { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst defaultCompare = (a, b) => {\n  if (a < b || (a !== undefined && b === undefined)) return -1;\n  if (a > b || (a === undefined && b !== undefined)) return 1;\n  return 0;\n};\n\nconst createCompare = (sorting, getColumnCompare, getComparableValue) => sorting.slice()\n  .reverse()\n  .reduce(\n    (prevCompare, columnSorting) => {\n      const { columnName } = columnSorting;\n      const inverse = columnSorting.direction === 'desc';\n      const columnCompare = (getColumnCompare && getColumnCompare(columnName)) || defaultCompare;\n\n      return (aRow, bRow) => {\n        const a = getComparableValue(aRow, columnName);\n        const b = getComparableValue(bRow, columnName);\n        const result = columnCompare(a, b);\n\n        if (result !== 0) {\n          return inverse ? -result : result;\n        }\n        return prevCompare(aRow, bRow);\n      };\n    },\n    () => 0,\n  );\n\nconst sortTree = (tree, compare) => {\n  const sortedTree = tree.map((node) => {\n    if (node[NODE_CHECK]) {\n      return {\n        ...node,\n        children: sortTree(node.children, compare),\n      };\n    }\n    return node;\n  });\n\n  return mergeSort(\n    sortedTree, (a, b) => compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b),\n  );\n};\n\nconst sortHierarchicalRows = (rows, compare, getRowLevelKey) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const sortedTree = sortTree(tree, compare);\n\n  return treeToRows(sortedTree);\n};\n\nexport const sortedRows = (\n  rows,\n  sorting,\n  getCellValue,\n  getColumnCompare,\n  isGroupRow,\n  getRowLevelKey,\n) => {\n  if (!sorting.length || !rows.length) return rows;\n\n  if (!getRowLevelKey) {\n    const compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  const compare = createCompare(sorting, getColumnCompare, (row, columnName) => {\n    if (isGroupRow && isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n      return undefined;\n    }\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(\n    rows,\n    compare,\n    getRowLevelKey,\n  );\n};\n","export const changeColumnFilter = (filters, { columnName, config }) => {\n  const filterIndex = filters.findIndex(f => f.columnName === columnName);\n  const nextState = filters.slice();\n\n  if (config) {\n    const filter = { columnName, ...config };\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else if (filterIndex > -1) {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n","export const getColumnFilterConfig = (filters, columnName) => {\n  if (!filters.length) { return null; }\n\n  const filter = filters.filter(s => s.columnName === columnName)[0];\n  if (!filter) return null;\n\n  return filter;\n};\n","export const filterExpression = (filters, expression) => {\n  const selfFilterExpr = { operator: 'and', filters };\n  if (!expression) {\n    return selfFilterExpr;\n  }\n  return {\n    operator: 'and',\n    filters: [expression, selfFilterExpr],\n  };\n};\n","import { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst operators = {\n  or: predicates => row => predicates.reduce((acc, predicate) => acc || predicate(row), false),\n  and: predicates => row => predicates.reduce((acc, predicate) => acc && predicate(row), true),\n};\n\nconst toLowerCase = value => String(value).toLowerCase();\n\nconst operationPredicates = {\n  contains: (value, filter) => toLowerCase(value).indexOf(toLowerCase(filter.value)) > -1,\n  notContains: (value, filter) => toLowerCase(value).indexOf(toLowerCase(filter.value)) === -1,\n  startsWith: (value, filter) => toLowerCase(value).startsWith(toLowerCase(filter.value)),\n  endsWith: (value, filter) => toLowerCase(value).endsWith(toLowerCase(filter.value)),\n  equal: (value, filter) => value === filter.value,\n  notEqual: (value, filter) => value !== filter.value,\n  greaterThan: (value, filter) => value > filter.value,\n  greaterThanOrEqual: (value, filter) => value >= filter.value,\n  lessThan: (value, filter) => value < filter.value,\n  lessThanOrEqual: (value, filter) => value <= filter.value,\n};\n\nexport const defaultFilterPredicate = (value, filter) => {\n  const operation = filter.operation || 'contains';\n  return operationPredicates[operation](value, filter);\n};\n\nconst filterTree = (tree, predicate) => tree.reduce(\n  (acc, node) => {\n    if (node[NODE_CHECK]) {\n      const filteredChildren = filterTree(node.children, predicate);\n      if (filteredChildren.length > 0) {\n        acc.push({\n          ...node,\n          children: filteredChildren,\n        });\n        return acc;\n      }\n      if (predicate(node.root, true)) {\n        acc.push(node.root);\n        return acc;\n      }\n      return acc;\n    }\n\n    if (predicate(node)) {\n      acc.push(node);\n      return acc;\n    }\n\n    return acc;\n  },\n  [],\n);\n\nconst filterHierarchicalRows = (rows, predicate, getRowLevelKey, getCollapsedRows) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n  const collapsedRowsMeta = [];\n\n  const filteredTree = filterTree(tree, (row, isNode) => {\n    if (isNode) {\n      const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n      if (collapsedRows && collapsedRows.length) {\n        const filteredCollapsedRows = collapsedRows.filter(predicate);\n        collapsedRowsMeta.push([row, filteredCollapsedRows]);\n        return !!filteredCollapsedRows.length || predicate(row);\n      }\n      if (predicate(row)) {\n        collapsedRowsMeta.push([row, []]);\n        return true;\n      }\n      return false;\n    }\n    return predicate(row);\n  });\n\n  return { rows: treeToRows(filteredTree), collapsedRowsMeta: new Map(collapsedRowsMeta) };\n};\n\nconst buildPredicate = (\n  initialFilterExpression,\n  getCellValue,\n  getColumnPredicate,\n) => {\n  const getSimplePredicate = (filterExpression) => {\n    const { columnName } = filterExpression;\n    const customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    const predicate = customPredicate || defaultFilterPredicate;\n    return row => predicate(getCellValue(row, columnName), filterExpression, row);\n  };\n\n  const getOperatorPredicate = (filterExpression) => {\n    const build = operators[toLowerCase(filterExpression.operator)];\n    // eslint-disable-next-line no-use-before-define\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  const getPredicate = filterExpression => getOperatorPredicate(filterExpression)\n    || getSimplePredicate(filterExpression);\n\n  return getPredicate(initialFilterExpression);\n};\n\nexport const filteredRows = (\n  rows,\n  filterExpression,\n  getCellValue,\n  getColumnPredicate,\n  getRowLevelKey,\n  getCollapsedRows,\n) => {\n  if (!(filterExpression && Object.keys(filterExpression).length && rows.length)) {\n    return { rows };\n  }\n\n  const predicate = buildPredicate(\n    filterExpression,\n    getCellValue,\n    getColumnPredicate,\n  );\n\n  return getRowLevelKey\n    ? filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows)\n    : { rows: rows.filter(predicate) };\n};\n\nexport const filteredCollapsedRowsGetter = (\n  { collapsedRowsMeta },\n) => row => collapsedRowsMeta && collapsedRowsMeta.get(row);\n\nexport const unwrappedFilteredRows = ({ rows }) => rows;\n","export const GROUP_KEY_SEPARATOR = '|';\n","import { GROUP_KEY_SEPARATOR } from './constants';\n\nconst applyColumnGrouping = (grouping, { columnName, groupIndex }) => {\n  const nextGrouping = grouping.slice();\n  const groupingIndex = nextGrouping.findIndex(g => g.columnName === columnName);\n  let targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping.splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping.splice(targetIndex, 0, {\n      columnName,\n    });\n  }\n\n  return nextGrouping;\n};\n\nexport const changeColumnGrouping = ({ grouping, expandedGroups }, { columnName, groupIndex }) => {\n  const nextGrouping = applyColumnGrouping(grouping, { columnName, groupIndex });\n\n  const ungroupedColumnIndex = grouping.findIndex(\n    (group, index) => !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName,\n  );\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  const filteredExpandedGroups = expandedGroups.filter(\n    group => group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex,\n  );\n  if (filteredExpandedGroups.length === expandedGroups.length) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups,\n  };\n};\n\nexport const toggleExpandedGroups = (state, { groupKey }) => {\n  const expandedGroups = state.expandedGroups.slice();\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups,\n  };\n};\n\nexport const draftColumnGrouping = ({ grouping, draftGrouping }, { columnName, groupIndex }) => ({\n  draftGrouping: applyColumnGrouping(draftGrouping || grouping, { columnName, groupIndex }),\n});\n\nexport const cancelColumnGroupingDraft = () => ({\n  draftGrouping: null,\n});\n","export const adjustSortIndex = (groupingIndex, grouping, sorting) => Math.max(\n  grouping.slice(0, groupingIndex).reduce(\n    (acc, columnGrouping) => {\n      const columnSortingIndex = sorting.findIndex(\n        columnSorting => columnSorting.columnName === columnGrouping.columnName,\n      );\n      return (columnSortingIndex === -1 ? acc - 1 : acc);\n    },\n    groupingIndex,\n  ),\n  0,\n);\n","export const GRID_GROUP_TYPE = 'group';\nexport const GRID_GROUP_CHECK = Symbol(`${GRID_GROUP_TYPE}_check`);\nexport const GRID_GROUP_LEVEL_KEY = Symbol(`${GRID_GROUP_TYPE}_levelKey`);\nexport const GRID_GROUP_COLLAPSED_ROWS = Symbol(`${GRID_GROUP_TYPE}_collapsedRows`);\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n  GRID_GROUP_COLLAPSED_ROWS,\n} from './constants';\n\nexport const groupRowChecker = row => row[GRID_GROUP_CHECK];\n\nexport const groupRowLevelKeyGetter = row => (row ? row[GRID_GROUP_LEVEL_KEY] : undefined);\n\nconst defaultColumnCriteria = value => ({\n  key: String(value),\n  value,\n});\n\nexport const groupedRows = (\n  rows,\n  grouping,\n  getCellValue,\n  getColumnCriteria,\n  keyPrefix = '',\n) => {\n  if (!grouping.length) return rows;\n\n  const { columnName } = grouping[0];\n  const groupCriteria = (getColumnCriteria && getColumnCriteria(columnName))\n    || defaultColumnCriteria;\n  const groups = rows\n    .reduce((acc, row) => {\n      const { key, value = key } = groupCriteria(getCellValue(row, columnName), row);\n      const sameKeyItems = acc.get(key);\n\n      if (!sameKeyItems) {\n        acc.set(key, [value, key, [row]]);\n      } else {\n        sameKeyItems[2].push(row);\n      }\n      return acc;\n    }, new Map());\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return [...groups.values()]\n    .reduce((acc, [value, key, items]) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...groupedRows(\n        items,\n        nestedGrouping,\n        getCellValue,\n        getColumnCriteria,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const expandedGroupRows = (rows, grouping, expandedGroups) => {\n  if (!grouping.length) return rows;\n\n  const groupingColumnNames = grouping.map(columnGrouping => columnGrouping.columnName);\n  const expandedGroupsSet = new Set(expandedGroups);\n  let currentGroupExpanded = true;\n  let currentGroupLevel = 0;\n\n  return rows.reduce((acc, row) => {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1][GRID_GROUP_COLLAPSED_ROWS].push(row);\n      }\n      return acc;\n    }\n\n    const groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey);\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push({\n        ...row,\n        [GRID_GROUP_COLLAPSED_ROWS]: [],\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const groupCollapsedRowsGetter = getCollapsedRows => row => row[GRID_GROUP_COLLAPSED_ROWS]\n|| (getCollapsedRows && getCollapsedRows(row));\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from '../integrated-grouping/constants';\n\nexport const customGroupedRows = (\n  currentRows,\n  grouping,\n  getChildGroups,\n  rootRows = currentRows,\n  keyPrefix = '',\n) => {\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows, grouping[0], rootRows)\n    .reduce((acc, { key, value = key, childRows }) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...customGroupedRows(\n        childRows,\n        nestedGrouping,\n        getChildGroups,\n        rootRows,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const customGroupingRowIdGetter = (getRowId, rows) => {\n  const firstRow = rows.find(row => !row[GRID_GROUP_CHECK]);\n  if (!firstRow || getRowId(firstRow) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .filter(row => !row[GRID_GROUP_CHECK])\n    .map((row, rowIndex) => [row, rowIndex]));\n\n  return row => map.get(row);\n};\n","export const groupingPanelItems = (columns, grouping, draftGrouping) => {\n  const items = draftGrouping.map(({ columnName }) => ({\n    column: columns.find(c => c.name === columnName),\n    draft: !grouping.some(columnGrouping => columnGrouping.columnName === columnName),\n  }));\n\n  grouping.forEach(({ columnName }, index) => {\n    if (draftGrouping.some(columnGrouping => columnGrouping.columnName === columnName)) return;\n    items.splice(index, 0, {\n      column: columns.find(c => c.name === columnName),\n      draft: true,\n    });\n  });\n\n  return items;\n};\n","export const setCurrentPage = (prevPage, page) => page;\nexport const setPageSize = (prevPageSize, size) => size;\n","export const clamp = (value, max) => Math.max(Math.min(value, max), 0);\n","import { clamp } from './helpers';\n\nconst PAGE_HEADERS_OVERFLOW_ERROR = 'Max row level exceeds the page size. Consider increasing the page size.';\n\nexport const paginatedRows = (rows, pageSize, page) => (\n  pageSize\n    ? rows.slice(pageSize * page, pageSize * (page + 1))\n    : rows\n);\n\nexport const rowsWithPageHeaders = (rows, pageSize, getRowLevelKey) => {\n  if (!pageSize || !getRowLevelKey) return rows;\n\n  let result = rows.slice();\n\n  let headerRows = [];\n  let currentIndex = 0;\n  while (result.length > currentIndex) {\n    const row = result[currentIndex];\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const headerIndex = headerRows.findIndex(headerRow => getRowLevelKey(headerRow) === levelKey);\n      if (headerIndex === -1) {\n        headerRows = [...headerRows, row];\n      } else {\n        headerRows = [...headerRows.slice(0, headerIndex), row];\n      }\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n    const indexInPage = currentIndex % pageSize;\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [\n        ...result.slice(0, currentIndex),\n        headerRows[indexInPage],\n        ...result.slice(currentIndex),\n      ];\n    }\n    currentIndex += 1;\n  }\n\n  return result;\n};\n\nexport const rowCount = rows => rows.length;\n\nexport const pageCount = (count, pageSize) => (\n  pageSize ? Math.ceil(count / pageSize) : 1\n);\n\nexport const currentPage = (page, totalCount, pageSize, setCurrentPage) => {\n  const totalPages = pageCount(totalCount, pageSize);\n  const adjustedCurrentPage = clamp(page, totalPages - 1);\n  if (page !== adjustedCurrentPage) {\n    setTimeout(() => setCurrentPage(adjustedCurrentPage));\n  }\n  return adjustedCurrentPage;\n};\n","export const firstRowOnPage = (currentPage, pageSize, totalCount) => {\n  if (totalCount === 0) {\n    return 0;\n  }\n  return pageSize ? (currentPage * pageSize) + 1 : 1;\n};\n\nexport const lastRowOnPage = (currentPage, pageSize, totalRowCount) => {\n  let result = totalRowCount;\n  if (pageSize) {\n    const index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n\nexport const calculateStartPage = (currentPage, maxButtonCount, totalPageCount) => Math.max(\n  Math.min(\n    currentPage - Math.floor(maxButtonCount / 2, 10),\n    (totalPageCount - maxButtonCount) + 1,\n  ),\n  1,\n);\n","export const toggle = (source, items, state) => {\n  const itemsSet = new Set(items);\n\n  let sourceState = state;\n  if (sourceState === undefined) {\n    const availableSelection = source.filter(item => itemsSet.has(item));\n    sourceState = availableSelection.length !== itemsSet.size;\n  }\n\n  if (sourceState) {\n    const sourceSet = new Set(source);\n    return [\n      ...source,\n      ...items.filter(item => !sourceSet.has(item)),\n    ];\n  }\n\n  return source.filter(item => !itemsSet.has(item));\n};\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleSelection = (selection, { rowIds, state }) => toggle(selection, rowIds, state);\n","export const rowsWithAvailableToSelect = (rows, getRowId, isGroupRow) => {\n  let dataRows = rows;\n  if (isGroupRow) {\n    dataRows = dataRows.filter(row => !isGroupRow(row));\n  }\n  return { rows, availableToSelect: dataRows.map(row => getRowId(row)) };\n};\n\nexport const someSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return availableToSelect.length !== 0 && selectionSet.size !== 0\n    && availableToSelect.some(elem => selectionSet.has(elem))\n    && availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const allSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return selectionSet.size !== 0 && availableToSelect.length !== 0\n    && !availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const unwrapSelectedRows = ({ rows }) => rows;\n","export const startEditRows = (prevEditingRowIds, { rowIds }) => [...prevEditingRowIds, ...rowIds];\n\nexport const stopEditRows = (prevEditingRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(id => !rowIdSet.has(id));\n};\n\nexport const addRow = (addedRows, { row } = { row: {} }) => [...addedRows, row];\n\nexport const changeAddedRow = (addedRows, { rowId, change }) => {\n  const result = addedRows.slice();\n  result[rowId] = { ...result[rowId], ...change };\n  return result;\n};\n\nexport const cancelAddedRows = (addedRows, { rowIds }) => {\n  const result = [];\n  const indexSet = new Set(rowIds);\n  addedRows.forEach((row, index) => {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nexport const changeRow = (prevRowChanges, { rowId, change }) => {\n  const prevChange = prevRowChanges[rowId] || {};\n  return {\n    ...prevRowChanges,\n    [rowId]: {\n      ...prevChange,\n      ...change,\n    },\n  };\n};\n\nexport const cancelChanges = (prevRowChanges, { rowIds }) => {\n  const result = { ...prevRowChanges };\n  rowIds.forEach((rowId) => {\n    delete result[rowId];\n  });\n  return result;\n};\n\nexport const deleteRows = (deletedRowIds, { rowIds }) => [...deletedRowIds, ...rowIds];\n\nexport const cancelDeletedRows = (deletedRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(rowId => !rowIdSet.has(rowId));\n};\n","export const changedRowsByIds = (changes, rowIds) => {\n  const result = {};\n  rowIds.forEach((rowId) => {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nexport const addedRowsByIds = (addedRows, rowIds) => {\n  const rowIdSet = new Set(rowIds);\n  const result = [];\n  addedRows.forEach((row, index) => {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nconst defaultCreateRowChange = (row, value, columnName) => ({ [columnName]: value });\nexport const createRowChangeGetter = (\n  createRowChange = defaultCreateRowChange,\n  columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n    return acc;\n  }, {});\n\n  return (row, value, columnName) => {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n    return createRowChange(row, value, columnName);\n  };\n};\n","export const getRowChange = (rowChanges, rowId) => rowChanges[rowId] || {};\n","export const TABLE_REORDERING_TYPE = 'reordering';\n","export const changeColumnOrder = (order, { sourceColumnName, targetColumnName }) => {\n  const sourceColumnIndex = order.indexOf(sourceColumnName);\n  const targetColumnIndex = order.indexOf(targetColumnName);\n  const newOrder = order.slice();\n\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n","export const TABLE_DATA_TYPE = 'data';\nexport const TABLE_NODATA_TYPE = 'nodata';\n","import mergeSort from '../../utils/merge-sort';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_REORDERING_TYPE } from './constants';\n\nexport const orderedColumns = (tableColumns, order) => mergeSort(tableColumns, (a, b) => {\n  if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n\n  const aPos = order.indexOf(a.column.name);\n  const bPos = order.indexOf(b.column.name);\n  return aPos - bPos;\n});\n\nexport const tableHeaderRowsWithReordering = tableHeaderRows => [\n  ...tableHeaderRows,\n  {\n    key: TABLE_REORDERING_TYPE,\n    type: TABLE_REORDERING_TYPE,\n    height: 0,\n  },\n];\n\nexport const draftOrder = (order, sourceColumnIndex, targetColumnIndex) => {\n  if (sourceColumnIndex === -1\n    || targetColumnIndex === -1\n    || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  const result = order.slice();\n  const sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n\n  return result;\n};\n","const UNSET_COLUMN_WIDTH_ERROR = [\n  'The \"$1\" column\\'s width is not specified.',\n  'The TableColumnResizing plugin requires that all columns have the specified width.',\n].join('\\n');\n\nconst specifyWidths = (tableColumns, widths, onAbsence) => {\n  if (!widths.length) return tableColumns;\n  return tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type === 'data') {\n        const columnName = tableColumn.column.name;\n        const column = widths.find(el => el.columnName === columnName);\n        const width = column && column.width;\n        if (width === undefined) {\n          onAbsence(columnName);\n          acc.push(tableColumn);\n        } else {\n          acc.push({ ...tableColumn, width });\n        }\n      } else {\n        acc.push(tableColumn);\n      }\n      return acc;\n    }, []);\n};\n\nexport const tableColumnsWithWidths = (\n  tableColumns, columnWidths,\n) => specifyWidths(tableColumns, columnWidths, (columnName) => {\n  throw new Error(UNSET_COLUMN_WIDTH_ERROR.replace('$1', columnName));\n});\n\nexport const tableColumnsWithDraftWidths = (\n  tableColumns, draftColumnWidths,\n) => specifyWidths(tableColumns, draftColumnWidths, () => {});\n","export const changeTableColumnWidth = (state, { columnName, shift, minColumnWidth }) => {\n  const { columnWidths } = state;\n  const nextColumnWidth = columnWidths.slice();\n  const index = nextColumnWidth.findIndex(elem => elem.columnName === columnName);\n  const updatedColumn = nextColumnWidth[index];\n  const size = Math.max(minColumnWidth, updatedColumn.width + shift);\n  nextColumnWidth.splice(index, 1, { columnName, width: size });\n\n  return {\n    columnWidths: nextColumnWidth,\n  };\n};\n\nexport const draftTableColumnWidth = (state, { columnName, shift, minColumnWidth }) => {\n  const { columnWidths } = state;\n  const updatedColumn = columnWidths.find(elem => elem.columnName === columnName);\n  const size = Math.max(minColumnWidth, updatedColumn.width + shift);\n\n  return {\n    draftColumnWidths: [{ columnName: updatedColumn.columnName, width: size }],\n  };\n};\n\nexport const cancelTableColumnWidthDraft = () => ({\n  draftColumnWidths: [],\n});\n","export const TABLE_EDIT_COMMAND_TYPE = 'editCommand';\n","export const TABLE_ADDED_TYPE = 'added';\nexport const TABLE_EDIT_TYPE = 'edit';\n","export const TABLE_HEADING_TYPE = 'heading';\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from '../table-edit-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const isHeadingEditCommandsTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\nexport const isEditCommandsTableCell = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE\n  || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n","import { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const tableColumnsWithEditing = (tableColumns, width) => [\n  { key: TABLE_EDIT_COMMAND_TYPE, type: TABLE_EDIT_COMMAND_TYPE, width },\n  ...tableColumns];\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isEditTableCell = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE)\n  && tableColumn.type === TABLE_DATA_TYPE;\nexport const isAddedTableRow = tableRow => tableRow.type === TABLE_ADDED_TYPE;\nexport const isEditTableRow = tableRow => tableRow.type === TABLE_EDIT_TYPE;\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithEditing = (tableRows, editingRowIds, addedRows, rowHeight) => {\n  const rowIds = new Set(editingRowIds);\n  const editedTableRows = tableRows\n    .map(tableRow => (\n      tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId)\n        ? {\n          ...tableRow,\n          type: TABLE_EDIT_TYPE,\n          height: rowHeight,\n        }\n        : tableRow\n    ));\n\n  const addedTableRows = addedRows\n    .map((row, rowIndex) => ({\n      key: `${TABLE_ADDED_TYPE}_${rowIndex}`,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n      row,\n    }));\n\n  return [\n    ...addedTableRows.reverse(),\n    ...editedTableRows,\n  ];\n};\n","export const TABLE_FILTER_TYPE = 'filter';\nexport const DEFAULT_FILTER_OPERATIONS = [\n  'contains',\n  'notContains',\n  'startsWith',\n  'endsWith',\n  'equal',\n  'notEqual',\n];\n","import { TABLE_FILTER_TYPE, DEFAULT_FILTER_OPERATIONS } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isFilterTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isFilterTableRow = tableRow => tableRow.type === TABLE_FILTER_TYPE;\n\nexport const getColumnFilterOperations = (\n  getAvailableFilterOperations, columnName,\n) => (getAvailableFilterOperations && getAvailableFilterOperations(columnName))\n  || DEFAULT_FILTER_OPERATIONS;\n\nexport const isFilterValueEmpty = value => value === undefined || !String(value).length;\n","import { TABLE_FILTER_TYPE } from './constants';\n\nexport const tableHeaderRowsWithFilter = (headerRows, rowHeight) => [\n  ...headerRows,\n  { key: TABLE_FILTER_TYPE, type: TABLE_FILTER_TYPE, height: rowHeight }];\n","export const TABLE_GROUP_TYPE = 'group';\n","import { TABLE_GROUP_TYPE } from './constants';\n\nexport const isGroupTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableRow.row.groupedBy === tableColumn.column.name;\nexport const isGroupIndentTableCell = (tableRow, tableColumn, grouping) => {\n  if (tableRow.type !== TABLE_GROUP_TYPE || tableColumn.type !== TABLE_GROUP_TYPE) return false;\n  if (tableRow.row.groupedBy === tableColumn.column.name) return false;\n  const rowGroupIndex = grouping.findIndex(\n    columnGrouping => columnGrouping.columnName === tableRow.row.groupedBy,\n  );\n  const columnGroupIndex = grouping.findIndex(\n    columnGrouping => columnGrouping.columnName === tableColumn.column.name,\n  );\n  return columnGroupIndex < rowGroupIndex;\n};\nexport const isGroupTableRow = tableRow => tableRow.type === TABLE_GROUP_TYPE;\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_GROUP_TYPE } from './constants';\n\nconst tableColumnsWithDraftGrouping = (\n  tableColumns, grouping, draftGrouping, showColumnWhenGrouped,\n) => tableColumns\n  .reduce((acc, tableColumn) => {\n    if (tableColumn.type !== TABLE_DATA_TYPE) {\n      acc.push(tableColumn);\n      return acc;\n    }\n\n    const columnName = tableColumn.column.name;\n    const columnGroupingExists = grouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n    const columnDraftGroupingExists = draftGrouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n\n    if ((!columnGroupingExists && !columnDraftGroupingExists)\n        || showColumnWhenGrouped(columnName)) {\n      acc.push(tableColumn);\n    } else if ((!columnGroupingExists && columnDraftGroupingExists)\n        || (columnGroupingExists && !columnDraftGroupingExists)) {\n      acc.push({\n        ...tableColumn,\n        draft: true,\n      });\n    }\n    return acc;\n  }, []);\n\nexport const tableColumnsWithGrouping = (\n  columns,\n  tableColumns,\n  grouping,\n  draftGrouping,\n  indentColumnWidth,\n  showColumnWhenGrouped,\n) => [\n  ...grouping.map((columnGrouping) => {\n    const groupedColumn = columns.find(column => column.name === columnGrouping.columnName);\n    return {\n      key: `${TABLE_GROUP_TYPE}_${groupedColumn.name}`,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth,\n    };\n  }),\n  ...tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped),\n];\n\nexport const tableRowsWithGrouping = (tableRows, isGroupRow) => tableRows.map((tableRow) => {\n  if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n    return tableRow;\n  }\n  return {\n    ...tableRow,\n    key: `${TABLE_GROUP_TYPE}_${tableRow.row.compoundKey}`,\n    type: TABLE_GROUP_TYPE,\n  };\n});\n\nexport const tableGroupCellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n    && tableRow.row.groupedBy === tableColumn.column.name) {\n    return tableColumns.length - tableColumns.indexOf(tableColumn);\n  }\n  return getTableCellColSpan(params);\n};\n","import { TABLE_HEADING_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isHeadingTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isHeadingTableRow = tableRow => (tableRow.type === TABLE_HEADING_TYPE);\n","import { TABLE_HEADING_TYPE } from './constants';\n\nexport const tableRowsWithHeading = headerRows => [\n  { key: TABLE_HEADING_TYPE, type: TABLE_HEADING_TYPE },\n  ...headerRows];\n","export const TABLE_BAND_TYPE = 'tableBand';\nexport const BAND_GROUP_CELL = 'bandGroupCell';\nexport const BAND_HEADER_CELL = 'bandHeaderCell';\nexport const BAND_EMPTY_CELL = 'bandEmptyCell';\nexport const BAND_DUPLICATE_RENDER = 'bandDuplicateRender';\n","import {\n  TABLE_BAND_TYPE, BAND_GROUP_CELL, BAND_HEADER_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n} from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\n\nexport const isBandedTableRow = tableRow => (tableRow.type === TABLE_BAND_TYPE);\nexport const isBandedOrHeaderRow = tableRow => isBandedTableRow(tableRow)\n|| tableRow.type === TABLE_HEADING_TYPE;\n\nexport const getColumnMeta = (\n  columnName, bands, tableRowLevel,\n  level = 0, title = null, result = null,\n) => bands.reduce((acc, column) => {\n  if (column.columnName === columnName) {\n    acc.title = title;\n    acc.level = level;\n    return acc;\n  }\n  if (column.children !== undefined) {\n    return getColumnMeta(\n      columnName,\n      column.children,\n      tableRowLevel,\n      level + 1,\n      level > tableRowLevel ? title : column.title,\n      acc,\n    );\n  }\n  return acc;\n}, result || { level, title });\n\nexport const getColSpan = (\n  currentColumnIndex, tableColumns, columnBands, currentRowLevel, currentColumnTitle,\n) => {\n  let isOneChain = true;\n  return tableColumns.reduce((acc, tableColumn, index) => {\n    if (tableColumn.type !== TABLE_DATA_TYPE || index <= currentColumnIndex) return acc;\n    const columnMeta = getColumnMeta(tableColumn.column.name, columnBands, currentRowLevel);\n    if (isOneChain && columnMeta.title === currentColumnTitle) {\n      return acc + 1;\n    }\n    isOneChain = false;\n    return acc;\n  }, 1);\n};\n\nexport const getBandComponent = (params, tableHeaderRows, tableColumns, columnBands) => {\n  if (params.rowSpan) return { type: BAND_DUPLICATE_RENDER, payload: null };\n\n  const maxLevel = tableHeaderRows.filter(column => column.type === TABLE_BAND_TYPE).length + 1;\n  const currentRowLevel = params.tableRow.level === undefined\n    ? maxLevel - 1 : params.tableRow.level;\n  const currentColumnMeta = params.tableColumn.type === TABLE_DATA_TYPE\n    ? getColumnMeta(params.tableColumn.column.name, columnBands, currentRowLevel)\n    : { level: 0, title: '' };\n\n  if (currentColumnMeta.level < currentRowLevel) return { type: BAND_EMPTY_CELL, payload: null };\n  if (currentColumnMeta.level === currentRowLevel) {\n    return {\n      type: BAND_HEADER_CELL,\n      payload: {\n        tableRow: tableHeaderRows.find(row => row.type === TABLE_HEADING_TYPE),\n        rowSpan: maxLevel - currentRowLevel,\n      },\n    };\n  }\n\n  const currentColumnIndex = tableColumns.findIndex(\n    tableColumn => tableColumn.key === params.tableColumn.key,\n  );\n  if (currentColumnIndex > 0 && tableColumns[currentColumnIndex - 1].type === TABLE_DATA_TYPE) {\n    const prevColumnMeta = getColumnMeta(\n      tableColumns[currentColumnIndex - 1].column.name,\n      columnBands,\n      currentRowLevel,\n    );\n    if (prevColumnMeta.title === currentColumnMeta.title) return { type: null, payload: null };\n  }\n\n  return {\n    type: BAND_GROUP_CELL,\n    payload: {\n      colSpan: getColSpan(\n        currentColumnIndex,\n        tableColumns,\n        columnBands,\n        currentRowLevel,\n        currentColumnMeta.title,\n      ),\n      value: currentColumnMeta.title,\n      column: currentColumnMeta,\n    },\n  };\n};\n","import { TABLE_BAND_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithBands = (tableHeaderRows, columnBands, tableColumns) => {\n  const tableDataColumns = tableColumns.filter(column => column.type === TABLE_DATA_TYPE);\n  const getMaxNestedLevel = (bands, level = 0, result = null) => bands.reduce((acc, column) => {\n    if (column.children !== undefined) {\n      return getMaxNestedLevel(column.children, level + 1, acc);\n    }\n    const isDataColumn = tableDataColumns.findIndex(\n      dataColumn => dataColumn.column.name === column.columnName,\n    ) > -1;\n    if (level > acc.level && isDataColumn) {\n      acc.level = level;\n      return acc;\n    }\n    return acc;\n  }, result || { level: 0 });\n\n  const tableBandHeaders = Array.from({ length: getMaxNestedLevel(columnBands, 0).level })\n    .map((row, index) => ({ key: `${TABLE_BAND_TYPE}_${index}`, type: TABLE_BAND_TYPE, level: index }));\n  return [...tableBandHeaders, ...tableHeaderRows];\n};\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleDetailRowExpanded = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n","export const TABLE_DETAIL_TYPE = 'detail';\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isDetailRowExpanded = (\n  expandedDetailRowIds, rowId,\n) => expandedDetailRowIds.indexOf(rowId) > -1;\nexport const isDetailToggleTableCell = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isDetailTableRow = tableRow => tableRow.type === TABLE_DETAIL_TYPE;\nexport const isDetailTableCell = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn) === 0;\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithExpandedDetail = (tableRows, expandedDetailRowIds, rowHeight) => {\n  let result = tableRows;\n  expandedDetailRowIds\n    .forEach((expandedRowId) => {\n      const rowIndex = result.findIndex(\n        tableRow => tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId,\n      );\n      if (rowIndex === -1) return;\n      const insertIndex = rowIndex + 1;\n      const { row, rowId } = result[rowIndex];\n      result = [\n        ...result.slice(0, insertIndex),\n        {\n          key: `${TABLE_DETAIL_TYPE}_${rowId}`,\n          type: TABLE_DETAIL_TYPE,\n          rowId,\n          row,\n          height: rowHeight,\n        },\n        ...result.slice(insertIndex),\n      ];\n    });\n  return result;\n};\n\nexport const tableColumnsWithDetail = (tableColumns, toggleColumnWidth) => [\n  { key: TABLE_DETAIL_TYPE, type: TABLE_DETAIL_TYPE, width: toggleColumnWidth },\n  ...tableColumns,\n];\n\nexport const tableDetailCellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_DETAIL_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return getTableCellColSpan(params);\n};\n","export const TABLE_SELECT_TYPE = 'select';\n","import { TABLE_SELECT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\n\nexport const isSelectTableCell = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isSelectAllTableCell = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n","import { TABLE_SELECT_TYPE } from './constants';\n\nexport const tableColumnsWithSelection = (tableColumns, selectionColumnWidth) => [\n  { key: TABLE_SELECT_TYPE, type: TABLE_SELECT_TYPE, width: selectionColumnWidth },\n  ...tableColumns,\n];\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\n\nexport const isDataTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isHeaderStubTableCell = (tableRow, headerRows) => headerRows.indexOf(tableRow) > -1;\nexport const isDataTableRow = tableRow => tableRow.type === TABLE_DATA_TYPE;\nexport const isNoDataTableRow = tableRow => tableRow.type === TABLE_NODATA_TYPE;\nexport const isNoDataTableCell = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn) === 0;\n","export const getColumnExtension = (columnExtensions, columnName) => {\n  if (!columnExtensions) {\n    return {};\n  }\n  const columnExtension = columnExtensions.find(extension => extension.columnName === columnName);\n  if (!columnExtension) {\n    return {};\n  }\n  return columnExtension;\n};\n\nexport const getColumnExtensionValueGetter = (\n  columnExtensions, extensionName, defaultValue,\n) => (columnName) => {\n  if (columnExtensions) {\n    const columnExtension = getColumnExtension(columnExtensions, columnName);\n    const extensionValue = columnExtension[extensionName];\n    return extensionValue !== undefined ? extensionValue : defaultValue;\n  }\n  return defaultValue;\n};\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport { getColumnExtension } from '../../utils/column-extension';\n\nexport const tableColumnsWithDataRows = (columns, columnExtensions) => columns.map((column) => {\n  const { name } = column;\n  const columnExtension = getColumnExtension(columnExtensions, name);\n  return {\n    key: `${TABLE_DATA_TYPE}_${name}`,\n    type: TABLE_DATA_TYPE,\n    width: columnExtension.width,\n    align: columnExtension.align,\n    wordWrapEnabled: columnExtension.wordWrapEnabled,\n    column,\n  };\n});\n\nexport const tableRowsWithDataRows = (rows, getRowId) => (\n  !rows.length\n    ? [{ key: TABLE_NODATA_TYPE, type: TABLE_NODATA_TYPE }]\n    : rows.map((row) => {\n      const rowId = getRowId(row);\n      return {\n        row,\n        rowId,\n        type: TABLE_DATA_TYPE,\n        key: `${TABLE_DATA_TYPE}_${rowId}`,\n      };\n    }));\n\nexport const tableCellColSpanGetter = (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_NODATA_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return 1;\n};\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const visibleTableColumns = (\n  tableColumns, hiddenColumnNames,\n) => tableColumns.filter(tableColumn => tableColumn.type !== TABLE_DATA_TYPE\n    || hiddenColumnNames.indexOf(tableColumn.column.name) === -1);\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableDataColumnsExist = tableColumns => tableColumns.some(\n  column => column.type === TABLE_DATA_TYPE,\n);\n","export const columnChooserItems = (columns, hiddenColumnNames) => columns.map(column => ({\n  column,\n  hidden: hiddenColumnNames.indexOf(column.name) !== -1,\n}));\n","export const toggleColumn = (hiddenColumnNames, columnName) => (\n  hiddenColumnNames.indexOf(columnName) === -1\n    ? [...hiddenColumnNames, columnName]\n    : hiddenColumnNames.filter(hiddenColumn => hiddenColumn !== columnName)\n);\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleRowExpanded = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n","export const GRID_TREE_NODE_TYPE = 'treeNode';\n","import { GRID_TREE_NODE_TYPE } from './constants';\n\nconst customTreeRows = (\n  currentRow,\n  getChildRows,\n  rootRows,\n  level = 0,\n) => {\n  const childRows = getChildRows(currentRow, rootRows);\n\n  if (!childRows) return { rows: [], treeMeta: [], empty: true };\n\n  return childRows\n    .reduce((acc, row) => {\n      const nestedResult = customTreeRows(\n        row,\n        getChildRows,\n        rootRows,\n        level + 1,\n      );\n      acc.rows.push(row, ...nestedResult.rows);\n      acc.treeMeta.push([row, { level, leaf: !!nestedResult.empty }], ...nestedResult.treeMeta);\n\n      return acc;\n    }, { rows: [], treeMeta: [] });\n};\n\nexport const customTreeRowsWithMeta = (\n  rows,\n  getChildRows,\n) => {\n  const result = customTreeRows(null, getChildRows, rows);\n\n  return {\n    rows: result.rows,\n    treeMeta: new Map(result.treeMeta),\n  };\n};\n\nexport const customTreeRowIdGetter = (getRowId, { rows, treeMeta }) => {\n  const firstNestedRowIndex = rows.findIndex(row => treeMeta.get(row).level > 0);\n  if (firstNestedRowIndex === -1 || getRowId(rows[firstNestedRowIndex]) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .map((row, rowIndex) => [row, rowIndex]));\n  return row => map.get(row);\n};\n\nexport const customTreeRowLevelKeyGetter = (getRowLevelKey, { treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  if (rowMeta !== undefined) {\n    return `${GRID_TREE_NODE_TYPE}_${rowMeta.level}`;\n  }\n  return getRowLevelKey && getRowLevelKey();\n};\n\nexport const expandedTreeRows = ({ rows, treeMeta }, getRowId, expandedRowIds) => {\n  const expandedRowIdsSet = new Set(expandedRowIds);\n\n  let currentExpanded = true;\n  let currentLevel = 0;\n  return rows.reduce((acc, row) => {\n    const rowMeta = treeMeta.get(row);\n    const level = rowMeta && rowMeta.level;\n    if (level === undefined && currentExpanded) {\n      acc.rows.push(row);\n      return acc;\n    }\n\n    if (!currentExpanded && (level === undefined || level > currentLevel)) {\n      const lastRow = acc.rows[acc.rows.length - 1];\n      let collapsedItems = acc.collapsedRowsMeta.get(lastRow);\n      if (!collapsedItems) {\n        collapsedItems = [];\n        acc.collapsedRowsMeta.set(lastRow, collapsedItems);\n      }\n      collapsedItems.push(row);\n      return acc;\n    }\n\n    currentExpanded = expandedRowIdsSet.has(getRowId(row));\n    currentLevel = level;\n\n    acc.rows.push(row);\n\n    return acc;\n  }, { rows: [], treeMeta, collapsedRowsMeta: new Map() });\n};\n\nexport const collapsedTreeRowsGetter = (\n  getCollapsedRows, { collapsedRowsMeta },\n) => row => collapsedRowsMeta.get(row) || (getCollapsedRows && getCollapsedRows(row));\n\nexport const isTreeRowLeafGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return rowMeta && rowMeta.leaf;\n};\n\nexport const getTreeRowLevelGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return rowMeta && rowMeta.level;\n};\n\nexport const unwrappedCustomTreeRows = ({ rows }) => rows;\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isTreeTableCell = (\n  tableRow, tableColumn, forColumnName,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE\n  && tableColumn.column.name === forColumnName;\n","export const changeSearchValue = (prevSearchValue, searchValue) => searchValue;\n","export const searchFilterExpression = (searchValue, columns, filterExpression) => {\n  const filters = columns.map(({ name }) => ({ columnName: name, value: searchValue }));\n  const selfFilterExpression = { operator: 'or', filters };\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n  return {\n    operator: 'and',\n    filters: [filterExpression, selfFilterExpression],\n  };\n};\n","export const getAvailableFilterOperationsGetter = (\n  getAvailableFilterOperations,\n  availableFilterOperations,\n  columnNames,\n) => columnName => (columnNames.indexOf(columnName) > -1 && availableFilterOperations)\n    || (typeof getAvailableFilterOperations === 'function' && getAvailableFilterOperations(columnName))\n    || undefined;\n","const defaultSummaryCalculators = {\n  count: rows => rows.length,\n  sum: (rows, getValue) => rows.reduce((acc, row) => acc + getValue(row), 0),\n  max: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.max(acc, getValue(row)), -Infinity)\n    : null),\n  min: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.min(acc, getValue(row)), Infinity)\n    : null),\n  avg: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => acc + getValue(row), 0) / rows.length\n    : null),\n};\n\nexport const defaultSummaryCalculator = (type, rows, getValue) => {\n  const summaryCalculator = defaultSummaryCalculators[type];\n  if (!summaryCalculator) {\n    throw new Error(`The summary type '${type}' is not defined`);\n  }\n  return summaryCalculator(rows, getValue);\n};\n\nconst rowsSummary = (rows, summaryItems, getCellValue, calculator) => summaryItems\n  .reduce((acc, { type, columnName }) => {\n    const getValue = row => getCellValue(row, columnName);\n    acc.push(calculator(type, rows, getValue));\n    return acc;\n  }, []);\n\nexport const totalSummaryValues = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getCollapsedRows,\n  calculator = defaultSummaryCalculator,\n) => {\n  const plainRows = rows.reduce((acc, row) => {\n    if (getRowLevelKey && getRowLevelKey(row)) {\n      if (!isGroupRow || !isGroupRow(row)) {\n        acc.push(row);\n      }\n      const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n      if (collapsedRows) {\n        acc.push(...collapsedRows);\n      }\n      return acc;\n    }\n    acc.push(row);\n    return acc;\n  }, []);\n  return rowsSummary(plainRows, summaryItems, getCellValue, calculator);\n};\n\nexport const groupSummaryValues = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels = [];\n  const summaries = {};\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (!levelKey) {\n      levels.forEach((level) => {\n        level.rows.push(row);\n      });\n    }\n    const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach((level) => {\n        summaries[level.row.compoundKey] = rowsSummary(\n          level.rows, summaryItems, getCellValue, calculator,\n        );\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (isGroupRow(row)) {\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    summaries[level.row.compoundKey] = rowsSummary(\n      level.rows, summaryItems, getCellValue, calculator,\n    );\n  });\n  return summaries;\n};\n\nexport const treeSummaryValues = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels = [];\n  const summaries = {};\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (!levelKey) {\n      levels[levels.length - 1].rows.push(row);\n      return;\n    }\n    const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach((level) => {\n        if (level.rows.length) {\n          summaries[getRowId(level.row)] = rowsSummary(\n            level.rows, summaryItems, getCellValue, calculator,\n          );\n        }\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (!isGroupRow || !isGroupRow(row)) {\n      if (levels.length) {\n        levels[levels.length - 1].rows.push(row);\n      }\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    if (level.rows.length) {\n      summaries[getRowId(level.row)] = rowsSummary(\n        level.rows, summaryItems, getCellValue, calculator,\n      );\n    }\n  });\n  return summaries;\n};\n","export const TABLE_TOTAL_SUMMARY_TYPE = 'totalSummary';\nexport const TABLE_GROUP_SUMMARY_TYPE = 'groupSummary';\nexport const TABLE_TREE_SUMMARY_TYPE = 'treeSummary';\n","import { TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE } from './constants';\n\nexport const tableRowsWithTotalSummaries = footerRows => [\n  { key: TABLE_TOTAL_SUMMARY_TYPE, type: TABLE_TOTAL_SUMMARY_TYPE },\n  ...footerRows,\n];\n\nexport const tableRowsWithSummaries = (tableRows, getRowLevelKey, isGroupRow, getRowId) => {\n  if (!getRowLevelKey) return tableRows;\n\n  const result = [];\n  const closeLevel = (level) => {\n    if (!level.opened) return;\n    if (isGroupRow && isGroupRow(level.row)) {\n      const { compoundKey } = level.row;\n      result.push({\n        key: `${TABLE_GROUP_SUMMARY_TYPE}_${compoundKey}`,\n        type: TABLE_GROUP_SUMMARY_TYPE,\n        row: level.row,\n      });\n    } else {\n      const rowId = getRowId(level.row);\n      result.push({\n        key: `${TABLE_TREE_SUMMARY_TYPE}_${rowId}`,\n        type: TABLE_TREE_SUMMARY_TYPE,\n        row: level.row,\n      });\n    }\n  };\n\n  let levels = [];\n  tableRows.forEach((tableRow) => {\n    const { row } = tableRow;\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n      if (levelIndex > -1) {\n        levels.slice(levelIndex).forEach(closeLevel);\n        levels = levels.slice(0, levelIndex);\n      }\n      if (!isGroupRow || !isGroupRow(row)) {\n        levels = levels.map(level => ({\n          ...level,\n          opened: true,\n        }));\n      }\n      levels.push({\n        levelKey,\n        row,\n        opened: false,\n      });\n    } else {\n      levels = levels.map(level => ({\n        ...level,\n        opened: true,\n      }));\n    }\n    result.push(tableRow);\n  });\n  levels.slice().reverse().forEach(closeLevel);\n\n  return result;\n};\n","import { TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isTotalSummaryTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TOTAL_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isGroupSummaryTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_GROUP_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTreeSummaryTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TREE_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTotalSummaryTableRow = tableRow => tableRow.type === TABLE_TOTAL_SUMMARY_TYPE;\nexport const isGroupSummaryTableRow = tableRow => tableRow.type === TABLE_GROUP_SUMMARY_TYPE;\nexport const isTreeSummaryTableRow = tableRow => tableRow.type === TABLE_TREE_SUMMARY_TYPE;\n\nexport const getColumnSummaries = (summaryItems, columnName, summaryValues) => summaryItems\n  .map((item, index) => [item, index])\n  .filter(([item]) => item.columnName === columnName)\n  .map(([item, index]) => ({ type: item.type, value: summaryValues[index] }));\n","export const getTargetColumnGeometries = (columnGeometries, sourceIndex) => {\n  const sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n  const getWidthDifference = index => columnGeometries[index].right\n                                      - columnGeometries[index].left\n                                      - sourceWidth;\n\n  return columnGeometries\n    .map(({\n      top, right, bottom, left,\n    }, targetIndex) => {\n      let leftBorder = left;\n      if (targetIndex > 0 && targetIndex <= sourceIndex) {\n        leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n      }\n      if (targetIndex > sourceIndex) {\n        leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n      }\n      let rightBorder = right;\n      if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n        rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n      }\n      if (targetIndex < sourceIndex) {\n        rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n      }\n\n      return {\n        top,\n        right: rightBorder,\n        bottom,\n        left: leftBorder,\n      };\n    });\n};\n","import { easeOutCubic } from '@devexpress/dx-core';\nimport { getTargetColumnGeometries } from './column-geometries';\n\nexport const getTableColumnGeometries = (columns, tableWidth) => {\n  const columnWidths = columns\n    .map(column => column.width);\n\n  const freeSpace = tableWidth;\n  const restrictedSpace = columnWidths\n    .reduce((accum, width) => accum + (width || 0), 0);\n  const freeSpacePortions = columnWidths\n    .reduce((accum, width) => accum + (width === undefined ? 1 : 0), 0);\n  const freeSpacePortion = (freeSpace - restrictedSpace) / freeSpacePortions;\n\n  let lastRightPosition = 0;\n  return columnWidths\n    .map(width => (width === undefined ? freeSpacePortion : width))\n    .map((width) => {\n      lastRightPosition += width;\n      return {\n        left: lastRightPosition - width,\n        right: lastRightPosition,\n      };\n    });\n};\n\nexport const getTableTargetColumnIndex = (\n  columnGeometries, sourceIndex, offset,\n) => getTargetColumnGeometries(columnGeometries, sourceIndex)\n  .findIndex(({ left, right }) => offset > left && offset < right);\n\n\nconst ANIMATION_DURATION = 200;\n\nconst getAnimationProgress = animation => (\n  new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n\nexport const getAnimations = (\n  prevColumns,\n  nextColumns,\n  tableWidth,\n  prevAnimations,\n) => {\n  const resizing = prevColumns.map(column => column.key).join()\n    === nextColumns.map(column => column.key).join();\n\n  const prevColumnGeometries = new Map(getTableColumnGeometries(prevColumns, tableWidth)\n    .map((geometry, index) => [prevColumns[index].key, geometry])\n    .map(([key, geometry]) => {\n      const animation = prevAnimations.get(key);\n      if (!animation) return [key, geometry];\n      const progress = easeOutCubic(getAnimationProgress(animation));\n      const left = ((animation.left.to - animation.left.from) * progress) + animation.left.from;\n      return [key, {\n        left,\n        right: geometry.right - (geometry.left - left),\n      }];\n    }));\n\n  const nextColumnGeometries = new Map(getTableColumnGeometries(nextColumns, tableWidth)\n    .map((geometry, index) => [nextColumns[index].key, geometry]));\n\n  return new Map([...nextColumnGeometries.keys()]\n    .map((key) => {\n      const prev = prevColumnGeometries.get(key);\n      const next = nextColumnGeometries.get(key);\n\n      const result = { startTime: new Date().getTime(), style: {} };\n      const takePrevColumnIntoAccount = !!prevAnimations.get(key) || (prev && !resizing);\n      if (Math.abs((takePrevColumnIntoAccount ? prev.left : next.left) - next.left) > 1) {\n        result.left = { from: prev.left, to: next.left };\n      }\n      return [key, result];\n    })\n    .filter(animation => animation[1].left));\n};\n\nexport const filterActiveAnimations = animations => new Map([...animations.entries()]\n  .filter(([, animation]) => getAnimationProgress(animation) < 1));\n\nexport const evalAnimations = animations => new Map([...animations.entries()]\n  .map(([key, animation]) => {\n    const progress = easeOutCubic(getAnimationProgress(animation));\n    const result = { ...animation.style };\n    if (animation.left) {\n      const offset = (animation.left.to - animation.left.from) * (progress - 1);\n      result.transform = `translateX(${offset}px)`;\n    }\n    return [key, result];\n  }));\n","import { getTargetColumnGeometries } from './column-geometries';\n\nconst isOnTheSameLine = (geometry, y) => y >= geometry.top && y <= geometry.bottom;\n\nconst rectToObject = ({\n  top, right, bottom, left,\n}) => ({\n  top, right, bottom, left,\n});\n\nconst collapseGapsBetweenItems = geometries => geometries.map((geometry, index) => {\n  if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n    return {\n      ...geometry,\n      right: geometries[index + 1].left,\n    };\n  }\n  return geometry;\n});\n\nexport const getGroupCellTargetIndex = (geometries, sourceIndex, { x, y }) => {\n  if (geometries.length === 0) return 0;\n\n  const targetGeometries = sourceIndex !== -1\n    ? getTargetColumnGeometries(geometries, sourceIndex)\n    : geometries.map(rectToObject);\n\n  const targetIndex = collapseGapsBetweenItems(targetGeometries)\n    .findIndex((geometry, index) => {\n      const inVerticalBounds = isOnTheSameLine(geometry, y);\n      const inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n      const shouldGoFirst = index === 0 && x < geometry.left;\n      const shouldGoOnLineBreak = !inVerticalBounds\n        && !!geometries[index - 1]\n        && isOnTheSameLine(geometries[index - 1], y);\n\n      return (inVerticalBounds && inHorizontalBounds)\n        || shouldGoFirst\n        || shouldGoOnLineBreak;\n    });\n\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n","const processPattern = (pattern, params) => Object.keys(params).reduce(\n  (msg, key) => msg.replace(`{${key}}`, params[key]),\n  pattern,\n);\n\nexport const getMessagesFormatter = messages => (key, params) => {\n  const message = messages[key];\n\n  if (typeof message === 'function') {\n    return message(params);\n  }\n  if (params) {\n    return processPattern(message, params);\n  }\n  return message;\n};\n","export const STUB_TYPE = 'stub';\nexport const VISIBLE_TYPE = 'visible';\n\nexport const getVisibleBoundary = (items, viewportStart, viewportSize, getItemSize, overscan) => {\n  let start = null;\n  let end = null;\n\n  const viewportEnd = viewportStart + viewportSize;\n  let index = 0;\n  let beforePosition = 0;\n  while (end === null && index < items.length) {\n    const item = items[index];\n    const afterPosition = beforePosition + getItemSize(item);\n    const isVisible = (beforePosition >= viewportStart && beforePosition < viewportEnd)\n      || (afterPosition > viewportStart && afterPosition <= viewportEnd)\n      || (beforePosition < viewportStart && afterPosition > viewportEnd);\n    if (isVisible && start === null) {\n      start = index;\n    }\n    if (!isVisible && start !== null) {\n      end = index - 1;\n      break;\n    }\n    index += 1;\n    beforePosition = afterPosition;\n  }\n  if (start !== null && end === null) {\n    end = index - 1;\n  }\n\n  start = start === null ? 0 : start;\n  end = end === null ? 0 : end;\n\n  if (overscan) {\n    start = Math.max(0, start - overscan);\n    end = Math.min(items.length - 1, end + overscan);\n  }\n\n  return [start, end];\n};\n\nexport const getSpanBoundary = (items, visibleBoundary, getItemSpan) => {\n  let start = visibleBoundary[0];\n  let end = visibleBoundary[1];\n\n  for (let index = 0; index <= visibleBoundary[1]; index += 1) {\n    const span = getItemSpan(items[index]);\n    if (index < visibleBoundary[0] && index + span > visibleBoundary[0]) {\n      start = index;\n    }\n    if (index + (span - 1) > visibleBoundary[1]) {\n      end = index + (span - 1);\n    }\n  }\n\n  return [start, end];\n};\n\nexport const collapseBoundaries = (itemsCount, visibleBoundary, spanBoundaries) => {\n  const beforePoints = new Set([0, visibleBoundary[0]]);\n  const afterPoints = new Set([visibleBoundary[1], itemsCount - 1]);\n  spanBoundaries.forEach((boundary) => {\n    beforePoints.add(boundary[0]);\n    afterPoints.add(boundary[1]);\n  });\n\n  const boundaries = [];\n\n  let lastBeforePoint = null;\n  Array.from(beforePoints).sort((a, b) => a - b).forEach((point) => {\n    if (lastBeforePoint === null) {\n      lastBeforePoint = point;\n      return;\n    }\n    boundaries.push([lastBeforePoint, point - 1]);\n    lastBeforePoint = point;\n  });\n\n  for (let index = visibleBoundary[0]; index <= visibleBoundary[1]; index += 1) {\n    boundaries.push([index, index]);\n  }\n\n  let lastAfterPoint = null;\n  Array.from(afterPoints).sort((a, b) => a - b).forEach((point) => {\n    if (lastAfterPoint === null) {\n      lastAfterPoint = point;\n      return;\n    }\n    boundaries.push([lastAfterPoint + 1, point]);\n    lastAfterPoint = point;\n  });\n\n  return boundaries;\n};\n\nconst getColumnsSize = (columns, startIndex, endIndex, getColumnSize) => {\n  let size = 0;\n  let index;\n  const loopEndIndex = endIndex + 1;\n  for (index = startIndex; index < loopEndIndex; index += 1) {\n    size += getColumnSize(columns[index], 0);\n  }\n  return size;\n};\n\nexport const getCollapsedColumns = (columns, visibleBoundary, boundaries, getColumnWidth) => {\n  const collapsedColumns = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    if (isVisible) {\n      const column = columns[boundary[0]];\n      collapsedColumns.push(column);\n    } else {\n      collapsedColumns.push({\n        key: `${STUB_TYPE}_${boundary[0]}_${boundary[1]}`,\n        type: STUB_TYPE,\n        width: getColumnsSize(columns, boundary[0], boundary[1], getColumnWidth),\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedRows = (rows, visibleBoundary, boundaries, getRowHeight, getCells) => {\n  const collapsedColumns = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    if (isVisible) {\n      const row = rows[boundary[0]];\n      collapsedColumns.push({\n        row,\n        cells: getCells(row),\n      });\n    } else {\n      collapsedColumns.push({\n        row: {\n          type: STUB_TYPE,\n          key: `${STUB_TYPE}_${boundary[0]}_${boundary[1]}`,\n          height: getColumnsSize(rows, boundary[0], boundary[1], getRowHeight),\n        },\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedCells = (columns, spanBoundary, boundaries, getColSpan) => {\n  const collapsedColumns = [];\n  let index = 0;\n  while (index < boundaries.length) {\n    const boundary = boundaries[index];\n    const isSpan = spanBoundary[0] <= boundary[0] && boundary[1] <= spanBoundary[1];\n    if (isSpan) {\n      const column = columns[boundary[0]];\n      const realColSpan = getColSpan(column);\n      const realColSpanEnd = (realColSpan + boundary[0]) - 1;\n      const colSpanEnd = boundaries.findIndex(\n        colSpanBoundary => colSpanBoundary[0]\n        <= realColSpanEnd && realColSpanEnd\n        <= colSpanBoundary[1],\n      );\n      collapsedColumns.push({\n        column,\n        colSpan: (colSpanEnd - index) + 1,\n      });\n      index += 1;\n    } else {\n      collapsedColumns.push({\n        column: {\n          key: `${STUB_TYPE}_${boundary[0]}_${boundary[1]}`,\n          type: STUB_TYPE,\n        },\n        colSpan: 1,\n      });\n      index += 1;\n    }\n  }\n  return collapsedColumns;\n};\n\nexport const getCollapsedGrid = ({\n  rows,\n  columns,\n  top,\n  height,\n  left,\n  width,\n  getColumnWidth = column => column.width,\n  getRowHeight = row => row.height,\n  getColSpan = () => 1,\n}) => {\n  if (!rows.length || !columns.length) {\n    return {\n      columns: [],\n      rows: [],\n    };\n  }\n  const rowsVisibleBoundary = getVisibleBoundary(rows, top, height, getRowHeight, 3);\n  const columnsVisibleBoundary = getVisibleBoundary(columns, left, width, getColumnWidth, 1);\n\n  const rowSpanBoundaries = rows\n    .slice(rowsVisibleBoundary[0], rowsVisibleBoundary[1])\n    .map(row => getSpanBoundary(\n      columns,\n      columnsVisibleBoundary,\n      column => getColSpan(row, column),\n    ));\n  const columnBoundaries = collapseBoundaries(\n    columns.length,\n    columnsVisibleBoundary,\n    rowSpanBoundaries,\n  );\n\n  const rowBoundaries = collapseBoundaries(rows.length, rowsVisibleBoundary, []);\n\n  return {\n    columns: getCollapsedColumns(\n      columns,\n      columnsVisibleBoundary,\n      columnBoundaries,\n      getColumnWidth,\n    ),\n    rows: getCollapsedRows(\n      rows,\n      rowsVisibleBoundary,\n      rowBoundaries,\n      getRowHeight,\n      row => getCollapsedCells(\n        columns,\n        getSpanBoundary(\n          columns,\n          columnsVisibleBoundary,\n          column => getColSpan(row, column),\n        ),\n        columnBoundaries,\n        column => getColSpan(row, column),\n      ),\n    ),\n  };\n};\n"],"names":["rowIdGetter","getRowId","rows","map","Map","row","rowIndex","get","defaultGetCellValue","columnName","cellValueGetter","getCellValue","columns","useFastAccessor","reduce","acc","column","name","changeColumnSorting","state","direction","keepOther","sortIndex","sorting","nextSorting","slice","Array","isArray","filter","indexOf","columnSorting","columnSortingIndex","findIndex","newColumnSorting","splice","newIndexFallback","length","newIndex","undefined","unique","Set","arr","getColumnSortingDirection","s","getPersistentSortedColumns","columnExtensions","sortingEnabled","sortItem","push","calculateKeepOther","persistentSortedColumns","item","merge","array","auxiliary","lo","mid","hi","compare","i","j","k","cmp","sortArrayToAuxiliary","Math","floor","sortAuxiliaryToArray","a","b","result","NODE_CHECK","Symbol","rowsToTree","getRowLevelKey","levels","children","forEach","levelKey","levelIndex","level","root","node","treeToRows","tree","defaultCompare","createCompare","getColumnCompare","getComparableValue","reverse","prevCompare","inverse","columnCompare","aRow","bRow","sortTree","sortedTree","mergeSort","sortHierarchicalRows","sortedRows","isGroupRow","groupedBy","value","changeColumnFilter","filters","config","filterIndex","f","nextState","getColumnFilterConfig","filterExpression","expression","selfFilterExpr","operator","operators","predicates","predicate","toLowerCase","String","operationPredicates","startsWith","endsWith","defaultFilterPredicate","operation","filterTree","filteredChildren","filterHierarchicalRows","getCollapsedRows","collapsedRowsMeta","filteredTree","isNode","collapsedRows","filteredCollapsedRows","buildPredicate","initialFilterExpression","getColumnPredicate","getSimplePredicate","customPredicate","getOperatorPredicate","build","getPredicate","filteredRows","Object","keys","filteredCollapsedRowsGetter","unwrappedFilteredRows","GROUP_KEY_SEPARATOR","applyColumnGrouping","grouping","groupIndex","nextGrouping","groupingIndex","g","targetIndex","changeColumnGrouping","expandedGroups","ungroupedColumnIndex","group","index","filteredExpandedGroups","split","toggleExpandedGroups","groupKey","groupKeyIndex","draftColumnGrouping","draftGrouping","cancelColumnGroupingDraft","adjustSortIndex","max","columnGrouping","GRID_GROUP_TYPE","GRID_GROUP_CHECK","GRID_GROUP_LEVEL_KEY","GRID_GROUP_COLLAPSED_ROWS","groupRowChecker","groupRowLevelKeyGetter","defaultColumnCriteria","groupedRows","getColumnCriteria","keyPrefix","groupCriteria","groups","key","sameKeyItems","set","nestedGrouping","values","items","compoundKey","expandedGroupRows","groupingColumnNames","expandedGroupsSet","currentGroupExpanded","currentGroupLevel","groupLevel","has","groupCollapsedRowsGetter","customGroupedRows","currentRows","getChildGroups","rootRows","childRows","customGroupingRowIdGetter","firstRow","find","groupingPanelItems","c","some","setCurrentPage","prevPage","page","setPageSize","prevPageSize","size","clamp","min","PAGE_HEADERS_OVERFLOW_ERROR","paginatedRows","pageSize","rowsWithPageHeaders","headerRows","currentIndex","headerIndex","headerRow","Error","indexInPage","rowCount","pageCount","count","ceil","currentPage","totalCount","totalPages","adjustedCurrentPage","firstRowOnPage","lastRowOnPage","totalRowCount","calculateStartPage","maxButtonCount","totalPageCount","toggle","source","itemsSet","sourceState","availableSelection","sourceSet","toggleSelection","selection","rowIds","rowsWithAvailableToSelect","dataRows","availableToSelect","someSelected","selectionSet","elem","allSelected","unwrapSelectedRows","startEditRows","prevEditingRowIds","stopEditRows","rowIdSet","id","addRow","addedRows","changeAddedRow","rowId","change","cancelAddedRows","indexSet","changeRow","prevRowChanges","prevChange","cancelChanges","deleteRows","deletedRowIds","cancelDeletedRows","changedRowsByIds","changes","addedRowsByIds","defaultCreateRowChange","createRowChangeGetter","createRowChange","columnExtension","getRowChange","rowChanges","TABLE_REORDERING_TYPE","changeColumnOrder","order","sourceColumnName","targetColumnName","sourceColumnIndex","targetColumnIndex","newOrder","TABLE_DATA_TYPE","TABLE_NODATA_TYPE","orderedColumns","tableColumns","type","aPos","bPos","tableHeaderRowsWithReordering","tableHeaderRows","draftOrder","sourceColumn","UNSET_COLUMN_WIDTH_ERROR","join","specifyWidths","widths","onAbsence","tableColumn","el","width","tableColumnsWithWidths","columnWidths","replace","tableColumnsWithDraftWidths","draftColumnWidths","changeTableColumnWidth","shift","minColumnWidth","nextColumnWidth","updatedColumn","draftTableColumnWidth","cancelTableColumnWidthDraft","TABLE_EDIT_COMMAND_TYPE","TABLE_ADDED_TYPE","TABLE_EDIT_TYPE","TABLE_HEADING_TYPE","isHeadingEditCommandsTableCell","tableRow","isEditCommandsTableCell","tableColumnsWithEditing","isEditTableCell","isAddedTableRow","isEditTableRow","tableRowsWithEditing","tableRows","editingRowIds","rowHeight","editedTableRows","addedTableRows","TABLE_FILTER_TYPE","DEFAULT_FILTER_OPERATIONS","isFilterTableCell","isFilterTableRow","getColumnFilterOperations","getAvailableFilterOperations","isFilterValueEmpty","tableHeaderRowsWithFilter","height","TABLE_GROUP_TYPE","isGroupTableCell","isGroupIndentTableCell","rowGroupIndex","columnGroupIndex","isGroupTableRow","tableColumnsWithDraftGrouping","showColumnWhenGrouped","columnGroupingExists","columnDraftGroupingExists","tableColumnsWithGrouping","indentColumnWidth","groupedColumn","tableRowsWithGrouping","tableGroupCellColSpanGetter","params","getTableCellColSpan","isHeadingTableCell","isHeadingTableRow","tableRowsWithHeading","TABLE_BAND_TYPE","BAND_GROUP_CELL","BAND_HEADER_CELL","BAND_EMPTY_CELL","BAND_DUPLICATE_RENDER","isBandedTableRow","isBandedOrHeaderRow","getColumnMeta","bands","tableRowLevel","title","getColSpan","currentColumnIndex","columnBands","currentRowLevel","currentColumnTitle","isOneChain","columnMeta","getBandComponent","rowSpan","payload","maxLevel","currentColumnMeta","prevColumnMeta","tableRowsWithBands","tableDataColumns","getMaxNestedLevel","isDataColumn","dataColumn","tableBandHeaders","from","toggleDetailRowExpanded","prevExpanded","TABLE_DETAIL_TYPE","isDetailRowExpanded","expandedDetailRowIds","isDetailToggleTableCell","isDetailTableRow","isDetailTableCell","tableRowsWithExpandedDetail","expandedRowId","insertIndex","tableColumnsWithDetail","toggleColumnWidth","tableDetailCellColSpanGetter","TABLE_SELECT_TYPE","isSelectTableCell","isSelectAllTableCell","tableColumnsWithSelection","selectionColumnWidth","isDataTableCell","isHeaderStubTableCell","isDataTableRow","isNoDataTableRow","isNoDataTableCell","getColumnExtension","extension","getColumnExtensionValueGetter","extensionName","defaultValue","extensionValue","tableColumnsWithDataRows","align","wordWrapEnabled","tableRowsWithDataRows","tableCellColSpanGetter","visibleTableColumns","hiddenColumnNames","tableDataColumnsExist","columnChooserItems","toggleColumn","hiddenColumn","toggleRowExpanded","GRID_TREE_NODE_TYPE","customTreeRows","currentRow","getChildRows","treeMeta","empty","nestedResult","leaf","customTreeRowsWithMeta","customTreeRowIdGetter","firstNestedRowIndex","customTreeRowLevelKeyGetter","rowMeta","expandedTreeRows","expandedRowIds","expandedRowIdsSet","currentExpanded","currentLevel","lastRow","collapsedItems","collapsedTreeRowsGetter","isTreeRowLeafGetter","getTreeRowLevelGetter","unwrappedCustomTreeRows","isTreeTableCell","forColumnName","changeSearchValue","prevSearchValue","searchValue","searchFilterExpression","selfFilterExpression","getAvailableFilterOperationsGetter","availableFilterOperations","columnNames","defaultSummaryCalculators","getValue","Infinity","defaultSummaryCalculator","summaryCalculator","rowsSummary","summaryItems","calculator","totalSummaryValues","plainRows","groupSummaryValues","summaries","treeSummaryValues","TABLE_TOTAL_SUMMARY_TYPE","TABLE_GROUP_SUMMARY_TYPE","TABLE_TREE_SUMMARY_TYPE","tableRowsWithTotalSummaries","footerRows","tableRowsWithSummaries","closeLevel","opened","isTotalSummaryTableCell","isGroupSummaryTableCell","isTreeSummaryTableCell","isTotalSummaryTableRow","isGroupSummaryTableRow","isTreeSummaryTableRow","getColumnSummaries","summaryValues","getTargetColumnGeometries","columnGeometries","sourceIndex","sourceWidth","right","left","getWidthDifference","top","bottom","leftBorder","rightBorder","getTableColumnGeometries","tableWidth","freeSpace","restrictedSpace","accum","freeSpacePortions","freeSpacePortion","lastRightPosition","getTableTargetColumnIndex","offset","ANIMATION_DURATION","getAnimationProgress","Date","getTime","animation","startTime","getAnimations","prevColumns","nextColumns","prevAnimations","resizing","prevColumnGeometries","geometry","progress","easeOutCubic","to","nextColumnGeometries","prev","next","style","takePrevColumnIntoAccount","abs","filterActiveAnimations","animations","entries","evalAnimations","transform","isOnTheSameLine","y","rectToObject","collapseGapsBetweenItems","geometries","getGroupCellTargetIndex","x","targetGeometries","inVerticalBounds","inHorizontalBounds","shouldGoFirst","shouldGoOnLineBreak","processPattern","pattern","msg","getMessagesFormatter","message","messages","STUB_TYPE","getVisibleBoundary","viewportStart","viewportSize","getItemSize","overscan","start","end","viewportEnd","beforePosition","afterPosition","isVisible","getSpanBoundary","visibleBoundary","getItemSpan","span","collapseBoundaries","itemsCount","spanBoundaries","beforePoints","afterPoints","boundary","add","boundaries","lastBeforePoint","sort","point","lastAfterPoint","getColumnsSize","startIndex","endIndex","getColumnSize","loopEndIndex","getCollapsedColumns","getColumnWidth","collapsedColumns","getRowHeight","getCells","getCollapsedCells","spanBoundary","isSpan","realColSpan","realColSpanEnd","colSpanEnd","colSpanBoundary","getCollapsedGrid","rowsVisibleBoundary","columnsVisibleBoundary","rowSpanBoundaries","columnBoundaries","rowBoundaries"],"mappings":"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"}