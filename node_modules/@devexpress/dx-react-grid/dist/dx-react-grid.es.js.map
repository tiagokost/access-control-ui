{"version":3,"file":"dx-react-grid.es.js","sources":["../src/plugins/grid-core.jsx","../src/grid.jsx","../src/plugins/column-chooser.jsx","../src/plugins/filtering-state.jsx","../src/plugins/integrated-filtering.jsx","../src/plugins/editing-state.jsx","../src/plugins/paging-state.jsx","../src/plugins/integrated-paging.jsx","../src/plugins/custom-paging.jsx","../src/plugins/grouping-state.jsx","../src/plugins/integrated-grouping.jsx","../src/plugins/custom-grouping.jsx","../src/plugins/selection-state.jsx","../src/plugins/integrated-selection.jsx","../src/plugins/sorting-state.jsx","../src/plugins/integrated-sorting.jsx","../src/plugins/drag-drop-provider.jsx","../src/plugins/table-column-reordering.jsx","../src/plugins/table.jsx","../src/plugins/table-selection.jsx","../src/plugins/row-detail-state.jsx","../src/plugins/table-row-detail.jsx","../src/plugins/table-group-row.jsx","../src/plugins/table-header-row.jsx","../src/plugins/table-band-header.jsx","../src/plugins/table-filter-row.jsx","../src/plugins/table-edit-row.jsx","../src/plugins/table-edit-column.jsx","../src/plugins/table-column-resizing.jsx","../src/plugins/paging-panel.jsx","../src/plugins/grouping-panel.jsx","../src/plugins/data-type-provider.jsx","../src/plugins/table-column-visibility.jsx","../src/plugins/toolbar.jsx","../src/plugins/tree-data-state.jsx","../src/plugins/custom-tree-data.jsx","../src/plugins/table-tree-column.jsx","../src/plugins/search-state.jsx","../src/plugins/search-panel.jsx","../src/plugins/summary-state.jsx","../src/plugins/integrated-summary.jsx","../src/plugins/custom-summary.jsx","../src/plugins/table-summary-row.jsx","../src/components/table-layout.jsx","../src/components/table-layout/column-group.jsx","../src/components/table-layout/virtual-table-layout.jsx","../src/components/table-layout/row-layout.jsx","../src/components/table-layout/rows-block-layout.jsx","../src/components/table-layout/static-table-layout.jsx","../src/components/group-panel-layout/item-layout.jsx","../src/components/group-panel-layout.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\n\nexport class GridCore extends React.PureComponent {\n  render() {\n    const {\n      rows,\n      columns,\n      getRowId,\n      getCellValue,\n      rootComponent: Root,\n      ...restProps\n    } = this.props;\n\n    return (\n      <Plugin>\n        <Getter name=\"rows\" value={rows} />\n        <Getter name=\"getRowId\" value={rowIdGetter(getRowId, rows)} />\n        <Getter name=\"columns\" value={columns} />\n        <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue, columns)} />\n        <Template name=\"root\">\n          <Root {...restProps}>\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nGridCore.propTypes = {\n  rows: PropTypes.array.isRequired,\n  getRowId: PropTypes.func,\n  getCellValue: PropTypes.func,\n  columns: PropTypes.array.isRequired,\n  rootComponent: PropTypes.func.isRequired,\n};\n\nGridCore.defaultProps = {\n  getRowId: undefined,\n  getCellValue: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { GridCore } from './plugins/grid-core';\n\nexport const Grid = ({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n  rootComponent,\n  children,\n  ...restProps\n}) => (\n  <PluginHost>\n    <GridCore\n      rows={rows}\n      columns={columns}\n      getRowId={getRowId}\n      getCellValue={getCellValue}\n      rootComponent={rootComponent}\n      {...restProps}\n    />\n    {children}\n  </PluginHost>\n);\n\nGrid.propTypes = {\n  rows: PropTypes.array.isRequired,\n  getRowId: PropTypes.func,\n  getCellValue: PropTypes.func,\n  columns: PropTypes.array.isRequired,\n  rootComponent: PropTypes.func.isRequired,\n  children: PropTypes.node,\n};\n\nGrid.defaultProps = {\n  getRowId: undefined,\n  getCellValue: undefined,\n  children: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter, columnChooserItems } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'TableColumnVisibility' },\n  { name: 'Toolbar' },\n];\nexport class ColumnChooser extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n    this.setButtonRef = this.setButtonRef.bind(this);\n  }\n\n  setButtonRef(button) {\n    this.button = button;\n  }\n\n  handleToggle() {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n    const { visible } = this.state;\n\n    return (\n      <Plugin\n        name=\"ColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {(\n              { columns, hiddenColumnNames, isColumnTogglingEnabled },\n              { toggleColumnVisibility },\n            ) => (\n              <React.Fragment>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                  active={visible}\n                />\n                <Overlay\n                  visible={visible}\n                  target={this.button}\n                  onHide={this.handleHide}\n                >\n                  <Container>\n                    {columnChooserItems(columns, hiddenColumnNames)\n                      .map((item) => {\n                        const { name: columnName } = item.column;\n                        const togglingEnabled = isColumnTogglingEnabled(columnName);\n                        return (\n                          <Item\n                            key={columnName}\n                            item={item}\n                            disabled={!togglingEnabled}\n                            onToggle={() => toggleColumnVisibility(columnName)}\n                          />\n                        );\n                      })}\n                  </Container>\n                </Overlay>\n              </React.Fragment>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nColumnChooser.propTypes = {\n  overlayComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  itemComponent: PropTypes.func.isRequired,\n  toggleButtonComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nColumnChooser.defaultProps = {\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue },\n) => filterExpression(filters, filterExpressionValue);\n\nexport class FilteringState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onFiltersChange } = this.props;\n\n    this.state = {\n      filters: props.filters || props.defaultFilters,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        filters: () => onFiltersChange,\n      },\n    );\n\n    this.changeColumnFilter = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'filters', changeColumnFilter);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      filters = prevState.filters,\n    } = nextProps;\n\n    return {\n      filters,\n    };\n  }\n\n  render() {\n    const { filters } = this.state;\n    const { columnExtensions, columnFilteringEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"FilteringState\"\n      >\n        <Getter name=\"filters\" value={filters} />\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </Plugin>\n    );\n  }\n}\n\nFilteringState.propTypes = {\n  filters: PropTypes.array,\n  defaultFilters: PropTypes.array,\n  onFiltersChange: PropTypes.func,\n  columnExtensions: PropTypes.array,\n  columnFilteringEnabled: PropTypes.bool,\n};\n\nFilteringState.defaultProps = {\n  filters: undefined,\n  defaultFilters: [],\n  onFiltersChange: undefined,\n  columnExtensions: undefined,\n  columnFilteringEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  filteredRows,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  getColumnExtension,\n  defaultFilterPredicate,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'FilteringState', optional: true },\n  { name: 'SearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }) => unwrappedFilteredRows(rows);\n\nexport class IntegratedFiltering extends React.PureComponent {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnPredicate = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={unwrappedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedFiltering.defaultPredicate = defaultFilterPredicate;\n\nIntegratedFiltering.propTypes = {\n  columnExtensions: PropTypes.array,\n};\n\nIntegratedFiltering.defaultProps = {\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nexport class EditingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const rowChanges = props.rowChanges || props.defaultRowChanges;\n    const addedRows = props.addedRows || props.defaultAddedRows;\n    const getRowChanges = () => {\n      const { rowChanges: stateRowChanges } = this.state;\n      return stateRowChanges;\n    };\n    const getAddedRows = () => {\n      const { addedRows: stateAddedRows } = this.state;\n      return stateAddedRows;\n    };\n\n    this.state = {\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      addedRows,\n      rowChanges,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n    };\n\n    const {\n      onEditingRowIdsChange, onAddedRowsChange, onRowChangesChange,\n      onDeletedRowIdsChange, onCommitChanges,\n    } = this.props;\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        editingRowIds: () => onEditingRowIdsChange,\n        addedRows: () => onAddedRowsChange,\n        rowChanges: () => onRowChangesChange,\n        deletedRowIds: () => onDeletedRowIdsChange,\n      },\n    );\n\n    this.startEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', startEditRows);\n    this.stopEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', stopEditRows);\n\n    this.changeRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', changeRow);\n    this.cancelChangedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', cancelChanges);\n    this.commitChangedRows = ({ rowIds }) => {\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds),\n      });\n      this.cancelChangedRows({ rowIds });\n    };\n\n    this.addRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', addRow);\n    this.changeAddedRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', changeAddedRow);\n    this.cancelAddedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', cancelAddedRows);\n    this.commitAddedRows = ({ rowIds }) => {\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds),\n      });\n      this.cancelAddedRows({ rowIds });\n    };\n\n    this.deleteRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', deleteRows);\n    this.cancelDeletedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    this.commitDeletedRows = ({ rowIds }) => {\n      onCommitChanges({ deleted: rowIds });\n      this.cancelDeletedRows({ rowIds });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingRowIds = prevState.editingRowIds,\n      rowChanges = prevState.rowChanges,\n      addedRows = prevState.addedRows,\n      deletedRowIds = prevState.deletedRowIds,\n    } = nextProps;\n\n    return {\n      editingRowIds,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    };\n  }\n\n  render() {\n    const { createRowChange, columnExtensions, columnEditingEnabled } = this.props;\n    const {\n      editingRowIds, rowChanges, addedRows, deletedRowIds,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <Getter name=\"editingRowIds\" value={editingRowIds} />\n        <Action name=\"startEditRows\" action={this.startEditRows} />\n        <Action name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <Getter name=\"rowChanges\" value={rowChanges} />\n        <Action name=\"changeRow\" action={this.changeRow} />\n        <Action name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <Action name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <Getter name=\"addedRows\" value={addedRows} />\n        <Action name=\"addRow\" action={this.addRow} />\n        <Action name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <Action name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <Action name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <Getter name=\"deletedRowIds\" value={deletedRowIds} />\n        <Action name=\"deleteRows\" action={this.deleteRows} />\n        <Action name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <Action name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <Getter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </Plugin>\n    );\n  }\n}\n\nEditingState.propTypes = {\n  createRowChange: PropTypes.func,\n  columnEditingEnabled: PropTypes.bool,\n  columnExtensions: PropTypes.array,\n\n  editingRowIds: PropTypes.array,\n  defaultEditingRowIds: PropTypes.array,\n  onEditingRowIdsChange: PropTypes.func,\n\n  addedRows: PropTypes.array,\n  defaultAddedRows: PropTypes.array,\n  onAddedRowsChange: PropTypes.func,\n\n  rowChanges: PropTypes.object,\n  defaultRowChanges: PropTypes.object,\n  onRowChangesChange: PropTypes.func,\n\n  deletedRowIds: PropTypes.array,\n  defaultDeletedRowIds: PropTypes.array,\n  onDeletedRowIdsChange: PropTypes.func,\n\n  onCommitChanges: PropTypes.func.isRequired,\n};\n\nEditingState.defaultProps = {\n  createRowChange: undefined,\n  columnEditingEnabled: true,\n  columnExtensions: undefined,\n\n  editingRowIds: undefined,\n  defaultEditingRowIds: [],\n  onEditingRowIdsChange: undefined,\n\n  rowChanges: undefined,\n  defaultRowChanges: {},\n  onRowChangesChange: undefined,\n\n  addedRows: undefined,\n  defaultAddedRows: [],\n  onAddedRowsChange: undefined,\n\n  deletedRowIds: undefined,\n  defaultDeletedRowIds: [],\n  onDeletedRowIdsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\n\nexport class PagingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onCurrentPageChange, onPageSizeChange } = this.props;\n\n    this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        currentPage: () => onCurrentPageChange,\n        pageSize: () => onPageSizeChange,\n      },\n    );\n\n    this.setCurrentPage = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentPage', setCurrentPage);\n    this.setPageSize = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'pageSize', setPageSize);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentPage = prevState.currentPage,\n      pageSize = prevState.pageSize,\n    } = nextProps;\n\n    return {\n      currentPage,\n      pageSize,\n    };\n  }\n\n  render() {\n    const { pageSize, currentPage } = this.state;\n\n    return (\n      <Plugin\n        name=\"PagingState\"\n      >\n        <Getter name=\"currentPage\" value={currentPage} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Action name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <Action name=\"setPageSize\" action={this.setPageSize} />\n      </Plugin>\n    );\n  }\n}\n\nPagingState.propTypes = {\n  pageSize: PropTypes.number,\n  defaultPageSize: PropTypes.number,\n  onPageSizeChange: PropTypes.func,\n  currentPage: PropTypes.number,\n  defaultCurrentPage: PropTypes.number,\n  onCurrentPageChange: PropTypes.func,\n};\n\nPagingState.defaultProps = {\n  pageSize: undefined,\n  defaultPageSize: 10,\n  onPageSizeChange: undefined,\n  currentPage: undefined,\n  defaultCurrentPage: 0,\n  onCurrentPageChange: undefined,\n};\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey },\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page },\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }, { setCurrentPage },\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class IntegratedPaging extends React.PureComponent {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <Getter name=\"totalCount\" computed={totalCountComputed} />\n        <Getter name=\"currentPage\" computed={currentPageComputed} />\n        <Getter name=\"rows\" computed={paginatedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nexport class CustomPaging extends React.PureComponent {\n  render() {\n    const { totalCount } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalCount\" value={totalCount} />\n      </Plugin>\n    );\n  }\n}\n\nCustomPaging.propTypes = {\n  totalCount: PropTypes.number,\n};\n\nCustomPaging.defaultProps = {\n  totalCount: 0,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  draftColumnGrouping,\n  cancelColumnGroupingDraft,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n} from '@devexpress/dx-grid-core';\n\nconst dependencies = [\n  { name: 'SortingState', optional: true },\n];\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nexport class GroupingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onGroupingChange, onExpandedGroupsChange } = this.props;\n\n    this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        grouping: () => onGroupingChange,\n        expandedGroups: () => onExpandedGroupsChange,\n      },\n    );\n\n    this.changeColumnGrouping = this.changeColumnGrouping.bind(this);\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n    this.draftColumnGrouping = this.stateHelper.applyReducer\n      .bind(this.stateHelper, draftColumnGrouping);\n    this.cancelColumnGroupingDraft = this.stateHelper.applyReducer\n      .bind(this.stateHelper, cancelColumnGroupingDraft);\n    this.changeColumnSorting = this.changeColumnSorting.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return {\n      grouping,\n      expandedGroups,\n    };\n  }\n\n  changeColumnSorting(\n    { columnName, keepOther, ...restParams },\n    { sorting },\n    { changeColumnSorting },\n  ) {\n    const { grouping } = this.state;\n    const groupingIndex = grouping\n      .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n    if (groupingIndex === -1) {\n      changeColumnSorting({\n        columnName,\n        keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n        ...restParams,\n      });\n      return false;\n    }\n\n    const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting({\n      columnName,\n      keepOther: true,\n      sortIndex,\n      ...restParams,\n    });\n    return false;\n  }\n\n  changeColumnGrouping({ columnName, groupIndex }, getters, actions) {\n    this.stateHelper.applyReducer(\n      changeColumnGrouping,\n      { columnName, groupIndex },\n      (nextState, state) => {\n        const { grouping } = nextState;\n        const { grouping: prevGrouping } = state;\n        const { sorting } = getters;\n        const { changeColumnSorting } = actions;\n\n        if (!sorting) return;\n\n        const columnSortingIndex = sorting\n          .findIndex(columnSorting => columnSorting.columnName === columnName);\n        const prevGroupingIndex = prevGrouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n        const groupingIndex = grouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n        if (columnSortingIndex === -1\n          || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n        const sortIndex = adjustSortIndex(\n          groupingIndex === -1 ? grouping.length : groupingIndex,\n          grouping,\n          sorting,\n        );\n\n        if (columnSortingIndex === sortIndex) return;\n\n        changeColumnSorting({\n          keepOther: true,\n          sortIndex,\n          ...sorting[columnSortingIndex],\n        });\n      },\n    );\n  }\n\n  render() {\n    const { grouping, draftGrouping, expandedGroups } = this.state;\n    const { columnExtensions, columnGroupingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingState\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"draftGrouping\" value={draftGrouping || grouping} />\n        <Getter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <Action name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <Action name=\"draftColumnGrouping\" action={this.draftColumnGrouping} />\n        <Action name=\"cancelColumnGroupingDraft\" action={this.cancelColumnGroupingDraft} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\nGroupingState.propTypes = {\n  grouping: PropTypes.array,\n  defaultGrouping: PropTypes.array,\n  onGroupingChange: PropTypes.func,\n  expandedGroups: PropTypes.array,\n  defaultExpandedGroups: PropTypes.array,\n  onExpandedGroupsChange: PropTypes.func,\n  columnExtensions: PropTypes.array,\n  columnGroupingEnabled: PropTypes.bool,\n};\n\nGroupingState.defaultProps = {\n  grouping: undefined,\n  defaultGrouping: [],\n  onGroupingChange: undefined,\n  expandedGroups: undefined,\n  defaultExpandedGroups: [],\n  onExpandedGroupsChange: undefined,\n  columnExtensions: undefined,\n  columnGroupingEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows },\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups },\n) => expandedGroupRows(rows, grouping, expandedGroups);\n\nexport class IntegratedGrouping extends React.PureComponent {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCriteria = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue },\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <Plugin\n        name=\"IntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedGrouping.propTypes = {\n  columnExtensions: PropTypes.array,\n};\n\nIntegratedGrouping.defaultProps = {\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows },\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups },\n) => expandedGroupRows(rows, grouping, expandedGroups);\nconst getRowIdComputed = ({ getRowId, rows }) => customGroupingRowIdGetter(getRowId, rows);\n\nexport class CustomGrouping extends React.PureComponent {\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this.props;\n    const groupedRowsComputed = (\n      { rows, grouping },\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n\n    return (\n      <Plugin\n        name=\"CustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        {appliedGrouping && (\n          <Getter name=\"grouping\" value={appliedGrouping} />\n        )}\n        {appliedExpandedGroups && (\n          <Getter name=\"expandedGroups\" value={appliedExpandedGroups} />\n        )}\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nCustomGrouping.propTypes = {\n  getChildGroups: PropTypes.func.isRequired,\n  grouping: PropTypes.array,\n  expandedGroups: PropTypes.array,\n};\n\nCustomGrouping.defaultProps = {\n  grouping: undefined,\n  expandedGroups: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\n\nexport class SelectionState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onSelectionChange } = this.props;\n\n    this.state = {\n      selection: props.selection || props.defaultSelection,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        selection: () => onSelectionChange,\n      },\n    );\n\n    this.toggleSelection = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'selection', toggleSelection);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      selection = prevState.selection,\n    } = nextProps;\n\n    return {\n      selection,\n    };\n  }\n\n  render() {\n    const { selection } = this.state;\n\n    return (\n      <Plugin\n        name=\"SelectionState\"\n      >\n        <Getter name=\"selection\" value={selection} />\n        <Action name=\"toggleSelection\" action={this.toggleSelection} />\n      </Plugin>\n    );\n  }\n}\n\nSelectionState.propTypes = {\n  selection: PropTypes.array,\n  defaultSelection: PropTypes.array,\n  onSelectionChange: PropTypes.func,\n};\n\nSelectionState.defaultProps = {\n  selection: undefined,\n  defaultSelection: [],\n  onSelectionChange: undefined,\n};\n","import * as React from 'react';\nimport { Getter, Action, Plugin } from '@devexpress/dx-react-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow },\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }) => someSelected(rows, selection);\nconst selectAllAvailableComputed = ({ rows: { availableToSelect } }) => !!availableToSelect.length;\nconst toggleSelectAll = (state, { rows: { availableToSelect } }, { toggleSelection }) => {\n  toggleSelection({ rowIds: availableToSelect, state });\n};\nconst unwrapRowsComputed = ({ rows }) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'SelectionState' },\n];\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class IntegratedSelection extends React.PureComponent {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <Getter name=\"allSelected\" computed={allSelectedComputed} />\n        <Getter name=\"someSelected\" computed={someSelectedComputed} />\n        <Getter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <Action name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <Getter name=\"rows\" computed={unwrapRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n\nexport class SortingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const sorting = props.sorting || props.defaultSorting;\n    const { onSortingChange } = props;\n\n    this.state = {\n      sorting,\n    };\n\n    const persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        sorting: () => onSortingChange,\n      },\n    );\n\n    this.changeColumnSorting = stateHelper.applyReducer\n      .bind(stateHelper, (prevState, payload) => {\n        const keepOther = calculateKeepOther(\n          prevState.sorting, payload.keepOther, persistentSortedColumns,\n        );\n        return changeColumnSorting(prevState, { ...payload, keepOther });\n      });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sorting = prevState.sorting,\n    } = nextProps;\n\n    return {\n      sorting,\n    };\n  }\n\n  render() {\n    const { sorting } = this.state;\n    const { columnExtensions, columnSortingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"SortingState\"\n      >\n        <Getter name=\"sorting\" value={sorting} />\n        <Getter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\nSortingState.propTypes = {\n  sorting: PropTypes.array,\n  defaultSorting: PropTypes.array,\n  onSortingChange: PropTypes.func,\n  columnExtensions: PropTypes.array,\n  columnSortingEnabled: PropTypes.bool,\n};\n\nSortingState.defaultProps = {\n  sorting: undefined,\n  defaultSorting: [],\n  onSortingChange: undefined,\n  columnExtensions: undefined,\n  columnSortingEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'SortingState' },\n];\n\nexport class IntegratedSorting extends React.PureComponent {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCompare = columnName => getColumnExtension(columnExtensions, columnName).compare;\n\n    const rowsComputed = ({\n      rows, sorting, getCellValue, isGroupRow, getRowLevelKey,\n    }) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <Plugin\n        name=\"IntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedSorting.propTypes = {\n  columnExtensions: PropTypes.array,\n};\n\nIntegratedSorting.defaultProps = {\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n  TemplateConnector,\n  DragDropProvider as DragDropProviderCore,\n} from '@devexpress/dx-react-core';\n\nconst getTargetColumns = (payload, columns) => payload\n  .filter(item => item.type === 'column')\n  .map(item => columns.find(column => column.name === item.columnName));\n\nexport class DragDropProvider extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      payload: null,\n      clientOffset: null,\n    };\n\n    this.change = ({ payload, clientOffset }) => this.setState({ payload, clientOffset });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      columnComponent: Column,\n    } = this.props;\n    const {\n      payload,\n      clientOffset,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n      >\n        <Getter name=\"draggingEnabled\" value />\n        <Template name=\"root\">\n          <DragDropProviderCore\n            onChange={this.change}\n          >\n            <TemplatePlaceholder />\n          </DragDropProviderCore>\n          {payload && (\n            <TemplateConnector>\n              {({ columns }) => (\n                <Container\n                  clientOffset={clientOffset}\n                >\n                  {getTargetColumns(payload, columns)\n                    .map(column => (\n                      <Column\n                        key={column.name}\n                        column={column}\n                      />\n                    ))\n                  }\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nDragDropProvider.propTypes = {\n  containerComponent: PropTypes.func.isRequired,\n  columnComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_DATA_TYPE,\n  TABLE_REORDERING_TYPE,\n  orderedColumns,\n  changeColumnOrder,\n  getTableTargetColumnIndex,\n  tableHeaderRowsWithReordering,\n  draftOrder as draftOrderComputed,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows },\n) => tableHeaderRowsWithReordering(tableHeaderRows);\n\nexport class TableColumnReordering extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    };\n\n    this.onOver = this.handleOver.bind(this);\n    this.onLeave = this.handleLeave.bind(this);\n    this.onDrop = this.handleDrop.bind(this);\n  }\n\n  getState() {\n    const { order: orderState } = this.state;\n    const {\n      order = orderState,\n    } = this.props;\n    return {\n      ...this.state,\n      order,\n    };\n  }\n\n  getDraftOrder() {\n    const { order, sourceColumnIndex, targetColumnIndex } = this.getState();\n    return draftOrderComputed(order, sourceColumnIndex, targetColumnIndex);\n  }\n\n  getAvailableColumns() {\n    return this.getDraftOrder()\n      .filter(columnName => !!this.cellDimensionGetters[columnName]);\n  }\n\n  cacheCellDimensions() {\n    this.cellDimensions = (this.cellDimensions && this.cellDimensions.length)\n      ? this.cellDimensions\n      : this.getAvailableColumns()\n        .map(columnName => this.cellDimensionGetters[columnName]());\n  }\n\n  resetCellDimensions() {\n    this.cellDimensions = [];\n  }\n\n  ensureCellDimensionGetters(tableColumns) {\n    Object.keys(this.cellDimensionGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column.name === columnName);\n        if (columnIndex === -1) {\n          delete this.cellDimensionGetters[columnName];\n        }\n      });\n  }\n\n  storeCellDimensionsGetter(tableColumn, getter, tableColumns) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  }\n\n  handleOver({ payload, clientOffset: { x } }) {\n    const sourceColumnName = payload[0].columnName;\n    const availableColumns = this.getAvailableColumns();\n    const relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n\n    if (relativeSourceColumnIndex === -1) return;\n\n    this.cacheCellDimensions();\n    const { cellDimensions } = this;\n\n    const overlappedColumns = cellDimensions\n      .filter(({ left, right }) => left <= x && x <= right);\n\n    if (overlappedColumns.length > 1) return;\n\n    const relativeTargetIndex = getTableTargetColumnIndex(\n      cellDimensions,\n      relativeSourceColumnIndex,\n      x,\n    );\n\n    if (relativeTargetIndex === -1) return;\n\n    const {\n      sourceColumnIndex: prevSourceColumnIndex,\n      targetColumnIndex: prevTargetColumnIndex,\n    } = this.getState();\n    const draftOrder = this.getDraftOrder();\n    const targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n\n    const sourceColumnIndex = prevSourceColumnIndex === -1\n      ? draftOrder.indexOf(sourceColumnName)\n      : prevSourceColumnIndex;\n\n    this.setState({\n      sourceColumnIndex,\n      targetColumnIndex,\n    });\n  }\n\n  handleLeave() {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    this.resetCellDimensions();\n  }\n\n  handleDrop() {\n    const { sourceColumnIndex, targetColumnIndex, order } = this.getState();\n    const { onOrderChange } = this.props;\n    const nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex],\n    });\n\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  }\n\n  render() {\n    const {\n      tableContainerComponent: Container,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    const columnsComputed = (\n      { tableColumns },\n    ) => orderedColumns(tableColumns, this.getDraftOrder());\n\n    this.cellDimensionGetters = {};\n\n    return (\n      <Plugin\n        name=\"TableColumnReordering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={columnsComputed} />\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template name=\"table\">\n          {params => (\n            <Container\n              {...params}\n              onOver={this.onOver}\n              onLeave={this.onLeave}\n              onDrop={this.onDrop}\n            >\n              <TemplatePlaceholder />\n            </Container>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <Row {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (\n                <Cell\n                  {...params}\n                  getCellDimensions={getter => this.storeCellDimensionsGetter(\n                    params.tableColumn, getter, tableColumns,\n                  )}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnReordering.propTypes = {\n  order: PropTypes.arrayOf(PropTypes.string),\n  defaultOrder: PropTypes.arrayOf(PropTypes.string),\n  onOrderChange: PropTypes.func,\n  tableContainerComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n};\n\nTableColumnReordering.defaultProps = {\n  order: undefined,\n  defaultOrder: [],\n  onOrderChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithDataRows,\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  isDataTableCell,\n  isHeaderStubTableCell,\n  isDataTableRow,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nconst RowPlaceholder = props => <TemplatePlaceholder name=\"tableRow\" params={props} />;\nconst CellPlaceholder = props => <TemplatePlaceholder name=\"tableCell\" params={props} />;\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = ({ rows, getRowId }) => tableRowsWithDataRows(rows, getRowId);\nconst tableFooterRows = [];\n\nconst pluginDependencies = [\n  { name: 'DataTypeProvider', optional: true },\n];\n\nexport class Table extends React.PureComponent {\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      messages,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n    const tableColumnsComputed = (\n      { columns },\n    ) => tableColumnsWithDataRows(columns, columnExtensions);\n\n    return (\n      <Plugin\n        name=\"Table\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" value={tableFooterRows} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n\n        <Template name=\"body\">\n          <TemplatePlaceholder name=\"table\" />\n        </Template>\n        <Template name=\"table\">\n          <TemplateConnector>\n            {({\n              tableHeaderRows: headerRows,\n              tableBodyRows: bodyRows,\n              tableFooterRows: footerRows,\n              tableColumns: columns,\n              getTableCellColSpan,\n            }) => (\n              <Layout\n                tableComponent={tableComponent}\n                headComponent={headComponent}\n                bodyComponent={bodyComponent}\n                footerComponent={footerComponent}\n                containerComponent={containerComponent}\n                headerRows={headerRows}\n                bodyRows={bodyRows}\n                footerRows={footerRows}\n                columns={columns}\n                rowComponent={RowPlaceholder}\n                cellComponent={CellPlaceholder}\n                getCellColSpan={getTableCellColSpan}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n        <Template name=\"tableCell\">\n          {params => (\n            <TemplateConnector>\n              {(\n                { tableHeaderRows: headerRows },\n              ) => (isHeaderStubTableCell(params.tableRow, headerRows)\n                ? <StubHeaderCell {...params} />\n                : <StubCell {...params} />\n              )\n              }\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ getCellValue }) => {\n                const columnName = params.tableColumn.column.name;\n                const value = getCellValue(params.tableRow.row, columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      row: params.tableRow.row,\n                      column: params.tableColumn.column,\n                      value,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isNoDataTableRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...params}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableRow\">\n          {params => (\n            <StubRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isDataTableRow(tableRow)}\n        >\n          {params => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isNoDataTableRow(tableRow)}\n        >\n          {params => <NoDataRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTable.propTypes = {\n  layoutComponent: PropTypes.func.isRequired,\n  tableComponent: PropTypes.func.isRequired,\n  headComponent: PropTypes.func.isRequired,\n  bodyComponent: PropTypes.func.isRequired,\n  footerComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  noDataCellComponent: PropTypes.func.isRequired,\n  noDataRowComponent: PropTypes.func.isRequired,\n  stubRowComponent: PropTypes.func.isRequired,\n  stubCellComponent: PropTypes.func.isRequired,\n  stubHeaderCellComponent: PropTypes.func.isRequired,\n  columnExtensions: PropTypes.array,\n  messages: PropTypes.object,\n};\n\nTable.defaultProps = {\n  columnExtensions: undefined,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n} from '@devexpress/dx-grid-core';\n\nexport class TableSelection extends React.PureComponent {\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns },\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth);\n\n    return (\n      <Plugin\n        name=\"TableSelection\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SelectionState' },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        {showSelectionColumn && (\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {params => (\n              <TemplateConnector>\n                {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                  <HeaderCell\n                    {...params}\n                    disabled={!selectAllAvailable}\n                    allSelected={allSelected}\n                    someSelected={someSelected}\n                    onToggle={select => toggleSelectAll(select)}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {showSelectionColumn && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {params => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                    selected={selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }) => isDataTableRow(tableRow)}\n          >\n            {params => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Row\n                    {...params}\n                    selectByRowClick={selectByRowClick}\n                    selected={highlightRow && selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\nTableSelection.propTypes = {\n  headerCellComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  highlightRow: PropTypes.bool,\n  selectByRowClick: PropTypes.bool,\n  showSelectAll: PropTypes.bool,\n  showSelectionColumn: PropTypes.bool,\n  selectionColumnWidth: PropTypes.number.isRequired,\n};\n\nTableSelection.defaultProps = {\n  highlightRow: false,\n  selectByRowClick: false,\n  showSelectAll: false,\n  showSelectionColumn: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { toggleDetailRowExpanded } from '@devexpress/dx-grid-core';\n\nexport class RowDetailState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onExpandedRowIdsChange } = this.props;\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => onExpandedRowIdsChange,\n      },\n    );\n\n    this.toggleDetailRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"RowDetailState\"\n      >\n        <Getter name=\"expandedDetailRowIds\" value={expandedRowIds} />\n        <Action name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\nRowDetailState.propTypes = {\n  expandedRowIds: PropTypes.array,\n  defaultExpandedRowIds: PropTypes.array,\n  onExpandedRowIdsChange: PropTypes.func,\n};\n\nRowDetailState.defaultProps = {\n  expandedRowIds: undefined,\n  defaultExpandedRowIds: [],\n  onExpandedRowIdsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n} from '@devexpress/dx-grid-core';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan },\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'RowDetailState' },\n  { name: 'Table' },\n];\n\nexport class TableRowDetail extends React.PureComponent {\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns },\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds },\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ expandedDetailRowIds }, { toggleDetailRowExpanded }) => (\n                <ToggleCell\n                  {...params}\n                  row={params.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: params.tableRow.rowId })}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isDetailTableRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isDetailTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...params}\n                      row={params.tableRow.row}\n                    >\n                      <Content row={params.tableRow.row} />\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isDetailTableRow(tableRow)}\n        >\n          {params => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableRowDetail.propTypes = {\n  contentComponent: PropTypes.func,\n  toggleCellComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  toggleColumnWidth: PropTypes.number.isRequired,\n  rowHeight: PropTypes.number,\n};\n\nTableRowDetail.defaultProps = {\n  contentComponent: () => null,\n  rowHeight: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplatePlaceholder, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithGrouping,\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupTableCell,\n  isGroupIndentTableCell,\n  isGroupTableRow,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow },\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan },\n) => tableGroupCellColSpanGetter(getTableCellColSpan);\n\nconst showColumnWhenGroupedGetter = (showColumnsWhenGrouped, columnExtensions = []) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\nexport class TableGroupRow extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: GroupCell,\n      rowComponent: GroupRow,\n      indentCellComponent: GroupIndentCell,\n      indentColumnWidth,\n      showColumnsWhenGrouped,\n      columnExtensions,\n    } = this.props;\n\n    const tableColumnsComputed = ({\n      columns, tableColumns, grouping, draftGrouping,\n    }) => tableColumnsWithGrouping(\n      columns,\n      tableColumns,\n      grouping,\n      draftGrouping,\n      indentColumnWidth,\n      showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions),\n    );\n\n    return (\n      <Plugin\n        name=\"TableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isGroupTableRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ grouping, expandedGroups }, { toggleGroupExpanded }) => {\n                if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n                  return (\n                    <TemplatePlaceholder\n                      name=\"valueFormatter\"\n                      params={{\n                        column: params.tableColumn.column,\n                        value: params.tableRow.row.value,\n                      }}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...params}\n                          row={params.tableRow.row}\n                          column={params.tableColumn.column}\n                          expanded={expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1}\n                          onToggle={\n                            () => toggleGroupExpanded({ groupKey: params.tableRow.row.compoundKey })\n                          }\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </TemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column}\n                      />\n                    );\n                  }\n                  return <TemplatePlaceholder />;\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isGroupTableRow(tableRow)}\n        >\n          {params => (\n            <GroupRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableGroupRow.propTypes = {\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  indentCellComponent: PropTypes.func,\n  indentColumnWidth: PropTypes.number.isRequired,\n  showColumnsWhenGrouped: PropTypes.bool,\n  columnExtensions: PropTypes.array,\n};\n\nTableGroupRow.defaultProps = {\n  indentCellComponent: null,\n  showColumnsWhenGrouped: false,\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  getColumnSortingDirection,\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  getMessagesFormatter,\n  TABLE_DATA_TYPE,\n} from '@devexpress/dx-grid-core';\n\nconst tableHeaderRowsComputed = ({ tableHeaderRows }) => tableRowsWithHeading(tableHeaderRows);\n\nexport class TableHeaderRow extends React.PureComponent {\n  render() {\n    const {\n      showSortingControls,\n      showGroupingControls,\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <Plugin\n        name=\"TableHeaderRow\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SortingState', optional: !showSortingControls },\n          { name: 'GroupingState', optional: !showGroupingControls },\n          { name: 'DragDropProvider', optional: true },\n          { name: 'TableColumnResizing', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                sorting, tableColumns, draggingEnabled, tableColumnResizingEnabled,\n                isColumnSortingEnabled, isColumnGroupingEnabled,\n              }, {\n                changeColumnSorting, changeColumnGrouping,\n                changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft,\n              }) => {\n                const { name: columnName } = params.tableColumn.column;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled\n                  && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName)\n                  && atLeastOneDataColumn;\n\n                return (\n                  <HeaderCell\n                    {...params}\n                    column={params.tableColumn.column}\n                    getMessage={getMessage}\n                    sortingEnabled={sortingEnabled}\n                    groupingEnabled={groupingEnabled}\n                    showSortingControls={showSortingControls}\n                    showGroupingControls={showGroupingControls}\n                    draggingEnabled={draggingEnabled && atLeastOneDataColumn}\n                    resizingEnabled={tableColumnResizingEnabled}\n                    sortingDirection={showSortingControls && sorting !== undefined\n                      ? getColumnSortingDirection(sorting, columnName) : undefined}\n                    onSort={(\n                      { direction, keepOther },\n                    ) => changeColumnSorting({ columnName, direction, keepOther })}\n                    onGroup={() => changeColumnGrouping({ columnName })}\n                    onWidthChange={({ shift }) => changeTableColumnWidth({ columnName, shift })}\n                    onWidthDraft={({ shift }) => draftTableColumnWidth({ columnName, shift })}\n                    onWidthDraftCancel={() => cancelTableColumnWidthDraft()}\n                    before={(\n                      <TemplatePlaceholder\n                        name=\"tableHeaderCellBefore\"\n                        params={{\n                          column: params.tableColumn.column,\n                        }}\n                      />\n                    )}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isHeadingTableRow(tableRow)}\n        >\n          {params => <HeaderRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableHeaderRow.propTypes = {\n  showSortingControls: PropTypes.bool,\n  showGroupingControls: PropTypes.bool,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nTableHeaderRow.defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: null,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  getBandComponent,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n} from '@devexpress/dx-grid-core';\n\nconst CellPlaceholder = props => <TemplatePlaceholder params={props} />;\n\nexport class TableBandHeader extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this.props;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns },\n    ) => tableRowsWithBands(tableHeaderRows, columnBands, tableColumns);\n\n    return (\n      <Plugin\n        name=\"TableBandHeader\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'TableHeaderRow' },\n          { name: 'TableSelection', optional: true },\n          { name: 'TableEditColumn', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isBandedOrHeaderRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns, tableHeaderRows }) => {\n                const bandComponent = getBandComponent(\n                  params, tableHeaderRows, tableColumns, columnBands,\n                );\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return <TemplatePlaceholder />;\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload;\n                    return (\n                      <Cell {...params} {...payload}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n                  case BAND_HEADER_CELL:\n                    return (\n                      <TemplatePlaceholder\n                        name=\"tableCell\"\n                        params={{ ...params, ...bandComponent.payload }}\n                      />\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {params => <HeaderCell component={CellPlaceholder} {...params} />}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isBandedTableRow(tableRow)}\n        >\n          {params => <Row {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableBandHeader.propTypes = {\n  columnBands: PropTypes.array.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  bandedHeaderCellComponent: PropTypes.func.isRequired,\n  invisibleCellComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin,\n} from '@devexpress/dx-react-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  getMessagesFormatter,\n  isFilterValueEmpty,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'FilteringState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nexport class TableFilterRow extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterOperations: {},\n    };\n  }\n\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      editorComponent: EditorComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows },\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {(\n                { filters, isColumnFilteringEnabled, getAvailableFilterOperations },\n                { changeColumnFilter },\n              ) => {\n                const { filterOperations } = this.state;\n                const { name: columnName } = params.tableColumn.column;\n                const filter = getColumnFilterConfig(filters, columnName);\n                const onFilter = config => changeColumnFilter({ columnName, config });\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = filterOperations[columnName]\n                  || columnFilterOperations[0];\n                const handleFilterOperationChange = (value) => {\n                  this.setState({\n                    filterOperations: {\n                      ...filterOperations,\n                      [columnName]: value,\n                    },\n                  });\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = value => onFilter(!isFilterValueEmpty(value)\n                  ? { value, operation: selectedFilterOperation }\n                  : null);\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column: params.tableColumn.column,\n                      value: filter ? filter.value : undefined,\n                      onValueChange: handleFilterValueChange,\n                    }}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...params}\n                        getMessage={getMessage}\n                        column={params.tableColumn.column}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations}\n                              onChange={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : ''}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChange={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isFilterTableRow(tableRow)}\n        >\n          {params => <FilterRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableFilterRow.propTypes = {\n  rowHeight: PropTypes.any,\n  showFilterSelector: PropTypes.bool,\n  messages: PropTypes.object,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  filterSelectorComponent: PropTypes.func.isRequired,\n  iconComponent: PropTypes.func.isRequired,\n  editorComponent: PropTypes.func.isRequired,\n};\n\nTableFilterRow.defaultProps = {\n  rowHeight: undefined,\n  showFilterSelector: false,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nexport class TableEditRow extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this.props;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows },\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                getCellValue,\n                createRowChange,\n                rowChanges,\n                isColumnEditingEnabled,\n              }, {\n                changeAddedRow,\n                changeRow,\n              }) => {\n                const { rowId, row } = params.tableRow;\n                const { column } = params.tableColumn;\n                const { name: columnName } = column;\n\n                const isNew = isAddedTableRow(params.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column,\n                      row,\n                      value,\n                      onValueChange,\n                    }}\n                  >\n                    {content => (\n                      <EditCell\n                        {...params}\n                        row={row}\n                        column={column}\n                        value={value}\n                        editingEnabled={isColumnEditingEnabled(columnName)}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => (isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {params => (\n            <EditRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableEditRow.propTypes = {\n  rowHeight: PropTypes.any,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n};\n\nTableEditRow.defaultProps = {\n  rowHeight: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n];\n\nexport class TableEditColumn extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n    const tableColumnsComputed = ({ tableColumns }) => tableColumnsWithEditing(tableColumns, width);\n\n    return (\n      <Plugin\n        name=\"TableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn },\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {(getters, actions) => (\n                <HeaderCell {...params}>\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => actions.addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {(getters, actions) => {\n                const isEdit = isEditTableRow(params.tableRow);\n                const isNew = isAddedTableRow(params.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [params.tableRow.rowId];\n                return (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => actions.startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          actions.deleteRows({ rowIds });\n                          actions.commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.commitAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.cancelAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\nTableEditColumn.propTypes = {\n  cellComponent: PropTypes.func.isRequired,\n  headerCellComponent: PropTypes.func.isRequired,\n  commandComponent: PropTypes.func.isRequired,\n  showAddCommand: PropTypes.bool,\n  showEditCommand: PropTypes.bool,\n  showDeleteCommand: PropTypes.bool,\n  width: PropTypes.number,\n  messages: PropTypes.object,\n};\nTableEditColumn.defaultProps = {\n  showAddCommand: false,\n  showEditCommand: false,\n  showDeleteCommand: false,\n  width: 140,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { memoize } from '@devexpress/dx-core';\nimport {\n  Plugin, Getter, Action, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithWidths,\n  tableColumnsWithDraftWidths,\n  changeTableColumnWidth,\n  draftTableColumnWidth,\n  cancelTableColumnWidthDraft,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nexport class TableColumnResizing extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: [],\n    };\n    const { onColumnWidthsChange, minColumnWidth } = this.props;\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        columnWidths: () => onColumnWidthsChange,\n      },\n    );\n\n    this.tableColumnsComputed = memoize(\n      columnWidths => ({ tableColumns }) => tableColumnsWithWidths(tableColumns, columnWidths),\n    );\n    this.tableColumnsDraftComputed = memoize(\n      draftColumnWidths => (\n        { tableColumns },\n      ) => tableColumnsWithDraftWidths(tableColumns, draftColumnWidths),\n    );\n\n    this.changeTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => changeTableColumnWidth(\n        prevState,\n        { ...payload, minColumnWidth },\n      ),\n    );\n    this.draftTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => draftTableColumnWidth(\n        prevState,\n        { ...payload, minColumnWidth },\n      ),\n    );\n    this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(\n      stateHelper, cancelTableColumnWidthDraft,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      columnWidths = prevState.columnWidths,\n    } = nextProps;\n\n    return {\n      columnWidths,\n    };\n  }\n\n  render() {\n    const { columnWidths, draftColumnWidths } = this.state;\n\n    const tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    const tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n\n    return (\n      <Plugin\n        name=\"TableColumnResizing\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumnResizingEnabled\" value />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsDraftComputed} />\n        <Action name=\"changeTableColumnWidth\" action={this.changeTableColumnWidth} />\n        <Action name=\"draftTableColumnWidth\" action={this.draftTableColumnWidth} />\n        <Action name=\"cancelTableColumnWidthDraft\" action={this.cancelTableColumnWidthDraft} />\n      </Plugin>\n    );\n  }\n}\n\nTableColumnResizing.propTypes = {\n  defaultColumnWidths: PropTypes.array,\n  columnWidths: PropTypes.array,\n  onColumnWidthsChange: PropTypes.func,\n  minColumnWidth: PropTypes.number.isRequired,\n};\n\nTableColumnResizing.defaultProps = {\n  defaultColumnWidths: [],\n  columnWidths: undefined,\n  onColumnWidthsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, TemplatePlaceholder, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { pageCount, getMessagesFormatter } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nexport class PagingPanel extends React.PureComponent {\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <Plugin\n        name=\"PagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"footer\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ currentPage, pageSize, totalCount }, { setCurrentPage, setPageSize }) => (\n              <Pager\n                currentPage={currentPage}\n                pageSize={pageSize}\n                totalCount={totalCount}\n                totalPages={pageCount(totalCount, pageSize)}\n                pageSizes={pageSizes}\n                getMessage={getMessage}\n                onCurrentPageChange={setCurrentPage}\n                onPageSizeChange={setPageSize}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nPagingPanel.propTypes = {\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n  containerComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nPagingPanel.defaultProps = {\n  pageSizes: [],\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nexport class GroupingPanel extends React.PureComponent {\n  render() {\n    const {\n      layoutComponent: Layout,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    const EmptyMessagePlaceholder = () => (\n      <EmptyMessage\n        getMessage={getMessage}\n      />\n    );\n\n    const ItemPlaceholder = ({ item }) => {\n      const { name: columnName } = item.column;\n\n      return (\n        <TemplateConnector>\n          {(\n            { sorting, isColumnSortingEnabled, isColumnGroupingEnabled },\n            { changeColumnGrouping, changeColumnSorting },\n          ) => {\n            const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n            const groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n\n            return (\n              <Item\n                item={item}\n                sortingEnabled={sortingEnabled}\n                groupingEnabled={groupingEnabled}\n                showSortingControls={showSortingControls}\n                sortingDirection={showSortingControls\n                  ? getColumnSortingDirection(sorting, columnName) : undefined}\n                showGroupingControls={showGroupingControls}\n                onGroup={() => changeColumnGrouping({ columnName })}\n                onSort={(\n                  { direction, keepOther },\n                ) => changeColumnSorting({ columnName, direction, keepOther })}\n              />\n            );\n          }}\n        </TemplateConnector>\n      );\n    };\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={[\n          { name: 'GroupingState' },\n          { name: 'Toolbar' },\n          { name: 'SortingState', optional: !showSortingControls },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              columns, grouping, draftGrouping, draggingEnabled, isColumnGroupingEnabled,\n            }, {\n              changeColumnGrouping, draftColumnGrouping, cancelColumnGroupingDraft,\n            }) => (\n              <Layout\n                items={groupingPanelItems(columns, grouping, draftGrouping)}\n                isColumnGroupingEnabled={isColumnGroupingEnabled}\n                draggingEnabled={draggingEnabled}\n                onGroup={changeColumnGrouping}\n                onGroupDraft={draftColumnGrouping}\n                onGroupDraftCancel={cancelColumnGroupingDraft}\n                itemComponent={ItemPlaceholder}\n                emptyMessageComponent={EmptyMessagePlaceholder}\n                containerComponent={Container}\n              />\n            )}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nGroupingPanel.propTypes = {\n  showSortingControls: PropTypes.bool,\n  showGroupingControls: PropTypes.bool,\n  layoutComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  itemComponent: PropTypes.func.isRequired,\n  emptyMessageComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nGroupingPanel.defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Plugin, Template, Getter } from '@devexpress/dx-react-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DataTypeProvider extends React.PureComponent {\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this.props;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations },\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations,\n      columnNames,\n    );\n\n    return (\n      <Plugin name=\"DataTypeProvider\">\n        <Getter name=\"getAvailableFilterOperations\" computed={getAvailableFilterOperationsComputed} />\n        {Formatter\n          ? (\n            <Template\n              name=\"valueFormatter\"\n              predicate={({ column }) => columnNames.includes(column.name)}\n            >\n              {params => <Formatter {...params} />}\n            </Template>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <Template\n              name=\"valueEditor\"\n              predicate={({ column }) => columnNames.includes(column.name)}\n            >\n              {params => <Editor {...params} />}\n            </Template>\n          )\n          : null\n        }\n      </Plugin>\n    );\n  }\n}\n\nDataTypeProvider.propTypes = {\n  for: PropTypes.arrayOf(PropTypes.string).isRequired,\n  formatterComponent: PropTypes.func,\n  editorComponent: PropTypes.func,\n  availableFilterOperations: PropTypes.arrayOf(PropTypes.string),\n};\n\nDataTypeProvider.defaultProps = {\n  formatterComponent: undefined,\n  editorComponent: undefined,\n  availableFilterOperations: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Action,\n  Getter,\n  Plugin,\n  Template,\n  TemplateConnector,\n  TemplatePlaceholder,\n  createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  getMessagesFormatter,\n  toggleColumn,\n  visibleTableColumns,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames },\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\nexport class TableColumnVisibility extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { onHiddenColumnNamesChange } = this.props;\n    this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        hiddenColumnNames: () => onHiddenColumnNamesChange,\n      },\n    );\n\n    this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'hiddenColumnNames', toggleColumn);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      hiddenColumnNames = prevState.hiddenColumnNames,\n    } = nextProps;\n\n    return {\n      hiddenColumnNames,\n    };\n  }\n\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n    const { hiddenColumnNames } = this.state;\n    const { columnExtensions, columnTogglingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n        <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n        <Getter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <Action\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (tableDataColumnsExist(tableColumns)\n                ? <TemplatePlaceholder />\n                : (\n                  <EmptyMessage\n                    getMessage={getMessage}\n                    {...params}\n                  />\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnVisibility.propTypes = {\n  hiddenColumnNames: PropTypes.arrayOf(PropTypes.string),\n  defaultHiddenColumnNames: PropTypes.arrayOf(PropTypes.string),\n  emptyMessageComponent: PropTypes.func.isRequired,\n  onHiddenColumnNamesChange: PropTypes.func,\n  messages: PropTypes.object,\n  columnExtensions: PropTypes.array,\n  columnTogglingEnabled: PropTypes.bool,\n};\n\nTableColumnVisibility.defaultProps = {\n  hiddenColumnNames: undefined,\n  defaultHiddenColumnNames: [],\n  onHiddenColumnNamesChange: undefined,\n  messages: {},\n  columnExtensions: undefined,\n  columnTogglingEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\n\nexport class Toolbar extends React.PureComponent {\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n          <Root>\n            <TemplatePlaceholder name=\"toolbarContent\" />\n          </Root>\n          <TemplatePlaceholder />\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nToolbar.propTypes = {\n  rootComponent: PropTypes.func.isRequired,\n  flexibleSpaceComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { toggleRowExpanded } from '@devexpress/dx-grid-core';\n\nexport class TreeDataState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onExpandedRowIdsChange } = this.props;\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => onExpandedRowIdsChange,\n      },\n    );\n\n    this.toggleRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"TreeDataState\"\n      >\n        <Getter name=\"expandedRowIds\" value={expandedRowIds} />\n        {' '}\n        {/* collision =( */}\n        <Action name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\nTreeDataState.propTypes = {\n  expandedRowIds: PropTypes.array,\n  defaultExpandedRowIds: PropTypes.array,\n  onExpandedRowIdsChange: PropTypes.func,\n};\n\nTreeDataState.defaultProps = {\n  expandedRowIds: undefined,\n  defaultExpandedRowIds: [],\n  onExpandedRowIdsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'TreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds },\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows },\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows },\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows },\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }) => unwrappedCustomTreeRows(rows);\n\nexport class CustomTreeData extends React.PureComponent {\n  render() {\n    const {\n      getChildRows,\n    } = this.props;\n    const treeRowsComputed = ({ rows }) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <Plugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={treeRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <Getter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <Getter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <Getter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <Getter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nCustomTreeData.propTypes = {\n  getChildRows: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, Getter, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\n\nexport class TableTreeColumn extends React.PureComponent {\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"TableTreeColumn\"\n        dependencies={[\n          { name: 'DataTypeProvider', optional: true },\n          { name: 'TreeDataState' },\n          { name: 'SelectionState', optional: !showSelectionControls },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n          { name: 'Table' },\n          { name: 'TableHeaderRow', optional: true },\n        ]}\n      >\n        <Getter name=\"tableTreeColumnName\" value={forColumnName} />\n        <Template\n          name=\"tableHeaderCellBefore\"\n          predicate={({ column }) => column.name === forColumnName}\n        >\n          <ExpandButton\n            visible={false}\n          />\n          {showSelectionControls && showSelectAll && (\n            <TemplateConnector>\n              {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                <Checkbox\n                  disabled={!selectAllAvailable}\n                  checked={allSelected}\n                  indeterminate={someSelected}\n                  onChange={toggleSelectAll}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn },\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                getCollapsedRows, expandedRowIds, selection, isTreeRowLeaf, getTreeRowLevel,\n                getCellValue,\n              }, {\n                toggleRowExpanded, toggleSelection,\n              }) => {\n                const { row, rowId } = params.tableRow;\n                const columnName = params.tableColumn.column.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      row,\n                      column: params.tableColumn.column,\n                      value,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={row}\n                        column={params.tableColumn.column}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableTreeColumn.propTypes = {\n  for: PropTypes.string.isRequired,\n  showSelectionControls: PropTypes.bool,\n  showSelectAll: PropTypes.bool,\n  cellComponent: PropTypes.func.isRequired,\n  indentComponent: PropTypes.func.isRequired,\n  expandButtonComponent: PropTypes.func.isRequired,\n  checkboxComponent: PropTypes.func.isRequired,\n  contentComponent: PropTypes.func.isRequired,\n};\n\nTableTreeColumn.defaultProps = {\n  showSelectionControls: false,\n  showSelectAll: false,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\n\nexport class SearchState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onValueChange } = this.props;\n\n    this.state = {\n      value: props.value || props.defaultValue,\n    };\n    const stateHelper = createStateHelper(this, {\n      value: () => onValueChange,\n    });\n\n    this.changeValue = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'value', changeSearchValue);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      value = prevState.value,\n    } = nextProps;\n\n    return {\n      value,\n    };\n  }\n\n  render() {\n    const { value } = this.state;\n    const filterExpressionComputed = (\n      { filterExpression, columns },\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <Plugin\n        name=\"SearchState\"\n      >\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter name=\"searchValue\" value={value} />\n        <Action name=\"changeSearchValue\" action={this.changeValue} />\n      </Plugin>\n    );\n  }\n}\n\nSearchState.propTypes = {\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  onValueChange: PropTypes.func,\n};\n\nSearchState.defaultProps = {\n  value: undefined,\n  defaultValue: '',\n  onValueChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template,\n  TemplatePlaceholder,\n  Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'SearchState' },\n];\n\nexport class SearchPanel extends React.PureComponent {\n  render() {\n    const { inputComponent: Input, messages } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <Plugin\n        name=\"SearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ searchValue }, { changeSearchValue }) => (\n              <Input\n                value={searchValue}\n                onValueChange={changeSearchValue}\n                getMessage={getMessage}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nSearchPanel.propTypes = {\n  inputComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nSearchPanel.defaultProps = {\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\n\nexport class SummaryState extends React.PureComponent {\n  render() {\n    const { totalItems, groupItems, treeItems } = this.props;\n\n    return (\n      <Plugin\n        name=\"SummaryState\"\n      >\n        <Getter name=\"totalSummaryItems\" value={totalItems} />\n        <Getter name=\"groupSummaryItems\" value={groupItems} />\n        <Getter name=\"treeSummaryItems\" value={treeItems} />\n      </Plugin>\n    );\n  }\n}\n\nSummaryState.propTypes = {\n  totalItems: PropTypes.array,\n  groupItems: PropTypes.array,\n  treeItems: PropTypes.array,\n};\n\nSummaryState.defaultProps = {\n  totalItems: undefined,\n  groupItems: undefined,\n  treeItems: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  defaultSummaryCalculator,\n  totalSummaryValues,\n  groupSummaryValues,\n  treeSummaryValues,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nexport class IntegratedSummary extends React.PureComponent {\n  render() {\n    const { calculator } = this.props;\n\n    const totalSummaryValuesComputed = ({\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }) => totalSummaryValues(\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const groupSummaryValuesComputed = ({\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n    }) => groupSummaryValues(\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      calculator,\n    );\n\n    const treeSummaryValuesComputed = ({\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n    }) => treeSummaryValues(\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n      calculator,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" computed={totalSummaryValuesComputed} />\n        <Getter name=\"groupSummaryValues\" computed={groupSummaryValuesComputed} />\n        <Getter name=\"treeSummaryValues\" computed={treeSummaryValuesComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedSummary.defaultCalculator = defaultSummaryCalculator;\n\nIntegratedSummary.propTypes = {\n  calculator: PropTypes.func,\n};\n\nIntegratedSummary.defaultProps = {\n  calculator: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nexport class CustomSummary extends React.PureComponent {\n  render() {\n    const { totalValues, groupValues, treeValues } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" value={totalValues} />\n        <Getter name=\"groupSummaryValues\" value={groupValues} />\n        <Getter name=\"treeSummaryValues\" value={treeValues} />\n      </Plugin>\n    );\n  }\n}\n\nCustomSummary.propTypes = {\n  totalValues: PropTypes.array,\n  groupValues: PropTypes.object,\n  treeValues: PropTypes.object,\n};\n\nCustomSummary.defaultProps = {\n  totalValues: undefined,\n  groupValues: undefined,\n  treeValues: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplateConnector,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  getMessagesFormatter,\n  tableRowsWithSummaries,\n  tableRowsWithTotalSummaries,\n  isTotalSummaryTableCell,\n  isGroupSummaryTableCell,\n  isTreeSummaryTableCell,\n  isTotalSummaryTableRow,\n  isGroupSummaryTableRow,\n  isTreeSummaryTableRow,\n  getColumnSummaries,\n} from '@devexpress/dx-grid-core';\n\nconst dependencies = [\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState' },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'TableTreeColumn', optional: true },\n];\n\nconst tableBodyRowsComputed = ({\n  tableBodyRows,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n}) => tableRowsWithSummaries(tableBodyRows, getRowLevelKey, isGroupRow, getRowId);\nconst tableFooterRowsComputed = ({\n  tableFooterRows,\n}) => tableRowsWithTotalSummaries(tableFooterRows);\n\nconst defaultTypelessSummaries = ['count'];\n\nexport class TableSummaryRow extends React.PureComponent {\n  renderCellContent(column, columnSummaries) {\n    const {\n      formatlessSummaryTypes,\n      itemComponent: Item,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <React.Fragment>\n        {columnSummaries.map((summary) => {\n          if (summary.value === null\n            || formatlessSummaryTypes.includes(summary.type)\n            || defaultTypelessSummaries.includes(summary.type)) {\n            return (\n              <Item\n                key={summary.type}\n              >\n                {getMessage(summary.type)}\n                :&nbsp;&nbsp;\n                {String(summary.value)}\n              </Item>\n            );\n          }\n          return (\n            <TemplatePlaceholder\n              key={summary.type}\n              name=\"valueFormatter\"\n              params={{\n                column,\n                value: summary.value,\n              }}\n            >\n              {content => (\n                <Item>\n                  {getMessage(summary.type)}\n                  :&nbsp;&nbsp;\n                  {content || String(summary.value)}\n                </Item>\n              )}\n            </TemplatePlaceholder>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {\n      totalRowComponent: TotalRow,\n      groupRowComponent: GroupRow,\n      treeRowComponent: TreeRow,\n      totalCellComponent: TotalCell,\n      groupCellComponent: GroupCell,\n      treeCellComponent: TreeCell,\n      treeColumnCellComponent: TreeColumnCell,\n      treeColumnContentComponent: TreeColumnContent,\n      treeColumnIndentComponent: TreeColumnIndent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableSummaryRow\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" computed={tableFooterRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isTotalSummaryTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ totalSummaryItems, totalSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  totalSummaryItems,\n                  params.tableColumn.column.name,\n                  totalSummaryValues,\n                );\n                return (\n                  <TotalCell\n                    {...params}\n                    column={params.tableColumn.column}\n                  >\n                    {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                  </TotalCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isGroupSummaryTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ groupSummaryItems, groupSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  groupSummaryItems,\n                  params.tableColumn.column.name,\n                  groupSummaryValues[params.tableRow.row.compoundKey],\n                );\n                return (\n                  <GroupCell\n                    {...params}\n                    column={params.tableColumn.column}\n                  >\n                    {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                  </GroupCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isTreeSummaryTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                treeSummaryItems,\n                treeSummaryValues,\n                tableTreeColumnName,\n                getRowId,\n                getTreeRowLevel,\n              }) => {\n                const columnSummaries = getColumnSummaries(\n                  treeSummaryItems,\n                  params.tableColumn.column.name,\n                  treeSummaryValues[getRowId(params.tableRow.row)],\n                );\n                if (tableTreeColumnName === params.tableColumn.column.name) {\n                  return (\n                    <TreeColumnCell\n                      {...params}\n                      column={params.tableColumn.column}\n                    >\n                      <TreeColumnIndent\n                        level={getTreeRowLevel(params.tableRow.row)}\n                      />\n                      <TreeColumnContent>\n                        {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                      </TreeColumnContent>\n                    </TreeColumnCell>\n                  );\n                }\n                return (\n                  <TreeCell\n                    {...params}\n                    column={params.tableColumn.column}\n                  >\n                    {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                  </TreeCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isTotalSummaryTableRow(tableRow)}\n        >\n          {params => (\n            <TotalRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isGroupSummaryTableRow(tableRow)}\n        >\n          {params => (\n            <GroupRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isTreeSummaryTableRow(tableRow)}\n        >\n          {params => (\n            <TreeRow\n              {...params}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableSummaryRow.propTypes = {\n  formatlessSummaryTypes: PropTypes.array,\n\n  totalRowComponent: PropTypes.func.isRequired,\n  groupRowComponent: PropTypes.func.isRequired,\n  treeRowComponent: PropTypes.func.isRequired,\n\n  totalCellComponent: PropTypes.func.isRequired,\n  groupCellComponent: PropTypes.func.isRequired,\n  treeCellComponent: PropTypes.func.isRequired,\n\n  treeColumnCellComponent: PropTypes.func.isRequired,\n  treeColumnContentComponent: PropTypes.func.isRequired,\n  treeColumnIndentComponent: PropTypes.func.isRequired,\n\n  itemComponent: PropTypes.func.isRequired,\n\n  messages: PropTypes.object,\n};\n\nTableSummaryRow.defaultProps = {\n  formatlessSummaryTypes: [],\n  messages: {},\n};\n","/* globals requestAnimationFrame cancelAnimationFrame */\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport {\n  getAnimations,\n  filterActiveAnimations,\n  evalAnimations,\n} from '@devexpress/dx-grid-core';\n\nconst TABLE_FLEX_TYPE = 'flex';\n\nexport class TableLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationState: new Map(),\n    };\n\n    this.animations = new Map();\n    this.tableNode = null;\n\n    this.setRef = (ref) => { if (ref) this.tableNode = ref; };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { columns } = this.props;\n    const { columns: prevColumns } = prevProps;\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const tableWidth = findDOMNode(this).scrollWidth;\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  }\n\n  getColumns() {\n    const { columns } = this.props;\n    const { animationState } = this.state;\n\n    let result = columns;\n\n    const isFixedWidth = columns.filter(column => column.width === undefined).length === 0;\n    if (isFixedWidth) {\n      result = result.slice();\n      result.push({ key: TABLE_FLEX_TYPE, type: TABLE_FLEX_TYPE });\n    }\n\n    if (animationState.size) {\n      result = result\n        .map(column => (animationState.has(column.key)\n          ? { ...column, animationState: animationState.get(column.key) }\n          : column));\n    }\n\n    return result;\n  }\n\n  processAnimationFrame() {\n    const { animationState: animationComponentState } = this.state;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({ animationState: new Map() });\n      }\n      return;\n    }\n\n    const animationState = evalAnimations(this.animations);\n    this.setState({ animationState });\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      minColumnWidth,\n      ...restProps\n    } = this.props;\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .reduce((acc, width) => acc + width, 0);\n\n    return (\n      <Layout\n        {...restProps}\n        columns={columns}\n        minWidth={minWidth}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  }\n}\n\nTableLayout.propTypes = {\n  columns: PropTypes.array.isRequired,\n  minColumnWidth: PropTypes.number.isRequired,\n  layoutComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nexport class ColumnGroup extends React.PureComponent {\n  render() {\n    const { columns } = this.props;\n\n    return (\n      <colgroup>\n        {columns.map(column => (\n          <col\n            key={column.key}\n            style={column.width !== undefined\n              ? { width: `${column.width}px` }\n              : null}\n          />\n        ))}\n      </colgroup>\n    );\n  }\n}\n\nColumnGroup.propTypes = {\n  columns: PropTypes.array.isRequired,\n};\n","import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport { Sizer, RefHolder } from '@devexpress/dx-react-core';\nimport { getCollapsedGrid } from '@devexpress/dx-grid-core';\nimport { ColumnGroup } from './column-group';\n\nconst AUTO_HEIGHT = 'auto';\n\nexport class VirtualTableLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rowHeights: new Map(),\n      viewportTop: 0,\n      viewportLeft: 0,\n    };\n    this.state.headerHeight = props.headerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n    this.state.bodyHeight = 0;\n    this.state.footerHeight = props.footerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n\n    this.rowRefs = new Map();\n    this.blockRefs = new Map();\n    this.registerRowRef = this.registerRowRef.bind(this);\n    this.getRowHeight = this.getRowHeight.bind(this);\n    this.updateViewport = this.updateViewport.bind(this);\n  }\n\n  componentDidMount() {\n    this.storeRowHeights();\n    this.storeBloksHeights();\n  }\n\n  componentDidUpdate() {\n    this.storeRowHeights();\n    this.storeBloksHeights();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { rowHeights: prevRowHeight } = prevState;\n    const rowHeights = [...nextProps.headerRows, ...nextProps.bodyRows, ...nextProps.footerRows]\n      .reduce(\n        (acc, row) => {\n          const rowHeight = prevRowHeight.get(row.key);\n          if (rowHeight !== undefined) {\n            acc.set(row.key, rowHeight);\n          }\n          return acc;\n        },\n        new Map(),\n      );\n    return { rowHeights };\n  }\n\n  getRowHeight(row) {\n    const { rowHeights } = this.state;\n    const { estimatedRowHeight } = this.props;\n    const storedHeight = rowHeights.get(row.key);\n    if (storedHeight !== undefined) return storedHeight;\n    if (row.height) return row.height;\n    return estimatedRowHeight;\n  }\n\n  storeRowHeights() {\n    const rowsWithChangedHeights = Array.from(this.rowRefs.entries())\n      // eslint-disable-next-line react/no-find-dom-node\n      .map(([row, ref]) => [row, findDOMNode(ref)])\n      .filter(([, node]) => !!node)\n      .map(([row, node]) => [row, node.getBoundingClientRect().height])\n      .filter(([row]) => row.type !== 'stub')\n      .filter(([row, height]) => height !== this.getRowHeight(row));\n\n    if (rowsWithChangedHeights.length) {\n      const { rowHeights } = this.state;\n      rowsWithChangedHeights\n        .forEach(([row, height]) => rowHeights.set(row.key, height));\n\n      this.setState({\n        rowHeights,\n      });\n    }\n  }\n\n  storeBloksHeights() {\n    const headerHeight = this.blockRefs.get('header')\n      // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('header')).getBoundingClientRect().height\n      : 0;\n\n    const bodyHeight = this.blockRefs.get('body')\n      // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('body')).getBoundingClientRect().height\n      : 0;\n\n    const footerHeight = this.blockRefs.get('footer')\n      // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('footer')).getBoundingClientRect().height\n      : 0;\n\n    const {\n      headerHeight: prevHeaderHeight,\n      bodyHeight: prevBodyHeight,\n      footerHeight: prevFooterHeight,\n    } = this.state;\n\n    if (prevHeaderHeight !== headerHeight\n      || prevBodyHeight !== bodyHeight\n      || prevFooterHeight !== footerHeight) {\n      this.setState({\n        headerHeight,\n        bodyHeight,\n        footerHeight,\n      });\n    }\n  }\n\n  registerRowRef(row, ref) {\n    if (ref === null) {\n      this.rowRefs.delete(row);\n    } else {\n      this.rowRefs.set(row, ref);\n    }\n  }\n\n  registerBlockRef(name, ref) {\n    if (ref === null) {\n      this.blockRefs.delete(name);\n    } else {\n      this.blockRefs.set(name, ref);\n    }\n  }\n\n  updateViewport(e) {\n    const node = e.target;\n\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return;\n    }\n\n    // NOTE: prevent iOS to flicker in bounces\n    if (node.scrollTop < 0\n      || node.scrollLeft < 0\n      || node.scrollLeft + node.clientWidth > Math.max(node.scrollWidth, node.clientWidth)\n      || node.scrollTop + node.clientHeight > Math.max(node.scrollHeight, node.clientHeight)) {\n      return;\n    }\n\n    this.setState({\n      viewportTop: node.scrollTop,\n      viewportLeft: node.scrollLeft,\n    });\n  }\n\n  renderRowsBlock(name, collapsedGrid, Table, Body, marginBottom) {\n    const {\n      minWidth,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    return (\n      <RefHolder\n        ref={ref => this.registerBlockRef(name, ref)}\n      >\n        <Table\n          style={{ minWidth: `${minWidth}px`, ...marginBottom ? { marginBottom: `${marginBottom}px` } : null }}\n        >\n          <ColumnGroup\n            columns={collapsedGrid.columns}\n          />\n          <Body>\n            {collapsedGrid.rows.map((visibleRow) => {\n              const { row, cells = [] } = visibleRow;\n              return (\n                <RefHolder\n                  key={row.key}\n                  ref={ref => this.registerRowRef(row, ref)}\n                >\n                  <Row\n                    tableRow={row}\n                    style={row.height !== undefined\n                      ? { height: `${row.height}px` }\n                      : undefined}\n                  >\n                    {cells.map((cell) => {\n                      const { column } = cell;\n                      return (\n                        <Cell\n                          key={column.key}\n                          tableRow={row}\n                          tableColumn={column}\n                          style={column.animationState}\n                          colSpan={cell.colSpan}\n                        />\n                      );\n                    })}\n                  </Row>\n                </RefHolder>\n              );\n            })}\n          </Body>\n        </Table>\n      </RefHolder>\n    );\n  }\n\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minColumnWidth,\n      height: propHeight,\n      containerComponent: Container,\n      headTableComponent: HeadTable,\n      footerTableComponent: FootTable,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      footerComponent: Footer,\n      getCellColSpan,\n    } = this.props;\n\n    const {\n      viewportLeft,\n      viewportTop,\n      headerHeight,\n      bodyHeight,\n      footerHeight,\n    } = this.state;\n\n    return (\n      <Sizer\n        containerComponent={Container}\n        style={{\n          ...(propHeight === AUTO_HEIGHT ? null : { height: `${propHeight}px` }),\n        }}\n        onScroll={this.updateViewport}\n      >\n        {({ width, height }) => {\n          const getColSpan = (\n            tableRow, tableColumn,\n          ) => getCellColSpan({ tableRow, tableColumn, tableColumns: columns });\n          const collapsedHeaderGrid = getCollapsedGrid({\n            rows: headerRows,\n            columns,\n            top: 0,\n            left: viewportLeft,\n            width,\n            height: headerHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n          const collapsedBodyGrid = getCollapsedGrid({\n            rows: bodyRows,\n            columns,\n            top: viewportTop,\n            left: viewportLeft,\n            width,\n            height: height - headerHeight - footerHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n          const collapsedFooterGrid = getCollapsedGrid({\n            rows: footerRows,\n            columns,\n            top: 0,\n            left: viewportLeft,\n            width,\n            height: footerHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n\n          return (\n            <React.Fragment>\n              {!!headerRows.length && this.renderRowsBlock('header', collapsedHeaderGrid, HeadTable, Head)}\n              {this.renderRowsBlock('body', collapsedBodyGrid, Table, Body, Math.max(0, height - headerHeight - bodyHeight - footerHeight))}\n              {!!footerRows.length && this.renderRowsBlock('footer', collapsedFooterGrid, FootTable, Footer)}\n            </React.Fragment>\n          );\n        }}\n      </Sizer>\n    );\n  }\n}\n\nVirtualTableLayout.propTypes = {\n  minWidth: PropTypes.number.isRequired,\n  minColumnWidth: PropTypes.number.isRequired,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]).isRequired,\n  headerRows: PropTypes.array,\n  bodyRows: PropTypes.array.isRequired,\n  footerRows: PropTypes.array,\n  columns: PropTypes.array.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  bodyComponent: PropTypes.func.isRequired,\n  headComponent: PropTypes.func,\n  footerComponent: PropTypes.func,\n  tableComponent: PropTypes.func.isRequired,\n  headTableComponent: PropTypes.func,\n  footerTableComponent: PropTypes.func,\n  containerComponent: PropTypes.func.isRequired,\n  estimatedRowHeight: PropTypes.number.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n\nVirtualTableLayout.defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  headTableComponent: () => null,\n  footerComponent: () => null,\n  footerTableComponent: () => null,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nconst getColumnStyle = ({ column }) => column.animationState;\n\nconst getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n\nexport class RowLayout extends React.PureComponent {\n  render() {\n    const {\n      row,\n      columns,\n      rowComponent: Row,\n      cellComponent: Cell,\n      getCellColSpan,\n    } = this.props;\n    const getColSpan = (\n      tableRow, tableColumn,\n    ) => getCellColSpan({ tableRow, tableColumn, tableColumns: columns });\n\n    return (\n      <Row\n        tableRow={row}\n        style={getRowStyle({ row })}\n      >\n        {\n          columns\n            .map(column => (\n              <Cell\n                key={column.key}\n                tableRow={row}\n                tableColumn={column}\n                style={getColumnStyle({ column })}\n                colSpan={getColSpan(row, column)}\n              />\n            ))\n        }\n      </Row>\n    );\n  }\n}\n\nRowLayout.propTypes = {\n  row: PropTypes.any.isRequired,\n  columns: PropTypes.array.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { RowLayout } from './row-layout';\n\nexport class RowsBlockLayout extends React.PureComponent {\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  }\n}\n\nRowsBlockLayout.propTypes = {\n  rows: PropTypes.array.isRequired,\n  columns: PropTypes.array.isRequired,\n  blockComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\n\nexport class StaticTableLayout extends React.PureComponent {\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minWidth,\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Container>\n        <Table\n          style={{ minWidth: `${minWidth}px` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              columns={columns}\n              blockComponent={headComponent}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n              getCellColSpan={getCellColSpan}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            columns={columns}\n            blockComponent={bodyComponent}\n            rowComponent={rowComponent}\n            cellComponent={cellComponent}\n            getCellColSpan={getCellColSpan}\n          />\n          {!!footerRows.length && (\n            <RowsBlockLayout\n              rows={footerRows}\n              columns={columns}\n              blockComponent={footerComponent}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n              getCellColSpan={getCellColSpan}\n            />\n          )}\n        </Table>\n      </Container>\n    );\n  }\n}\n\nStaticTableLayout.propTypes = {\n  headerRows: PropTypes.array,\n  bodyRows: PropTypes.array.isRequired,\n  footerRows: PropTypes.array,\n  columns: PropTypes.array.isRequired,\n  minWidth: PropTypes.number.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  tableComponent: PropTypes.func.isRequired,\n  headComponent: PropTypes.func,\n  bodyComponent: PropTypes.func.isRequired,\n  footerComponent: PropTypes.func,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n\nStaticTableLayout.defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { DragSource } from '@devexpress/dx-react-core';\n\nexport class ItemLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dragging: false,\n    };\n  }\n\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n      draggingEnabled,\n      onDragStart,\n      onDragEnd,\n    } = this.props;\n    const { dragging } = this.state;\n\n    const itemElement = <Item item={{ ...item, draft: dragging || item.draft }} />;\n\n    return (draggingEnabled ? (\n      <DragSource\n        payload={[{ type: 'column', columnName: item.column.name }]}\n        onStart={() => {\n          this.setState({ dragging: true });\n          onDragStart();\n        }}\n        onEnd={() => {\n          this.setState({ dragging: false });\n          onDragEnd();\n        }}\n      >\n        {itemElement}\n      </DragSource>\n    ) : (\n      itemElement\n    ));\n  }\n}\n\nItemLayout.propTypes = {\n  item: PropTypes.shape({\n    column: PropTypes.object,\n    draft: PropTypes.bool,\n  }).isRequired,\n  itemComponent: PropTypes.func.isRequired,\n  draggingEnabled: PropTypes.bool,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func,\n};\n\nItemLayout.defaultProps = {\n  draggingEnabled: false,\n  onDragStart: () => {},\n  onDragEnd: () => {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport { DropTarget } from '@devexpress/dx-react-core';\nimport { getGroupCellTargetIndex } from '@devexpress/dx-grid-core';\nimport { ItemLayout } from './group-panel-layout/item-layout';\n\nexport class GroupPanelLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    };\n    this.handleDragEvent = (eventHandler, { payload, ...restArgs }) => {\n      const { isColumnGroupingEnabled } = this.props;\n      const { columnName } = payload[0];\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler({ payload, ...restArgs });\n      }\n    };\n    this.onEnter = ({ payload }) => {\n      this.setState({\n        sourceColumnName: payload[0].columnName,\n      });\n    };\n    this.onOver = ({ clientOffset }) => {\n      const { onGroupDraft, items } = this.props;\n      const { sourceColumnName, targetItemIndex: prevTargetItemIndex } = this.state;\n      // eslint-disable-next-line react/no-find-dom-node\n      const itemGeometries = this.itemRefs.map(ref => findDOMNode(ref).getBoundingClientRect());\n      const sourceItemIndex = items.findIndex(({ column }) => column.name === sourceColumnName);\n      const targetItemIndex = getGroupCellTargetIndex(\n        itemGeometries,\n        sourceItemIndex,\n        clientOffset,\n      );\n\n      if (prevTargetItemIndex === targetItemIndex) return;\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n      this.setState({ targetItemIndex });\n    };\n    this.onLeave = () => {\n      const { onGroupDraft } = this.props;\n      const { sourceColumnName } = this.state;\n      if (!this.draggingColumnName) {\n        this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1,\n      });\n      this.setState({\n        targetItemIndex: -1,\n      });\n    };\n    this.onDrop = () => {\n      const { onGroup } = this.props;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n    };\n    this.onDragStart = (columnName) => {\n      this.draggingColumnName = columnName;\n    };\n    this.onDragEnd = () => {\n      this.draggingColumnName = null;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      const { onGroup } = this.props;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName,\n        });\n      }\n      this.resetState();\n    };\n  }\n\n  resetState() {\n    const { onGroupDraftCancel } = this.props;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    });\n  }\n\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n      draggingEnabled,\n      isColumnGroupingEnabled,\n    } = this.props;\n\n    this.itemRefs = [];\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              ref={element => element && this.itemRefs.push(element)}\n              item={item}\n              itemComponent={Item}\n              draggingEnabled={draggingEnabled && isColumnGroupingEnabled(columnName)}\n              onDragStart={() => this.onDragStart(columnName)}\n              onDragEnd={this.onDragEnd}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return draggingEnabled\n      ? (\n        <DropTarget\n          onEnter={args => this.handleDragEvent(this.onEnter, args)}\n          onOver={args => this.handleDragEvent(this.onOver, args)}\n          onLeave={args => this.handleDragEvent(this.onLeave, args)}\n          onDrop={args => this.handleDragEvent(this.onDrop, args)}\n        >\n          {groupPanel}\n        </DropTarget>\n      )\n      : groupPanel;\n  }\n}\n\nGroupPanelLayout.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    column: PropTypes.object,\n    draft: PropTypes.bool,\n  })).isRequired,\n  onGroup: PropTypes.func,\n  itemComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  emptyMessageComponent: PropTypes.func.isRequired,\n  draggingEnabled: PropTypes.bool,\n  isColumnGroupingEnabled: PropTypes.func,\n  onGroupDraft: PropTypes.func,\n  onGroupDraftCancel: PropTypes.func,\n};\n\nGroupPanelLayout.defaultProps = {\n  onGroup: () => {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: () => {},\n  onGroupDraft: () => {},\n  onGroupDraftCancel: () => {},\n};\n"],"names":["GridCore","props","rows","columns","getRowId","getCellValue","Root","rootComponent","restProps","React.createElement","rowIdGetter","cellValueGetter","React","propTypes","PropTypes","isRequired","defaultProps","undefined","Grid","children","pluginDependencies","name","ColumnChooser","state","handleToggle","bind","handleHide","setButtonRef","button","visible","setState","Overlay","overlayComponent","Container","containerComponent","Item","itemComponent","ToggleButton","toggleButtonComponent","messages","getMessage","getMessagesFormatter","hiddenColumnNames","isColumnTogglingEnabled","toggleColumnVisibility","map","item","columnName","column","togglingEnabled","columnExtensionValueGetter","columnExtensions","defaultValue","getColumnExtensionValueGetter","filterExpressionComputed","filters","filterExpressionValue","filterExpression","FilteringState","onFiltersChange","defaultFilters","stateHelper","createStateHelper","changeColumnFilter","applyFieldReducer","columnFilteringEnabled","nextProps","prevState","optional","getCollapsedRowsComputed","filteredCollapsedRowsGetter","unwrappedRowsComputed","unwrappedFilteredRows","IntegratedFiltering","getColumnPredicate","getColumnExtension","predicate","rowsComputed","getRowLevelKey","getCollapsedRows","filteredRows","defaultPredicate","defaultFilterPredicate","EditingState","rowChanges","defaultRowChanges","addedRows","defaultAddedRows","getRowChanges","stateRowChanges","getAddedRows","stateAddedRows","editingRowIds","defaultEditingRowIds","deletedRowIds","defaultDeletedRowIds","onEditingRowIdsChange","onAddedRowsChange","onRowChangesChange","onDeletedRowIdsChange","onCommitChanges","startEditRows","stopEditRows","changeRow","cancelChangedRows","cancelChanges","commitChangedRows","rowIds","changedRowsByIds","addRow","changeAddedRow","cancelAddedRows","commitAddedRows","addedRowsByIds","deleteRows","cancelDeletedRows","commitDeletedRows","deleted","createRowChange","columnEditingEnabled","createRowChangeGetter","PagingState","onCurrentPageChange","onPageSizeChange","currentPage","defaultCurrentPage","pageSize","defaultPageSize","setCurrentPage","setPageSize","rowsWithHeadersComputed","rowsWithPageHeaders","totalCountComputed","rowCount","paginatedRowsComputed","page","paginatedRows","currentPageComputed","totalCount","IntegratedPaging","CustomPaging","dependencies","GroupingState","onGroupingChange","onExpandedGroupsChange","grouping","defaultGrouping","expandedGroups","defaultExpandedGroups","changeColumnGrouping","toggleGroupExpanded","applyReducer","toggleExpandedGroups","draftColumnGrouping","cancelColumnGroupingDraft","changeColumnSorting","sorting","keepOther","restParams","groupingIndex","findIndex","columnGrouping","sortIndex","adjustSortIndex","getters","actions","groupIndex","nextState","prevGrouping","columnSortingIndex","columnSorting","prevGroupingIndex","length","draftGrouping","columnGroupingEnabled","groupCollapsedRowsGetter","expandedGroupedRowsComputed","expandedGroupRows","IntegratedGrouping","getColumnCriteria","criteria","groupedRowsComputed","groupedRows","groupRowChecker","groupRowLevelKeyGetter","getRowIdComputed","customGroupingRowIdGetter","CustomGrouping","getChildGroups","appliedGrouping","appliedExpandedGroups","customGroupedRows","SelectionState","onSelectionChange","selection","defaultSelection","toggleSelection","rowsWithAvailableToSelectComputed","isGroupRow","rowsWithAvailableToSelect","allSelectedComputed","allSelected","someSelectedComputed","someSelected","selectAllAvailableComputed","availableToSelect","toggleSelectAll","unwrapRowsComputed","unwrapSelectedRows","IntegratedSelection","SortingState","defaultSorting","onSortingChange","persistentSortedColumns","getPersistentSortedColumns","payload","calculateKeepOther","columnSortingEnabled","IntegratedSorting","getColumnCompare","compare","sortedRows","getTargetColumns","filter","type","find","DragDropProvider","change","clientOffset","Column","columnComponent","tableHeaderRowsComputed","tableHeaderRows","tableHeaderRowsWithReordering","TableColumnReordering","defaultOrder","onOver","handleOver","onLeave","handleLeave","onDrop","handleDrop","orderState","order","getState","sourceColumnIndex","targetColumnIndex","draftOrderComputed","getDraftOrder","cellDimensionGetters","cellDimensions","getAvailableColumns","tableColumns","keys","forEach","columnIndex","TABLE_DATA_TYPE","tableColumn","getter","ensureCellDimensionGetters","x","sourceColumnName","availableColumns","relativeSourceColumnIndex","indexOf","cacheCellDimensions","overlappedColumns","left","right","relativeTargetIndex","getTableTargetColumnIndex","prevSourceColumnIndex","prevTargetColumnIndex","draftOrder","resetCellDimensions","onOrderChange","nextOrder","changeColumnOrder","tableContainerComponent","Row","rowComponent","Cell","cellComponent","columnsComputed","orderedColumns","params","tableRow","TABLE_REORDERING_TYPE","storeCellDimensionsGetter","RowPlaceholder","CellPlaceholder","tableBodyRowsComputed","tableRowsWithDataRows","tableFooterRows","Table","Layout","layoutComponent","NoDataRow","noDataRowComponent","NoDataCell","noDataCellComponent","StubRow","stubRowComponent","StubCell","stubCellComponent","StubHeaderCell","stubHeaderCellComponent","tableComponent","headComponent","bodyComponent","footerComponent","tableColumnsComputed","tableColumnsWithDataRows","tableCellColSpanGetter","headerRows","bodyRows","tableBodyRows","footerRows","getTableCellColSpan","isHeaderStubTableCell","isDataTableCell","value","row","isNoDataTableRow","isNoDataTableCell","isDataTableRow","TableSelection","highlightRow","selectByRowClick","showSelectionColumn","showSelectAll","HeaderCell","headerCellComponent","selectionColumnWidth","tableColumnsWithSelection","isSelectAllTableCell","selectAllAvailable","select","isSelectTableCell","rowId","RowDetailState","onExpandedRowIdsChange","expandedRowIds","defaultExpandedRowIds","toggleDetailRowExpanded","getCellColSpanComputed","tableDetailCellColSpanGetter","TableRowDetail","rowHeight","Content","contentComponent","ToggleCell","toggleCellComponent","toggleColumnWidth","tableColumnsWithDetail","expandedDetailRowIds","tableRowsWithExpandedDetail","isDetailToggleTableCell","isDetailRowExpanded","isDetailTableRow","isDetailTableCell","tableRowsWithGrouping","tableGroupCellColSpanGetter","showColumnWhenGroupedGetter","showColumnsWhenGrouped","reduce","acc","columnExtension","showWhenGrouped","TableGroupRow","GroupCell","GroupRow","GroupIndentCell","indentCellComponent","indentColumnWidth","tableColumnsWithGrouping","isGroupTableRow","isGroupTableCell","compoundKey","groupKey","isGroupIndentTableCell","tableRowsWithHeading","TableHeaderRow","showSortingControls","showGroupingControls","HeaderRow","isHeadingTableCell","draggingEnabled","tableColumnResizingEnabled","isColumnSortingEnabled","isColumnGroupingEnabled","changeTableColumnWidth","draftTableColumnWidth","cancelTableColumnWidthDraft","atLeastOneDataColumn","sortingEnabled","groupingEnabled","getColumnSortingDirection","direction","shift","isHeadingTableRow","TableBandHeader","bandedHeaderCellComponent","InvisibleCell","invisibleCellComponent","columnBands","tableRowsWithBands","isBandedOrHeaderRow","bandComponent","getBandComponent","BAND_DUPLICATE_RENDER","BAND_EMPTY_CELL","BAND_GROUP_CELL","BAND_HEADER_CELL","isBandedTableRow","TableFilterRow","showFilterSelector","FilterCell","FilterRow","FilterSelector","filterSelectorComponent","iconComponent","EditorComponent","editorComponent","tableHeaderRowsWithFilter","isFilterTableCell","isColumnFilteringEnabled","getAvailableFilterOperations","filterOperations","getColumnFilterConfig","onFilter","config","columnFilterOperations","getColumnFilterOperations","selectedFilterOperation","handleFilterOperationChange","isFilterValueEmpty","operation","handleFilterValueChange","filteringEnabled","isFilterTableRow","TableEditRow","EditCell","EditRow","tableRowsWithEditing","isEditTableCell","isColumnEditingEnabled","isNew","isAddedTableRow","changedRow","getRowChange","onValueChange","newValue","changeArgs","isEditTableRow","TableEditColumn","Command","commandComponent","showAddCommand","showEditCommand","showDeleteCommand","width","tableColumnsWithEditing","isHeadingEditCommandsTableCell","isEditCommandsTableCell","isEdit","isEditing","TableColumnResizing","columnWidths","defaultColumnWidths","onColumnWidthsChange","minColumnWidth","memoize","tableColumnsWithWidths","tableColumnsDraftComputed","tableColumnsWithDraftWidths","draftColumnWidths","PagingPanel","Pager","pageSizes","pageCount","GroupingPanel","EmptyMessage","emptyMessageComponent","EmptyMessagePlaceholder","ItemPlaceholder","groupingPanelItems","DataTypeProvider","columnNames","for","Formatter","formatterComponent","Editor","availableFilterOperations","getAvailableFilterOperationsComputed","getAvailableFilterOperationsGetter","includes","visibleTableColumnsComputed","visibleTableColumns","TableColumnVisibility","onHiddenColumnNamesChange","defaultHiddenColumnNames","toggleColumn","columnTogglingEnabled","tableDataColumnsExist","Toolbar","FlexibleSpaceComponent","flexibleSpaceComponent","TreeDataState","toggleRowExpanded","expandedTreeRowsComputed","expandedTreeRows","customTreeRowIdGetter","getRowLevelKeyComputed","customTreeRowLevelKeyGetter","isTreeRowLeafComputed","isTreeRowLeafGetter","getTreeRowLevelComputed","getTreeRowLevelGetter","collapsedTreeRowsGetterComputed","collapsedTreeRowsGetter","unwrappedTreeRowsComputed","unwrappedCustomTreeRows","CustomTreeData","getChildRows","treeRowsComputed","customTreeRowsWithMeta","TableTreeColumn","forColumnName","showSelectionControls","Indent","indentComponent","ExpandButton","expandButtonComponent","Checkbox","checkboxComponent","isTreeTableCell","isTreeRowLeaf","getTreeRowLevel","collapsedRows","SearchState","changeValue","changeSearchValue","searchFilterExpression","SearchPanel","Input","inputComponent","searchValue","SummaryState","totalItems","groupItems","treeItems","IntegratedSummary","calculator","totalSummaryValuesComputed","totalSummaryItems","totalSummaryValues","groupSummaryValuesComputed","groupSummaryItems","groupSummaryValues","treeSummaryValuesComputed","treeSummaryItems","treeSummaryValues","defaultCalculator","defaultSummaryCalculator","CustomSummary","totalValues","groupValues","treeValues","tableRowsWithSummaries","tableFooterRowsComputed","tableRowsWithTotalSummaries","defaultTypelessSummaries","TableSummaryRow","columnSummaries","formatlessSummaryTypes","summary","String","TotalRow","totalRowComponent","groupRowComponent","TreeRow","treeRowComponent","TotalCell","totalCellComponent","groupCellComponent","TreeCell","treeCellComponent","TreeColumnCell","treeColumnCellComponent","TreeColumnContent","treeColumnContentComponent","TreeColumnIndent","treeColumnIndentComponent","isTotalSummaryTableCell","getColumnSummaries","renderCellContent","isGroupSummaryTableCell","isTreeSummaryTableCell","tableTreeColumnName","isTotalSummaryTableRow","isGroupSummaryTableRow","isTreeSummaryTableRow","TABLE_FLEX_TYPE","TableLayout","Map","animations","tableNode","setRef","ref","prevProps","prevColumns","tableWidth","findDOMNode","scrollWidth","getAnimations","raf","requestAnimationFrame","processAnimationFrame","animationState","result","isFixedWidth","slice","push","key","size","has","get","animationComponentState","filterActiveAnimations","evalAnimations","getColumns","minWidth","ColumnGroup","AUTO_HEIGHT","VirtualTableLayout","headerHeight","getRowHeight","bodyHeight","footerHeight","rowRefs","blockRefs","registerRowRef","updateViewport","storeRowHeights","storeBloksHeights","rowHeights","estimatedRowHeight","storedHeight","height","rowsWithChangedHeights","Array","from","entries","node","getBoundingClientRect","set","prevHeaderHeight","prevBodyHeight","prevFooterHeight","delete","e","target","currentTarget","scrollTop","scrollLeft","clientWidth","Math","max","clientHeight","scrollHeight","collapsedGrid","Body","marginBottom","registerBlockRef","visibleRow","cells","cell","colSpan","propHeight","HeadTable","headTableComponent","FootTable","footerTableComponent","Head","Footer","getCellColSpan","viewportLeft","viewportTop","getColSpan","collapsedHeaderGrid","getCollapsedGrid","collapsedBodyGrid","collapsedFooterGrid","renderRowsBlock","prevRowHeight","getColumnStyle","getRowStyle","RowLayout","RowsBlockLayout","Block","blockComponent","StaticTableLayout","ItemLayout","onDragStart","onDragEnd","dragging","itemElement","draft","GroupPanelLayout","handleDragEvent","eventHandler","restArgs","onEnter","onGroupDraft","items","prevTargetItemIndex","targetItemIndex","itemGeometries","itemRefs","sourceItemIndex","getGroupCellTargetIndex","draggingColumnName","resetState","onGroup","onGroupDraftCancel","groupPanel","element","args"],"mappings":"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"}