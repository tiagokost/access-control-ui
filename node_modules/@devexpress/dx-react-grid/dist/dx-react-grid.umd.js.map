{"version":3,"file":"dx-react-grid.umd.js","sources":["../src/plugins/grid-core.jsx","../src/grid.jsx","../src/plugins/column-chooser.jsx","../src/plugins/filtering-state.jsx","../src/plugins/integrated-filtering.jsx","../src/plugins/editing-state.jsx","../src/plugins/paging-state.jsx","../src/plugins/integrated-paging.jsx","../src/plugins/custom-paging.jsx","../src/plugins/grouping-state.jsx","../src/plugins/integrated-grouping.jsx","../src/plugins/custom-grouping.jsx","../src/plugins/selection-state.jsx","../src/plugins/integrated-selection.jsx","../src/plugins/sorting-state.jsx","../src/plugins/integrated-sorting.jsx","../src/plugins/drag-drop-provider.jsx","../src/plugins/table-column-reordering.jsx","../src/plugins/table.jsx","../src/plugins/table-selection.jsx","../src/plugins/row-detail-state.jsx","../src/plugins/table-row-detail.jsx","../src/plugins/table-group-row.jsx","../src/plugins/table-header-row.jsx","../src/plugins/table-band-header.jsx","../src/plugins/table-filter-row.jsx","../src/plugins/table-edit-row.jsx","../src/plugins/table-edit-column.jsx","../src/plugins/table-column-resizing.jsx","../src/plugins/paging-panel.jsx","../src/plugins/grouping-panel.jsx","../src/plugins/data-type-provider.jsx","../src/plugins/table-column-visibility.jsx","../src/plugins/toolbar.jsx","../src/plugins/tree-data-state.jsx","../src/plugins/custom-tree-data.jsx","../src/plugins/table-tree-column.jsx","../src/plugins/search-state.jsx","../src/plugins/search-panel.jsx","../src/plugins/summary-state.jsx","../src/plugins/integrated-summary.jsx","../src/plugins/custom-summary.jsx","../src/plugins/table-summary-row.jsx","../src/components/table-layout.jsx","../src/components/table-layout/column-group.jsx","../src/components/table-layout/virtual-table-layout.jsx","../src/components/table-layout/row-layout.jsx","../src/components/table-layout/rows-block-layout.jsx","../src/components/table-layout/static-table-layout.jsx","../src/components/group-panel-layout/item-layout.jsx","../src/components/group-panel-layout.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\n\nexport class GridCore extends React.PureComponent {\n  render() {\n    const {\n      rows,\n      columns,\n      getRowId,\n      getCellValue,\n      rootComponent: Root,\n      ...restProps\n    } = this.props;\n\n    return (\n      <Plugin>\n        <Getter name=\"rows\" value={rows} />\n        <Getter name=\"getRowId\" value={rowIdGetter(getRowId, rows)} />\n        <Getter name=\"columns\" value={columns} />\n        <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue, columns)} />\n        <Template name=\"root\">\n          <Root {...restProps}>\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nGridCore.propTypes = {\n  rows: PropTypes.array.isRequired,\n  getRowId: PropTypes.func,\n  getCellValue: PropTypes.func,\n  columns: PropTypes.array.isRequired,\n  rootComponent: PropTypes.func.isRequired,\n};\n\nGridCore.defaultProps = {\n  getRowId: undefined,\n  getCellValue: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { GridCore } from './plugins/grid-core';\n\nexport const Grid = ({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n  rootComponent,\n  children,\n  ...restProps\n}) => (\n  <PluginHost>\n    <GridCore\n      rows={rows}\n      columns={columns}\n      getRowId={getRowId}\n      getCellValue={getCellValue}\n      rootComponent={rootComponent}\n      {...restProps}\n    />\n    {children}\n  </PluginHost>\n);\n\nGrid.propTypes = {\n  rows: PropTypes.array.isRequired,\n  getRowId: PropTypes.func,\n  getCellValue: PropTypes.func,\n  columns: PropTypes.array.isRequired,\n  rootComponent: PropTypes.func.isRequired,\n  children: PropTypes.node,\n};\n\nGrid.defaultProps = {\n  getRowId: undefined,\n  getCellValue: undefined,\n  children: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter, columnChooserItems } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'TableColumnVisibility' },\n  { name: 'Toolbar' },\n];\nexport class ColumnChooser extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n    this.setButtonRef = this.setButtonRef.bind(this);\n  }\n\n  setButtonRef(button) {\n    this.button = button;\n  }\n\n  handleToggle() {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n    const { visible } = this.state;\n\n    return (\n      <Plugin\n        name=\"ColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {(\n              { columns, hiddenColumnNames, isColumnTogglingEnabled },\n              { toggleColumnVisibility },\n            ) => (\n              <React.Fragment>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                  active={visible}\n                />\n                <Overlay\n                  visible={visible}\n                  target={this.button}\n                  onHide={this.handleHide}\n                >\n                  <Container>\n                    {columnChooserItems(columns, hiddenColumnNames)\n                      .map((item) => {\n                        const { name: columnName } = item.column;\n                        const togglingEnabled = isColumnTogglingEnabled(columnName);\n                        return (\n                          <Item\n                            key={columnName}\n                            item={item}\n                            disabled={!togglingEnabled}\n                            onToggle={() => toggleColumnVisibility(columnName)}\n                          />\n                        );\n                      })}\n                  </Container>\n                </Overlay>\n              </React.Fragment>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nColumnChooser.propTypes = {\n  overlayComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  itemComponent: PropTypes.func.isRequired,\n  toggleButtonComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nColumnChooser.defaultProps = {\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue },\n) => filterExpression(filters, filterExpressionValue);\n\nexport class FilteringState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onFiltersChange } = this.props;\n\n    this.state = {\n      filters: props.filters || props.defaultFilters,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        filters: () => onFiltersChange,\n      },\n    );\n\n    this.changeColumnFilter = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'filters', changeColumnFilter);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      filters = prevState.filters,\n    } = nextProps;\n\n    return {\n      filters,\n    };\n  }\n\n  render() {\n    const { filters } = this.state;\n    const { columnExtensions, columnFilteringEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"FilteringState\"\n      >\n        <Getter name=\"filters\" value={filters} />\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </Plugin>\n    );\n  }\n}\n\nFilteringState.propTypes = {\n  filters: PropTypes.array,\n  defaultFilters: PropTypes.array,\n  onFiltersChange: PropTypes.func,\n  columnExtensions: PropTypes.array,\n  columnFilteringEnabled: PropTypes.bool,\n};\n\nFilteringState.defaultProps = {\n  filters: undefined,\n  defaultFilters: [],\n  onFiltersChange: undefined,\n  columnExtensions: undefined,\n  columnFilteringEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  filteredRows,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  getColumnExtension,\n  defaultFilterPredicate,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'FilteringState', optional: true },\n  { name: 'SearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }) => unwrappedFilteredRows(rows);\n\nexport class IntegratedFiltering extends React.PureComponent {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnPredicate = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={unwrappedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedFiltering.defaultPredicate = defaultFilterPredicate;\n\nIntegratedFiltering.propTypes = {\n  columnExtensions: PropTypes.array,\n};\n\nIntegratedFiltering.defaultProps = {\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nexport class EditingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const rowChanges = props.rowChanges || props.defaultRowChanges;\n    const addedRows = props.addedRows || props.defaultAddedRows;\n    const getRowChanges = () => {\n      const { rowChanges: stateRowChanges } = this.state;\n      return stateRowChanges;\n    };\n    const getAddedRows = () => {\n      const { addedRows: stateAddedRows } = this.state;\n      return stateAddedRows;\n    };\n\n    this.state = {\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      addedRows,\n      rowChanges,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n    };\n\n    const {\n      onEditingRowIdsChange, onAddedRowsChange, onRowChangesChange,\n      onDeletedRowIdsChange, onCommitChanges,\n    } = this.props;\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        editingRowIds: () => onEditingRowIdsChange,\n        addedRows: () => onAddedRowsChange,\n        rowChanges: () => onRowChangesChange,\n        deletedRowIds: () => onDeletedRowIdsChange,\n      },\n    );\n\n    this.startEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', startEditRows);\n    this.stopEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', stopEditRows);\n\n    this.changeRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', changeRow);\n    this.cancelChangedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', cancelChanges);\n    this.commitChangedRows = ({ rowIds }) => {\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds),\n      });\n      this.cancelChangedRows({ rowIds });\n    };\n\n    this.addRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', addRow);\n    this.changeAddedRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', changeAddedRow);\n    this.cancelAddedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', cancelAddedRows);\n    this.commitAddedRows = ({ rowIds }) => {\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds),\n      });\n      this.cancelAddedRows({ rowIds });\n    };\n\n    this.deleteRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', deleteRows);\n    this.cancelDeletedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    this.commitDeletedRows = ({ rowIds }) => {\n      onCommitChanges({ deleted: rowIds });\n      this.cancelDeletedRows({ rowIds });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingRowIds = prevState.editingRowIds,\n      rowChanges = prevState.rowChanges,\n      addedRows = prevState.addedRows,\n      deletedRowIds = prevState.deletedRowIds,\n    } = nextProps;\n\n    return {\n      editingRowIds,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    };\n  }\n\n  render() {\n    const { createRowChange, columnExtensions, columnEditingEnabled } = this.props;\n    const {\n      editingRowIds, rowChanges, addedRows, deletedRowIds,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <Getter name=\"editingRowIds\" value={editingRowIds} />\n        <Action name=\"startEditRows\" action={this.startEditRows} />\n        <Action name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <Getter name=\"rowChanges\" value={rowChanges} />\n        <Action name=\"changeRow\" action={this.changeRow} />\n        <Action name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <Action name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <Getter name=\"addedRows\" value={addedRows} />\n        <Action name=\"addRow\" action={this.addRow} />\n        <Action name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <Action name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <Action name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <Getter name=\"deletedRowIds\" value={deletedRowIds} />\n        <Action name=\"deleteRows\" action={this.deleteRows} />\n        <Action name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <Action name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <Getter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </Plugin>\n    );\n  }\n}\n\nEditingState.propTypes = {\n  createRowChange: PropTypes.func,\n  columnEditingEnabled: PropTypes.bool,\n  columnExtensions: PropTypes.array,\n\n  editingRowIds: PropTypes.array,\n  defaultEditingRowIds: PropTypes.array,\n  onEditingRowIdsChange: PropTypes.func,\n\n  addedRows: PropTypes.array,\n  defaultAddedRows: PropTypes.array,\n  onAddedRowsChange: PropTypes.func,\n\n  rowChanges: PropTypes.object,\n  defaultRowChanges: PropTypes.object,\n  onRowChangesChange: PropTypes.func,\n\n  deletedRowIds: PropTypes.array,\n  defaultDeletedRowIds: PropTypes.array,\n  onDeletedRowIdsChange: PropTypes.func,\n\n  onCommitChanges: PropTypes.func.isRequired,\n};\n\nEditingState.defaultProps = {\n  createRowChange: undefined,\n  columnEditingEnabled: true,\n  columnExtensions: undefined,\n\n  editingRowIds: undefined,\n  defaultEditingRowIds: [],\n  onEditingRowIdsChange: undefined,\n\n  rowChanges: undefined,\n  defaultRowChanges: {},\n  onRowChangesChange: undefined,\n\n  addedRows: undefined,\n  defaultAddedRows: [],\n  onAddedRowsChange: undefined,\n\n  deletedRowIds: undefined,\n  defaultDeletedRowIds: [],\n  onDeletedRowIdsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\n\nexport class PagingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onCurrentPageChange, onPageSizeChange } = this.props;\n\n    this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        currentPage: () => onCurrentPageChange,\n        pageSize: () => onPageSizeChange,\n      },\n    );\n\n    this.setCurrentPage = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentPage', setCurrentPage);\n    this.setPageSize = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'pageSize', setPageSize);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentPage = prevState.currentPage,\n      pageSize = prevState.pageSize,\n    } = nextProps;\n\n    return {\n      currentPage,\n      pageSize,\n    };\n  }\n\n  render() {\n    const { pageSize, currentPage } = this.state;\n\n    return (\n      <Plugin\n        name=\"PagingState\"\n      >\n        <Getter name=\"currentPage\" value={currentPage} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Action name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <Action name=\"setPageSize\" action={this.setPageSize} />\n      </Plugin>\n    );\n  }\n}\n\nPagingState.propTypes = {\n  pageSize: PropTypes.number,\n  defaultPageSize: PropTypes.number,\n  onPageSizeChange: PropTypes.func,\n  currentPage: PropTypes.number,\n  defaultCurrentPage: PropTypes.number,\n  onCurrentPageChange: PropTypes.func,\n};\n\nPagingState.defaultProps = {\n  pageSize: undefined,\n  defaultPageSize: 10,\n  onPageSizeChange: undefined,\n  currentPage: undefined,\n  defaultCurrentPage: 0,\n  onCurrentPageChange: undefined,\n};\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey },\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page },\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }, { setCurrentPage },\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class IntegratedPaging extends React.PureComponent {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <Getter name=\"totalCount\" computed={totalCountComputed} />\n        <Getter name=\"currentPage\" computed={currentPageComputed} />\n        <Getter name=\"rows\" computed={paginatedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nexport class CustomPaging extends React.PureComponent {\n  render() {\n    const { totalCount } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalCount\" value={totalCount} />\n      </Plugin>\n    );\n  }\n}\n\nCustomPaging.propTypes = {\n  totalCount: PropTypes.number,\n};\n\nCustomPaging.defaultProps = {\n  totalCount: 0,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  draftColumnGrouping,\n  cancelColumnGroupingDraft,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n} from '@devexpress/dx-grid-core';\n\nconst dependencies = [\n  { name: 'SortingState', optional: true },\n];\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nexport class GroupingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onGroupingChange, onExpandedGroupsChange } = this.props;\n\n    this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        grouping: () => onGroupingChange,\n        expandedGroups: () => onExpandedGroupsChange,\n      },\n    );\n\n    this.changeColumnGrouping = this.changeColumnGrouping.bind(this);\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n    this.draftColumnGrouping = this.stateHelper.applyReducer\n      .bind(this.stateHelper, draftColumnGrouping);\n    this.cancelColumnGroupingDraft = this.stateHelper.applyReducer\n      .bind(this.stateHelper, cancelColumnGroupingDraft);\n    this.changeColumnSorting = this.changeColumnSorting.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return {\n      grouping,\n      expandedGroups,\n    };\n  }\n\n  changeColumnSorting(\n    { columnName, keepOther, ...restParams },\n    { sorting },\n    { changeColumnSorting },\n  ) {\n    const { grouping } = this.state;\n    const groupingIndex = grouping\n      .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n    if (groupingIndex === -1) {\n      changeColumnSorting({\n        columnName,\n        keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n        ...restParams,\n      });\n      return false;\n    }\n\n    const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting({\n      columnName,\n      keepOther: true,\n      sortIndex,\n      ...restParams,\n    });\n    return false;\n  }\n\n  changeColumnGrouping({ columnName, groupIndex }, getters, actions) {\n    this.stateHelper.applyReducer(\n      changeColumnGrouping,\n      { columnName, groupIndex },\n      (nextState, state) => {\n        const { grouping } = nextState;\n        const { grouping: prevGrouping } = state;\n        const { sorting } = getters;\n        const { changeColumnSorting } = actions;\n\n        if (!sorting) return;\n\n        const columnSortingIndex = sorting\n          .findIndex(columnSorting => columnSorting.columnName === columnName);\n        const prevGroupingIndex = prevGrouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n        const groupingIndex = grouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n        if (columnSortingIndex === -1\n          || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n        const sortIndex = adjustSortIndex(\n          groupingIndex === -1 ? grouping.length : groupingIndex,\n          grouping,\n          sorting,\n        );\n\n        if (columnSortingIndex === sortIndex) return;\n\n        changeColumnSorting({\n          keepOther: true,\n          sortIndex,\n          ...sorting[columnSortingIndex],\n        });\n      },\n    );\n  }\n\n  render() {\n    const { grouping, draftGrouping, expandedGroups } = this.state;\n    const { columnExtensions, columnGroupingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingState\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"draftGrouping\" value={draftGrouping || grouping} />\n        <Getter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <Action name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <Action name=\"draftColumnGrouping\" action={this.draftColumnGrouping} />\n        <Action name=\"cancelColumnGroupingDraft\" action={this.cancelColumnGroupingDraft} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\nGroupingState.propTypes = {\n  grouping: PropTypes.array,\n  defaultGrouping: PropTypes.array,\n  onGroupingChange: PropTypes.func,\n  expandedGroups: PropTypes.array,\n  defaultExpandedGroups: PropTypes.array,\n  onExpandedGroupsChange: PropTypes.func,\n  columnExtensions: PropTypes.array,\n  columnGroupingEnabled: PropTypes.bool,\n};\n\nGroupingState.defaultProps = {\n  grouping: undefined,\n  defaultGrouping: [],\n  onGroupingChange: undefined,\n  expandedGroups: undefined,\n  defaultExpandedGroups: [],\n  onExpandedGroupsChange: undefined,\n  columnExtensions: undefined,\n  columnGroupingEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows },\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups },\n) => expandedGroupRows(rows, grouping, expandedGroups);\n\nexport class IntegratedGrouping extends React.PureComponent {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCriteria = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue },\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <Plugin\n        name=\"IntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedGrouping.propTypes = {\n  columnExtensions: PropTypes.array,\n};\n\nIntegratedGrouping.defaultProps = {\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows },\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups },\n) => expandedGroupRows(rows, grouping, expandedGroups);\nconst getRowIdComputed = ({ getRowId, rows }) => customGroupingRowIdGetter(getRowId, rows);\n\nexport class CustomGrouping extends React.PureComponent {\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this.props;\n    const groupedRowsComputed = (\n      { rows, grouping },\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n\n    return (\n      <Plugin\n        name=\"CustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        {appliedGrouping && (\n          <Getter name=\"grouping\" value={appliedGrouping} />\n        )}\n        {appliedExpandedGroups && (\n          <Getter name=\"expandedGroups\" value={appliedExpandedGroups} />\n        )}\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nCustomGrouping.propTypes = {\n  getChildGroups: PropTypes.func.isRequired,\n  grouping: PropTypes.array,\n  expandedGroups: PropTypes.array,\n};\n\nCustomGrouping.defaultProps = {\n  grouping: undefined,\n  expandedGroups: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\n\nexport class SelectionState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onSelectionChange } = this.props;\n\n    this.state = {\n      selection: props.selection || props.defaultSelection,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        selection: () => onSelectionChange,\n      },\n    );\n\n    this.toggleSelection = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'selection', toggleSelection);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      selection = prevState.selection,\n    } = nextProps;\n\n    return {\n      selection,\n    };\n  }\n\n  render() {\n    const { selection } = this.state;\n\n    return (\n      <Plugin\n        name=\"SelectionState\"\n      >\n        <Getter name=\"selection\" value={selection} />\n        <Action name=\"toggleSelection\" action={this.toggleSelection} />\n      </Plugin>\n    );\n  }\n}\n\nSelectionState.propTypes = {\n  selection: PropTypes.array,\n  defaultSelection: PropTypes.array,\n  onSelectionChange: PropTypes.func,\n};\n\nSelectionState.defaultProps = {\n  selection: undefined,\n  defaultSelection: [],\n  onSelectionChange: undefined,\n};\n","import * as React from 'react';\nimport { Getter, Action, Plugin } from '@devexpress/dx-react-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow },\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }) => someSelected(rows, selection);\nconst selectAllAvailableComputed = ({ rows: { availableToSelect } }) => !!availableToSelect.length;\nconst toggleSelectAll = (state, { rows: { availableToSelect } }, { toggleSelection }) => {\n  toggleSelection({ rowIds: availableToSelect, state });\n};\nconst unwrapRowsComputed = ({ rows }) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'SelectionState' },\n];\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class IntegratedSelection extends React.PureComponent {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <Getter name=\"allSelected\" computed={allSelectedComputed} />\n        <Getter name=\"someSelected\" computed={someSelectedComputed} />\n        <Getter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <Action name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <Getter name=\"rows\" computed={unwrapRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n} from '@devexpress/dx-grid-core';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n\nexport class SortingState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const sorting = props.sorting || props.defaultSorting;\n    const { onSortingChange } = props;\n\n    this.state = {\n      sorting,\n    };\n\n    const persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        sorting: () => onSortingChange,\n      },\n    );\n\n    this.changeColumnSorting = stateHelper.applyReducer\n      .bind(stateHelper, (prevState, payload) => {\n        const keepOther = calculateKeepOther(\n          prevState.sorting, payload.keepOther, persistentSortedColumns,\n        );\n        return changeColumnSorting(prevState, { ...payload, keepOther });\n      });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sorting = prevState.sorting,\n    } = nextProps;\n\n    return {\n      sorting,\n    };\n  }\n\n  render() {\n    const { sorting } = this.state;\n    const { columnExtensions, columnSortingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"SortingState\"\n      >\n        <Getter name=\"sorting\" value={sorting} />\n        <Getter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\nSortingState.propTypes = {\n  sorting: PropTypes.array,\n  defaultSorting: PropTypes.array,\n  onSortingChange: PropTypes.func,\n  columnExtensions: PropTypes.array,\n  columnSortingEnabled: PropTypes.bool,\n};\n\nSortingState.defaultProps = {\n  sorting: undefined,\n  defaultSorting: [],\n  onSortingChange: undefined,\n  columnExtensions: undefined,\n  columnSortingEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'SortingState' },\n];\n\nexport class IntegratedSorting extends React.PureComponent {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCompare = columnName => getColumnExtension(columnExtensions, columnName).compare;\n\n    const rowsComputed = ({\n      rows, sorting, getCellValue, isGroupRow, getRowLevelKey,\n    }) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <Plugin\n        name=\"IntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedSorting.propTypes = {\n  columnExtensions: PropTypes.array,\n};\n\nIntegratedSorting.defaultProps = {\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n  TemplateConnector,\n  DragDropProvider as DragDropProviderCore,\n} from '@devexpress/dx-react-core';\n\nconst getTargetColumns = (payload, columns) => payload\n  .filter(item => item.type === 'column')\n  .map(item => columns.find(column => column.name === item.columnName));\n\nexport class DragDropProvider extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      payload: null,\n      clientOffset: null,\n    };\n\n    this.change = ({ payload, clientOffset }) => this.setState({ payload, clientOffset });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      columnComponent: Column,\n    } = this.props;\n    const {\n      payload,\n      clientOffset,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n      >\n        <Getter name=\"draggingEnabled\" value />\n        <Template name=\"root\">\n          <DragDropProviderCore\n            onChange={this.change}\n          >\n            <TemplatePlaceholder />\n          </DragDropProviderCore>\n          {payload && (\n            <TemplateConnector>\n              {({ columns }) => (\n                <Container\n                  clientOffset={clientOffset}\n                >\n                  {getTargetColumns(payload, columns)\n                    .map(column => (\n                      <Column\n                        key={column.name}\n                        column={column}\n                      />\n                    ))\n                  }\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nDragDropProvider.propTypes = {\n  containerComponent: PropTypes.func.isRequired,\n  columnComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_DATA_TYPE,\n  TABLE_REORDERING_TYPE,\n  orderedColumns,\n  changeColumnOrder,\n  getTableTargetColumnIndex,\n  tableHeaderRowsWithReordering,\n  draftOrder as draftOrderComputed,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows },\n) => tableHeaderRowsWithReordering(tableHeaderRows);\n\nexport class TableColumnReordering extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    };\n\n    this.onOver = this.handleOver.bind(this);\n    this.onLeave = this.handleLeave.bind(this);\n    this.onDrop = this.handleDrop.bind(this);\n  }\n\n  getState() {\n    const { order: orderState } = this.state;\n    const {\n      order = orderState,\n    } = this.props;\n    return {\n      ...this.state,\n      order,\n    };\n  }\n\n  getDraftOrder() {\n    const { order, sourceColumnIndex, targetColumnIndex } = this.getState();\n    return draftOrderComputed(order, sourceColumnIndex, targetColumnIndex);\n  }\n\n  getAvailableColumns() {\n    return this.getDraftOrder()\n      .filter(columnName => !!this.cellDimensionGetters[columnName]);\n  }\n\n  cacheCellDimensions() {\n    this.cellDimensions = (this.cellDimensions && this.cellDimensions.length)\n      ? this.cellDimensions\n      : this.getAvailableColumns()\n        .map(columnName => this.cellDimensionGetters[columnName]());\n  }\n\n  resetCellDimensions() {\n    this.cellDimensions = [];\n  }\n\n  ensureCellDimensionGetters(tableColumns) {\n    Object.keys(this.cellDimensionGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column.name === columnName);\n        if (columnIndex === -1) {\n          delete this.cellDimensionGetters[columnName];\n        }\n      });\n  }\n\n  storeCellDimensionsGetter(tableColumn, getter, tableColumns) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  }\n\n  handleOver({ payload, clientOffset: { x } }) {\n    const sourceColumnName = payload[0].columnName;\n    const availableColumns = this.getAvailableColumns();\n    const relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n\n    if (relativeSourceColumnIndex === -1) return;\n\n    this.cacheCellDimensions();\n    const { cellDimensions } = this;\n\n    const overlappedColumns = cellDimensions\n      .filter(({ left, right }) => left <= x && x <= right);\n\n    if (overlappedColumns.length > 1) return;\n\n    const relativeTargetIndex = getTableTargetColumnIndex(\n      cellDimensions,\n      relativeSourceColumnIndex,\n      x,\n    );\n\n    if (relativeTargetIndex === -1) return;\n\n    const {\n      sourceColumnIndex: prevSourceColumnIndex,\n      targetColumnIndex: prevTargetColumnIndex,\n    } = this.getState();\n    const draftOrder = this.getDraftOrder();\n    const targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n\n    const sourceColumnIndex = prevSourceColumnIndex === -1\n      ? draftOrder.indexOf(sourceColumnName)\n      : prevSourceColumnIndex;\n\n    this.setState({\n      sourceColumnIndex,\n      targetColumnIndex,\n    });\n  }\n\n  handleLeave() {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    this.resetCellDimensions();\n  }\n\n  handleDrop() {\n    const { sourceColumnIndex, targetColumnIndex, order } = this.getState();\n    const { onOrderChange } = this.props;\n    const nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex],\n    });\n\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  }\n\n  render() {\n    const {\n      tableContainerComponent: Container,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    const columnsComputed = (\n      { tableColumns },\n    ) => orderedColumns(tableColumns, this.getDraftOrder());\n\n    this.cellDimensionGetters = {};\n\n    return (\n      <Plugin\n        name=\"TableColumnReordering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={columnsComputed} />\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template name=\"table\">\n          {params => (\n            <Container\n              {...params}\n              onOver={this.onOver}\n              onLeave={this.onLeave}\n              onDrop={this.onDrop}\n            >\n              <TemplatePlaceholder />\n            </Container>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <Row {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (\n                <Cell\n                  {...params}\n                  getCellDimensions={getter => this.storeCellDimensionsGetter(\n                    params.tableColumn, getter, tableColumns,\n                  )}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnReordering.propTypes = {\n  order: PropTypes.arrayOf(PropTypes.string),\n  defaultOrder: PropTypes.arrayOf(PropTypes.string),\n  onOrderChange: PropTypes.func,\n  tableContainerComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n};\n\nTableColumnReordering.defaultProps = {\n  order: undefined,\n  defaultOrder: [],\n  onOrderChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithDataRows,\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  isDataTableCell,\n  isHeaderStubTableCell,\n  isDataTableRow,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nconst RowPlaceholder = props => <TemplatePlaceholder name=\"tableRow\" params={props} />;\nconst CellPlaceholder = props => <TemplatePlaceholder name=\"tableCell\" params={props} />;\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = ({ rows, getRowId }) => tableRowsWithDataRows(rows, getRowId);\nconst tableFooterRows = [];\n\nconst pluginDependencies = [\n  { name: 'DataTypeProvider', optional: true },\n];\n\nexport class Table extends React.PureComponent {\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      messages,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n    const tableColumnsComputed = (\n      { columns },\n    ) => tableColumnsWithDataRows(columns, columnExtensions);\n\n    return (\n      <Plugin\n        name=\"Table\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" value={tableFooterRows} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n\n        <Template name=\"body\">\n          <TemplatePlaceholder name=\"table\" />\n        </Template>\n        <Template name=\"table\">\n          <TemplateConnector>\n            {({\n              tableHeaderRows: headerRows,\n              tableBodyRows: bodyRows,\n              tableFooterRows: footerRows,\n              tableColumns: columns,\n              getTableCellColSpan,\n            }) => (\n              <Layout\n                tableComponent={tableComponent}\n                headComponent={headComponent}\n                bodyComponent={bodyComponent}\n                footerComponent={footerComponent}\n                containerComponent={containerComponent}\n                headerRows={headerRows}\n                bodyRows={bodyRows}\n                footerRows={footerRows}\n                columns={columns}\n                rowComponent={RowPlaceholder}\n                cellComponent={CellPlaceholder}\n                getCellColSpan={getTableCellColSpan}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n        <Template name=\"tableCell\">\n          {params => (\n            <TemplateConnector>\n              {(\n                { tableHeaderRows: headerRows },\n              ) => (isHeaderStubTableCell(params.tableRow, headerRows)\n                ? <StubHeaderCell {...params} />\n                : <StubCell {...params} />\n              )\n              }\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ getCellValue }) => {\n                const columnName = params.tableColumn.column.name;\n                const value = getCellValue(params.tableRow.row, columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      row: params.tableRow.row,\n                      column: params.tableColumn.column,\n                      value,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isNoDataTableRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...params}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableRow\">\n          {params => (\n            <StubRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isDataTableRow(tableRow)}\n        >\n          {params => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isNoDataTableRow(tableRow)}\n        >\n          {params => <NoDataRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTable.propTypes = {\n  layoutComponent: PropTypes.func.isRequired,\n  tableComponent: PropTypes.func.isRequired,\n  headComponent: PropTypes.func.isRequired,\n  bodyComponent: PropTypes.func.isRequired,\n  footerComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  noDataCellComponent: PropTypes.func.isRequired,\n  noDataRowComponent: PropTypes.func.isRequired,\n  stubRowComponent: PropTypes.func.isRequired,\n  stubCellComponent: PropTypes.func.isRequired,\n  stubHeaderCellComponent: PropTypes.func.isRequired,\n  columnExtensions: PropTypes.array,\n  messages: PropTypes.object,\n};\n\nTable.defaultProps = {\n  columnExtensions: undefined,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n} from '@devexpress/dx-grid-core';\n\nexport class TableSelection extends React.PureComponent {\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns },\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth);\n\n    return (\n      <Plugin\n        name=\"TableSelection\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SelectionState' },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        {showSelectionColumn && (\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {params => (\n              <TemplateConnector>\n                {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                  <HeaderCell\n                    {...params}\n                    disabled={!selectAllAvailable}\n                    allSelected={allSelected}\n                    someSelected={someSelected}\n                    onToggle={select => toggleSelectAll(select)}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {showSelectionColumn && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {params => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                    selected={selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }) => isDataTableRow(tableRow)}\n          >\n            {params => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Row\n                    {...params}\n                    selectByRowClick={selectByRowClick}\n                    selected={highlightRow && selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\nTableSelection.propTypes = {\n  headerCellComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  highlightRow: PropTypes.bool,\n  selectByRowClick: PropTypes.bool,\n  showSelectAll: PropTypes.bool,\n  showSelectionColumn: PropTypes.bool,\n  selectionColumnWidth: PropTypes.number.isRequired,\n};\n\nTableSelection.defaultProps = {\n  highlightRow: false,\n  selectByRowClick: false,\n  showSelectAll: false,\n  showSelectionColumn: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { toggleDetailRowExpanded } from '@devexpress/dx-grid-core';\n\nexport class RowDetailState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onExpandedRowIdsChange } = this.props;\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => onExpandedRowIdsChange,\n      },\n    );\n\n    this.toggleDetailRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"RowDetailState\"\n      >\n        <Getter name=\"expandedDetailRowIds\" value={expandedRowIds} />\n        <Action name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\nRowDetailState.propTypes = {\n  expandedRowIds: PropTypes.array,\n  defaultExpandedRowIds: PropTypes.array,\n  onExpandedRowIdsChange: PropTypes.func,\n};\n\nRowDetailState.defaultProps = {\n  expandedRowIds: undefined,\n  defaultExpandedRowIds: [],\n  onExpandedRowIdsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n} from '@devexpress/dx-grid-core';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan },\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'RowDetailState' },\n  { name: 'Table' },\n];\n\nexport class TableRowDetail extends React.PureComponent {\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns },\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds },\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ expandedDetailRowIds }, { toggleDetailRowExpanded }) => (\n                <ToggleCell\n                  {...params}\n                  row={params.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: params.tableRow.rowId })}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isDetailTableRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isDetailTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...params}\n                      row={params.tableRow.row}\n                    >\n                      <Content row={params.tableRow.row} />\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isDetailTableRow(tableRow)}\n        >\n          {params => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableRowDetail.propTypes = {\n  contentComponent: PropTypes.func,\n  toggleCellComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  toggleColumnWidth: PropTypes.number.isRequired,\n  rowHeight: PropTypes.number,\n};\n\nTableRowDetail.defaultProps = {\n  contentComponent: () => null,\n  rowHeight: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplatePlaceholder, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithGrouping,\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupTableCell,\n  isGroupIndentTableCell,\n  isGroupTableRow,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow },\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan },\n) => tableGroupCellColSpanGetter(getTableCellColSpan);\n\nconst showColumnWhenGroupedGetter = (showColumnsWhenGrouped, columnExtensions = []) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\nexport class TableGroupRow extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: GroupCell,\n      rowComponent: GroupRow,\n      indentCellComponent: GroupIndentCell,\n      indentColumnWidth,\n      showColumnsWhenGrouped,\n      columnExtensions,\n    } = this.props;\n\n    const tableColumnsComputed = ({\n      columns, tableColumns, grouping, draftGrouping,\n    }) => tableColumnsWithGrouping(\n      columns,\n      tableColumns,\n      grouping,\n      draftGrouping,\n      indentColumnWidth,\n      showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions),\n    );\n\n    return (\n      <Plugin\n        name=\"TableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isGroupTableRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ grouping, expandedGroups }, { toggleGroupExpanded }) => {\n                if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n                  return (\n                    <TemplatePlaceholder\n                      name=\"valueFormatter\"\n                      params={{\n                        column: params.tableColumn.column,\n                        value: params.tableRow.row.value,\n                      }}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...params}\n                          row={params.tableRow.row}\n                          column={params.tableColumn.column}\n                          expanded={expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1}\n                          onToggle={\n                            () => toggleGroupExpanded({ groupKey: params.tableRow.row.compoundKey })\n                          }\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </TemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column}\n                      />\n                    );\n                  }\n                  return <TemplatePlaceholder />;\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isGroupTableRow(tableRow)}\n        >\n          {params => (\n            <GroupRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableGroupRow.propTypes = {\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  indentCellComponent: PropTypes.func,\n  indentColumnWidth: PropTypes.number.isRequired,\n  showColumnsWhenGrouped: PropTypes.bool,\n  columnExtensions: PropTypes.array,\n};\n\nTableGroupRow.defaultProps = {\n  indentCellComponent: null,\n  showColumnsWhenGrouped: false,\n  columnExtensions: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  getColumnSortingDirection,\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  getMessagesFormatter,\n  TABLE_DATA_TYPE,\n} from '@devexpress/dx-grid-core';\n\nconst tableHeaderRowsComputed = ({ tableHeaderRows }) => tableRowsWithHeading(tableHeaderRows);\n\nexport class TableHeaderRow extends React.PureComponent {\n  render() {\n    const {\n      showSortingControls,\n      showGroupingControls,\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <Plugin\n        name=\"TableHeaderRow\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SortingState', optional: !showSortingControls },\n          { name: 'GroupingState', optional: !showGroupingControls },\n          { name: 'DragDropProvider', optional: true },\n          { name: 'TableColumnResizing', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                sorting, tableColumns, draggingEnabled, tableColumnResizingEnabled,\n                isColumnSortingEnabled, isColumnGroupingEnabled,\n              }, {\n                changeColumnSorting, changeColumnGrouping,\n                changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft,\n              }) => {\n                const { name: columnName } = params.tableColumn.column;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled\n                  && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName)\n                  && atLeastOneDataColumn;\n\n                return (\n                  <HeaderCell\n                    {...params}\n                    column={params.tableColumn.column}\n                    getMessage={getMessage}\n                    sortingEnabled={sortingEnabled}\n                    groupingEnabled={groupingEnabled}\n                    showSortingControls={showSortingControls}\n                    showGroupingControls={showGroupingControls}\n                    draggingEnabled={draggingEnabled && atLeastOneDataColumn}\n                    resizingEnabled={tableColumnResizingEnabled}\n                    sortingDirection={showSortingControls && sorting !== undefined\n                      ? getColumnSortingDirection(sorting, columnName) : undefined}\n                    onSort={(\n                      { direction, keepOther },\n                    ) => changeColumnSorting({ columnName, direction, keepOther })}\n                    onGroup={() => changeColumnGrouping({ columnName })}\n                    onWidthChange={({ shift }) => changeTableColumnWidth({ columnName, shift })}\n                    onWidthDraft={({ shift }) => draftTableColumnWidth({ columnName, shift })}\n                    onWidthDraftCancel={() => cancelTableColumnWidthDraft()}\n                    before={(\n                      <TemplatePlaceholder\n                        name=\"tableHeaderCellBefore\"\n                        params={{\n                          column: params.tableColumn.column,\n                        }}\n                      />\n                    )}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isHeadingTableRow(tableRow)}\n        >\n          {params => <HeaderRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableHeaderRow.propTypes = {\n  showSortingControls: PropTypes.bool,\n  showGroupingControls: PropTypes.bool,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nTableHeaderRow.defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: null,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  getBandComponent,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n} from '@devexpress/dx-grid-core';\n\nconst CellPlaceholder = props => <TemplatePlaceholder params={props} />;\n\nexport class TableBandHeader extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this.props;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns },\n    ) => tableRowsWithBands(tableHeaderRows, columnBands, tableColumns);\n\n    return (\n      <Plugin\n        name=\"TableBandHeader\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'TableHeaderRow' },\n          { name: 'TableSelection', optional: true },\n          { name: 'TableEditColumn', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }) => isBandedOrHeaderRow(tableRow)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns, tableHeaderRows }) => {\n                const bandComponent = getBandComponent(\n                  params, tableHeaderRows, tableColumns, columnBands,\n                );\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return <TemplatePlaceholder />;\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload;\n                    return (\n                      <Cell {...params} {...payload}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n                  case BAND_HEADER_CELL:\n                    return (\n                      <TemplatePlaceholder\n                        name=\"tableCell\"\n                        params={{ ...params, ...bandComponent.payload }}\n                      />\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {params => <HeaderCell component={CellPlaceholder} {...params} />}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isBandedTableRow(tableRow)}\n        >\n          {params => <Row {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableBandHeader.propTypes = {\n  columnBands: PropTypes.array.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  bandedHeaderCellComponent: PropTypes.func.isRequired,\n  invisibleCellComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin,\n} from '@devexpress/dx-react-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  getMessagesFormatter,\n  isFilterValueEmpty,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'FilteringState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nexport class TableFilterRow extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterOperations: {},\n    };\n  }\n\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      editorComponent: EditorComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows },\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {(\n                { filters, isColumnFilteringEnabled, getAvailableFilterOperations },\n                { changeColumnFilter },\n              ) => {\n                const { filterOperations } = this.state;\n                const { name: columnName } = params.tableColumn.column;\n                const filter = getColumnFilterConfig(filters, columnName);\n                const onFilter = config => changeColumnFilter({ columnName, config });\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = filterOperations[columnName]\n                  || columnFilterOperations[0];\n                const handleFilterOperationChange = (value) => {\n                  this.setState({\n                    filterOperations: {\n                      ...filterOperations,\n                      [columnName]: value,\n                    },\n                  });\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = value => onFilter(!isFilterValueEmpty(value)\n                  ? { value, operation: selectedFilterOperation }\n                  : null);\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column: params.tableColumn.column,\n                      value: filter ? filter.value : undefined,\n                      onValueChange: handleFilterValueChange,\n                    }}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...params}\n                        getMessage={getMessage}\n                        column={params.tableColumn.column}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations}\n                              onChange={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : ''}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChange={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isFilterTableRow(tableRow)}\n        >\n          {params => <FilterRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableFilterRow.propTypes = {\n  rowHeight: PropTypes.any,\n  showFilterSelector: PropTypes.bool,\n  messages: PropTypes.object,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  filterSelectorComponent: PropTypes.func.isRequired,\n  iconComponent: PropTypes.func.isRequired,\n  editorComponent: PropTypes.func.isRequired,\n};\n\nTableFilterRow.defaultProps = {\n  rowHeight: undefined,\n  showFilterSelector: false,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nexport class TableEditRow extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this.props;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows },\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                getCellValue,\n                createRowChange,\n                rowChanges,\n                isColumnEditingEnabled,\n              }, {\n                changeAddedRow,\n                changeRow,\n              }) => {\n                const { rowId, row } = params.tableRow;\n                const { column } = params.tableColumn;\n                const { name: columnName } = column;\n\n                const isNew = isAddedTableRow(params.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column,\n                      row,\n                      value,\n                      onValueChange,\n                    }}\n                  >\n                    {content => (\n                      <EditCell\n                        {...params}\n                        row={row}\n                        column={column}\n                        value={value}\n                        editingEnabled={isColumnEditingEnabled(columnName)}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => (isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {params => (\n            <EditRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableEditRow.propTypes = {\n  rowHeight: PropTypes.any,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n};\n\nTableEditRow.defaultProps = {\n  rowHeight: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Template, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n];\n\nexport class TableEditColumn extends React.PureComponent {\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n    const tableColumnsComputed = ({ tableColumns }) => tableColumnsWithEditing(tableColumns, width);\n\n    return (\n      <Plugin\n        name=\"TableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn },\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {(getters, actions) => (\n                <HeaderCell {...params}>\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => actions.addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {(getters, actions) => {\n                const isEdit = isEditTableRow(params.tableRow);\n                const isNew = isAddedTableRow(params.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [params.tableRow.rowId];\n                return (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => actions.startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          actions.deleteRows({ rowIds });\n                          actions.commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.commitAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.cancelAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\nTableEditColumn.propTypes = {\n  cellComponent: PropTypes.func.isRequired,\n  headerCellComponent: PropTypes.func.isRequired,\n  commandComponent: PropTypes.func.isRequired,\n  showAddCommand: PropTypes.bool,\n  showEditCommand: PropTypes.bool,\n  showDeleteCommand: PropTypes.bool,\n  width: PropTypes.number,\n  messages: PropTypes.object,\n};\nTableEditColumn.defaultProps = {\n  showAddCommand: false,\n  showEditCommand: false,\n  showDeleteCommand: false,\n  width: 140,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { memoize } from '@devexpress/dx-core';\nimport {\n  Plugin, Getter, Action, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithWidths,\n  tableColumnsWithDraftWidths,\n  changeTableColumnWidth,\n  draftTableColumnWidth,\n  cancelTableColumnWidthDraft,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nexport class TableColumnResizing extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: [],\n    };\n    const { onColumnWidthsChange, minColumnWidth } = this.props;\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        columnWidths: () => onColumnWidthsChange,\n      },\n    );\n\n    this.tableColumnsComputed = memoize(\n      columnWidths => ({ tableColumns }) => tableColumnsWithWidths(tableColumns, columnWidths),\n    );\n    this.tableColumnsDraftComputed = memoize(\n      draftColumnWidths => (\n        { tableColumns },\n      ) => tableColumnsWithDraftWidths(tableColumns, draftColumnWidths),\n    );\n\n    this.changeTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => changeTableColumnWidth(\n        prevState,\n        { ...payload, minColumnWidth },\n      ),\n    );\n    this.draftTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => draftTableColumnWidth(\n        prevState,\n        { ...payload, minColumnWidth },\n      ),\n    );\n    this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(\n      stateHelper, cancelTableColumnWidthDraft,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      columnWidths = prevState.columnWidths,\n    } = nextProps;\n\n    return {\n      columnWidths,\n    };\n  }\n\n  render() {\n    const { columnWidths, draftColumnWidths } = this.state;\n\n    const tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    const tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n\n    return (\n      <Plugin\n        name=\"TableColumnResizing\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumnResizingEnabled\" value />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsDraftComputed} />\n        <Action name=\"changeTableColumnWidth\" action={this.changeTableColumnWidth} />\n        <Action name=\"draftTableColumnWidth\" action={this.draftTableColumnWidth} />\n        <Action name=\"cancelTableColumnWidthDraft\" action={this.cancelTableColumnWidthDraft} />\n      </Plugin>\n    );\n  }\n}\n\nTableColumnResizing.propTypes = {\n  defaultColumnWidths: PropTypes.array,\n  columnWidths: PropTypes.array,\n  onColumnWidthsChange: PropTypes.func,\n  minColumnWidth: PropTypes.number.isRequired,\n};\n\nTableColumnResizing.defaultProps = {\n  defaultColumnWidths: [],\n  columnWidths: undefined,\n  onColumnWidthsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, TemplatePlaceholder, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { pageCount, getMessagesFormatter } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nexport class PagingPanel extends React.PureComponent {\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <Plugin\n        name=\"PagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"footer\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ currentPage, pageSize, totalCount }, { setCurrentPage, setPageSize }) => (\n              <Pager\n                currentPage={currentPage}\n                pageSize={pageSize}\n                totalCount={totalCount}\n                totalPages={pageCount(totalCount, pageSize)}\n                pageSizes={pageSizes}\n                getMessage={getMessage}\n                onCurrentPageChange={setCurrentPage}\n                onPageSizeChange={setPageSize}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nPagingPanel.propTypes = {\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n  containerComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nPagingPanel.defaultProps = {\n  pageSizes: [],\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n  getMessagesFormatter,\n} from '@devexpress/dx-grid-core';\n\nexport class GroupingPanel extends React.PureComponent {\n  render() {\n    const {\n      layoutComponent: Layout,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    const EmptyMessagePlaceholder = () => (\n      <EmptyMessage\n        getMessage={getMessage}\n      />\n    );\n\n    const ItemPlaceholder = ({ item }) => {\n      const { name: columnName } = item.column;\n\n      return (\n        <TemplateConnector>\n          {(\n            { sorting, isColumnSortingEnabled, isColumnGroupingEnabled },\n            { changeColumnGrouping, changeColumnSorting },\n          ) => {\n            const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n            const groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n\n            return (\n              <Item\n                item={item}\n                sortingEnabled={sortingEnabled}\n                groupingEnabled={groupingEnabled}\n                showSortingControls={showSortingControls}\n                sortingDirection={showSortingControls\n                  ? getColumnSortingDirection(sorting, columnName) : undefined}\n                showGroupingControls={showGroupingControls}\n                onGroup={() => changeColumnGrouping({ columnName })}\n                onSort={(\n                  { direction, keepOther },\n                ) => changeColumnSorting({ columnName, direction, keepOther })}\n              />\n            );\n          }}\n        </TemplateConnector>\n      );\n    };\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={[\n          { name: 'GroupingState' },\n          { name: 'Toolbar' },\n          { name: 'SortingState', optional: !showSortingControls },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              columns, grouping, draftGrouping, draggingEnabled, isColumnGroupingEnabled,\n            }, {\n              changeColumnGrouping, draftColumnGrouping, cancelColumnGroupingDraft,\n            }) => (\n              <Layout\n                items={groupingPanelItems(columns, grouping, draftGrouping)}\n                isColumnGroupingEnabled={isColumnGroupingEnabled}\n                draggingEnabled={draggingEnabled}\n                onGroup={changeColumnGrouping}\n                onGroupDraft={draftColumnGrouping}\n                onGroupDraftCancel={cancelColumnGroupingDraft}\n                itemComponent={ItemPlaceholder}\n                emptyMessageComponent={EmptyMessagePlaceholder}\n                containerComponent={Container}\n              />\n            )}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nGroupingPanel.propTypes = {\n  showSortingControls: PropTypes.bool,\n  showGroupingControls: PropTypes.bool,\n  layoutComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  itemComponent: PropTypes.func.isRequired,\n  emptyMessageComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nGroupingPanel.defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Plugin, Template, Getter } from '@devexpress/dx-react-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DataTypeProvider extends React.PureComponent {\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this.props;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations },\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations,\n      columnNames,\n    );\n\n    return (\n      <Plugin name=\"DataTypeProvider\">\n        <Getter name=\"getAvailableFilterOperations\" computed={getAvailableFilterOperationsComputed} />\n        {Formatter\n          ? (\n            <Template\n              name=\"valueFormatter\"\n              predicate={({ column }) => columnNames.includes(column.name)}\n            >\n              {params => <Formatter {...params} />}\n            </Template>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <Template\n              name=\"valueEditor\"\n              predicate={({ column }) => columnNames.includes(column.name)}\n            >\n              {params => <Editor {...params} />}\n            </Template>\n          )\n          : null\n        }\n      </Plugin>\n    );\n  }\n}\n\nDataTypeProvider.propTypes = {\n  for: PropTypes.arrayOf(PropTypes.string).isRequired,\n  formatterComponent: PropTypes.func,\n  editorComponent: PropTypes.func,\n  availableFilterOperations: PropTypes.arrayOf(PropTypes.string),\n};\n\nDataTypeProvider.defaultProps = {\n  formatterComponent: undefined,\n  editorComponent: undefined,\n  availableFilterOperations: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Action,\n  Getter,\n  Plugin,\n  Template,\n  TemplateConnector,\n  TemplatePlaceholder,\n  createStateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  getMessagesFormatter,\n  toggleColumn,\n  visibleTableColumns,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames },\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\nexport class TableColumnVisibility extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { onHiddenColumnNamesChange } = this.props;\n    this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        hiddenColumnNames: () => onHiddenColumnNamesChange,\n      },\n    );\n\n    this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'hiddenColumnNames', toggleColumn);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      hiddenColumnNames = prevState.hiddenColumnNames,\n    } = nextProps;\n\n    return {\n      hiddenColumnNames,\n    };\n  }\n\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n    const { hiddenColumnNames } = this.state;\n    const { columnExtensions, columnTogglingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n        <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n        <Getter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <Action\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (tableDataColumnsExist(tableColumns)\n                ? <TemplatePlaceholder />\n                : (\n                  <EmptyMessage\n                    getMessage={getMessage}\n                    {...params}\n                  />\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnVisibility.propTypes = {\n  hiddenColumnNames: PropTypes.arrayOf(PropTypes.string),\n  defaultHiddenColumnNames: PropTypes.arrayOf(PropTypes.string),\n  emptyMessageComponent: PropTypes.func.isRequired,\n  onHiddenColumnNamesChange: PropTypes.func,\n  messages: PropTypes.object,\n  columnExtensions: PropTypes.array,\n  columnTogglingEnabled: PropTypes.bool,\n};\n\nTableColumnVisibility.defaultProps = {\n  hiddenColumnNames: undefined,\n  defaultHiddenColumnNames: [],\n  onHiddenColumnNamesChange: undefined,\n  messages: {},\n  columnExtensions: undefined,\n  columnTogglingEnabled: true,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\n\nexport class Toolbar extends React.PureComponent {\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n          <Root>\n            <TemplatePlaceholder name=\"toolbarContent\" />\n          </Root>\n          <TemplatePlaceholder />\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nToolbar.propTypes = {\n  rootComponent: PropTypes.func.isRequired,\n  flexibleSpaceComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { toggleRowExpanded } from '@devexpress/dx-grid-core';\n\nexport class TreeDataState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onExpandedRowIdsChange } = this.props;\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => onExpandedRowIdsChange,\n      },\n    );\n\n    this.toggleRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"TreeDataState\"\n      >\n        <Getter name=\"expandedRowIds\" value={expandedRowIds} />\n        {' '}\n        {/* collision =( */}\n        <Action name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\nTreeDataState.propTypes = {\n  expandedRowIds: PropTypes.array,\n  defaultExpandedRowIds: PropTypes.array,\n  onExpandedRowIdsChange: PropTypes.func,\n};\n\nTreeDataState.defaultProps = {\n  expandedRowIds: undefined,\n  defaultExpandedRowIds: [],\n  onExpandedRowIdsChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'TreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds },\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows },\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows },\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows },\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }) => unwrappedCustomTreeRows(rows);\n\nexport class CustomTreeData extends React.PureComponent {\n  render() {\n    const {\n      getChildRows,\n    } = this.props;\n    const treeRowsComputed = ({ rows }) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <Plugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={treeRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <Getter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <Getter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <Getter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <Getter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nCustomTreeData.propTypes = {\n  getChildRows: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template, Getter, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\n\nexport class TableTreeColumn extends React.PureComponent {\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"TableTreeColumn\"\n        dependencies={[\n          { name: 'DataTypeProvider', optional: true },\n          { name: 'TreeDataState' },\n          { name: 'SelectionState', optional: !showSelectionControls },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n          { name: 'Table' },\n          { name: 'TableHeaderRow', optional: true },\n        ]}\n      >\n        <Getter name=\"tableTreeColumnName\" value={forColumnName} />\n        <Template\n          name=\"tableHeaderCellBefore\"\n          predicate={({ column }) => column.name === forColumnName}\n        >\n          <ExpandButton\n            visible={false}\n          />\n          {showSelectionControls && showSelectAll && (\n            <TemplateConnector>\n              {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                <Checkbox\n                  disabled={!selectAllAvailable}\n                  checked={allSelected}\n                  indeterminate={someSelected}\n                  onChange={toggleSelectAll}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn },\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                getCollapsedRows, expandedRowIds, selection, isTreeRowLeaf, getTreeRowLevel,\n                getCellValue,\n              }, {\n                toggleRowExpanded, toggleSelection,\n              }) => {\n                const { row, rowId } = params.tableRow;\n                const columnName = params.tableColumn.column.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      row,\n                      column: params.tableColumn.column,\n                      value,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={row}\n                        column={params.tableColumn.column}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableTreeColumn.propTypes = {\n  for: PropTypes.string.isRequired,\n  showSelectionControls: PropTypes.bool,\n  showSelectAll: PropTypes.bool,\n  cellComponent: PropTypes.func.isRequired,\n  indentComponent: PropTypes.func.isRequired,\n  expandButtonComponent: PropTypes.func.isRequired,\n  checkboxComponent: PropTypes.func.isRequired,\n  contentComponent: PropTypes.func.isRequired,\n};\n\nTableTreeColumn.defaultProps = {\n  showSelectionControls: false,\n  showSelectAll: false,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\n\nexport class SearchState extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const { onValueChange } = this.props;\n\n    this.state = {\n      value: props.value || props.defaultValue,\n    };\n    const stateHelper = createStateHelper(this, {\n      value: () => onValueChange,\n    });\n\n    this.changeValue = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'value', changeSearchValue);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      value = prevState.value,\n    } = nextProps;\n\n    return {\n      value,\n    };\n  }\n\n  render() {\n    const { value } = this.state;\n    const filterExpressionComputed = (\n      { filterExpression, columns },\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <Plugin\n        name=\"SearchState\"\n      >\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter name=\"searchValue\" value={value} />\n        <Action name=\"changeSearchValue\" action={this.changeValue} />\n      </Plugin>\n    );\n  }\n}\n\nSearchState.propTypes = {\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  onValueChange: PropTypes.func,\n};\n\nSearchState.defaultProps = {\n  value: undefined,\n  defaultValue: '',\n  onValueChange: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Template,\n  TemplatePlaceholder,\n  Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'SearchState' },\n];\n\nexport class SearchPanel extends React.PureComponent {\n  render() {\n    const { inputComponent: Input, messages } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <Plugin\n        name=\"SearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ searchValue }, { changeSearchValue }) => (\n              <Input\n                value={searchValue}\n                onValueChange={changeSearchValue}\n                getMessage={getMessage}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nSearchPanel.propTypes = {\n  inputComponent: PropTypes.func.isRequired,\n  messages: PropTypes.object,\n};\n\nSearchPanel.defaultProps = {\n  messages: {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\n\nexport class SummaryState extends React.PureComponent {\n  render() {\n    const { totalItems, groupItems, treeItems } = this.props;\n\n    return (\n      <Plugin\n        name=\"SummaryState\"\n      >\n        <Getter name=\"totalSummaryItems\" value={totalItems} />\n        <Getter name=\"groupSummaryItems\" value={groupItems} />\n        <Getter name=\"treeSummaryItems\" value={treeItems} />\n      </Plugin>\n    );\n  }\n}\n\nSummaryState.propTypes = {\n  totalItems: PropTypes.array,\n  groupItems: PropTypes.array,\n  treeItems: PropTypes.array,\n};\n\nSummaryState.defaultProps = {\n  totalItems: undefined,\n  groupItems: undefined,\n  treeItems: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport {\n  defaultSummaryCalculator,\n  totalSummaryValues,\n  groupSummaryValues,\n  treeSummaryValues,\n} from '@devexpress/dx-grid-core';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nexport class IntegratedSummary extends React.PureComponent {\n  render() {\n    const { calculator } = this.props;\n\n    const totalSummaryValuesComputed = ({\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }) => totalSummaryValues(\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const groupSummaryValuesComputed = ({\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n    }) => groupSummaryValues(\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      calculator,\n    );\n\n    const treeSummaryValuesComputed = ({\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n    }) => treeSummaryValues(\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n      calculator,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" computed={totalSummaryValuesComputed} />\n        <Getter name=\"groupSummaryValues\" computed={groupSummaryValuesComputed} />\n        <Getter name=\"treeSummaryValues\" computed={treeSummaryValuesComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedSummary.defaultCalculator = defaultSummaryCalculator;\n\nIntegratedSummary.propTypes = {\n  calculator: PropTypes.func,\n};\n\nIntegratedSummary.defaultProps = {\n  calculator: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nexport class CustomSummary extends React.PureComponent {\n  render() {\n    const { totalValues, groupValues, treeValues } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" value={totalValues} />\n        <Getter name=\"groupSummaryValues\" value={groupValues} />\n        <Getter name=\"treeSummaryValues\" value={treeValues} />\n      </Plugin>\n    );\n  }\n}\n\nCustomSummary.propTypes = {\n  totalValues: PropTypes.array,\n  groupValues: PropTypes.object,\n  treeValues: PropTypes.object,\n};\n\nCustomSummary.defaultProps = {\n  totalValues: undefined,\n  groupValues: undefined,\n  treeValues: undefined,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplateConnector,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  getMessagesFormatter,\n  tableRowsWithSummaries,\n  tableRowsWithTotalSummaries,\n  isTotalSummaryTableCell,\n  isGroupSummaryTableCell,\n  isTreeSummaryTableCell,\n  isTotalSummaryTableRow,\n  isGroupSummaryTableRow,\n  isTreeSummaryTableRow,\n  getColumnSummaries,\n} from '@devexpress/dx-grid-core';\n\nconst dependencies = [\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState' },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'TableTreeColumn', optional: true },\n];\n\nconst tableBodyRowsComputed = ({\n  tableBodyRows,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n}) => tableRowsWithSummaries(tableBodyRows, getRowLevelKey, isGroupRow, getRowId);\nconst tableFooterRowsComputed = ({\n  tableFooterRows,\n}) => tableRowsWithTotalSummaries(tableFooterRows);\n\nconst defaultTypelessSummaries = ['count'];\n\nexport class TableSummaryRow extends React.PureComponent {\n  renderCellContent(column, columnSummaries) {\n    const {\n      formatlessSummaryTypes,\n      itemComponent: Item,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <React.Fragment>\n        {columnSummaries.map((summary) => {\n          if (summary.value === null\n            || formatlessSummaryTypes.includes(summary.type)\n            || defaultTypelessSummaries.includes(summary.type)) {\n            return (\n              <Item\n                key={summary.type}\n              >\n                {getMessage(summary.type)}\n                :&nbsp;&nbsp;\n                {String(summary.value)}\n              </Item>\n            );\n          }\n          return (\n            <TemplatePlaceholder\n              key={summary.type}\n              name=\"valueFormatter\"\n              params={{\n                column,\n                value: summary.value,\n              }}\n            >\n              {content => (\n                <Item>\n                  {getMessage(summary.type)}\n                  :&nbsp;&nbsp;\n                  {content || String(summary.value)}\n                </Item>\n              )}\n            </TemplatePlaceholder>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {\n      totalRowComponent: TotalRow,\n      groupRowComponent: GroupRow,\n      treeRowComponent: TreeRow,\n      totalCellComponent: TotalCell,\n      groupCellComponent: GroupCell,\n      treeCellComponent: TreeCell,\n      treeColumnCellComponent: TreeColumnCell,\n      treeColumnContentComponent: TreeColumnContent,\n      treeColumnIndentComponent: TreeColumnIndent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableSummaryRow\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" computed={tableFooterRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isTotalSummaryTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ totalSummaryItems, totalSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  totalSummaryItems,\n                  params.tableColumn.column.name,\n                  totalSummaryValues,\n                );\n                return (\n                  <TotalCell\n                    {...params}\n                    column={params.tableColumn.column}\n                  >\n                    {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                  </TotalCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isGroupSummaryTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({ groupSummaryItems, groupSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  groupSummaryItems,\n                  params.tableColumn.column.name,\n                  groupSummaryValues[params.tableRow.row.compoundKey],\n                );\n                return (\n                  <GroupCell\n                    {...params}\n                    column={params.tableColumn.column}\n                  >\n                    {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                  </GroupCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }) => isTreeSummaryTableCell(tableRow, tableColumn)}\n        >\n          {params => (\n            <TemplateConnector>\n              {({\n                treeSummaryItems,\n                treeSummaryValues,\n                tableTreeColumnName,\n                getRowId,\n                getTreeRowLevel,\n              }) => {\n                const columnSummaries = getColumnSummaries(\n                  treeSummaryItems,\n                  params.tableColumn.column.name,\n                  treeSummaryValues[getRowId(params.tableRow.row)],\n                );\n                if (tableTreeColumnName === params.tableColumn.column.name) {\n                  return (\n                    <TreeColumnCell\n                      {...params}\n                      column={params.tableColumn.column}\n                    >\n                      <TreeColumnIndent\n                        level={getTreeRowLevel(params.tableRow.row)}\n                      />\n                      <TreeColumnContent>\n                        {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                      </TreeColumnContent>\n                    </TreeColumnCell>\n                  );\n                }\n                return (\n                  <TreeCell\n                    {...params}\n                    column={params.tableColumn.column}\n                  >\n                    {this.renderCellContent(params.tableColumn.column, columnSummaries)}\n                  </TreeCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isTotalSummaryTableRow(tableRow)}\n        >\n          {params => (\n            <TotalRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isGroupSummaryTableRow(tableRow)}\n        >\n          {params => (\n            <GroupRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }) => isTreeSummaryTableRow(tableRow)}\n        >\n          {params => (\n            <TreeRow\n              {...params}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableSummaryRow.propTypes = {\n  formatlessSummaryTypes: PropTypes.array,\n\n  totalRowComponent: PropTypes.func.isRequired,\n  groupRowComponent: PropTypes.func.isRequired,\n  treeRowComponent: PropTypes.func.isRequired,\n\n  totalCellComponent: PropTypes.func.isRequired,\n  groupCellComponent: PropTypes.func.isRequired,\n  treeCellComponent: PropTypes.func.isRequired,\n\n  treeColumnCellComponent: PropTypes.func.isRequired,\n  treeColumnContentComponent: PropTypes.func.isRequired,\n  treeColumnIndentComponent: PropTypes.func.isRequired,\n\n  itemComponent: PropTypes.func.isRequired,\n\n  messages: PropTypes.object,\n};\n\nTableSummaryRow.defaultProps = {\n  formatlessSummaryTypes: [],\n  messages: {},\n};\n","/* globals requestAnimationFrame cancelAnimationFrame */\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport {\n  getAnimations,\n  filterActiveAnimations,\n  evalAnimations,\n} from '@devexpress/dx-grid-core';\n\nconst TABLE_FLEX_TYPE = 'flex';\n\nexport class TableLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationState: new Map(),\n    };\n\n    this.animations = new Map();\n    this.tableNode = null;\n\n    this.setRef = (ref) => { if (ref) this.tableNode = ref; };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { columns } = this.props;\n    const { columns: prevColumns } = prevProps;\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const tableWidth = findDOMNode(this).scrollWidth;\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  }\n\n  getColumns() {\n    const { columns } = this.props;\n    const { animationState } = this.state;\n\n    let result = columns;\n\n    const isFixedWidth = columns.filter(column => column.width === undefined).length === 0;\n    if (isFixedWidth) {\n      result = result.slice();\n      result.push({ key: TABLE_FLEX_TYPE, type: TABLE_FLEX_TYPE });\n    }\n\n    if (animationState.size) {\n      result = result\n        .map(column => (animationState.has(column.key)\n          ? { ...column, animationState: animationState.get(column.key) }\n          : column));\n    }\n\n    return result;\n  }\n\n  processAnimationFrame() {\n    const { animationState: animationComponentState } = this.state;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({ animationState: new Map() });\n      }\n      return;\n    }\n\n    const animationState = evalAnimations(this.animations);\n    this.setState({ animationState });\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      minColumnWidth,\n      ...restProps\n    } = this.props;\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .reduce((acc, width) => acc + width, 0);\n\n    return (\n      <Layout\n        {...restProps}\n        columns={columns}\n        minWidth={minWidth}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  }\n}\n\nTableLayout.propTypes = {\n  columns: PropTypes.array.isRequired,\n  minColumnWidth: PropTypes.number.isRequired,\n  layoutComponent: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nexport class ColumnGroup extends React.PureComponent {\n  render() {\n    const { columns } = this.props;\n\n    return (\n      <colgroup>\n        {columns.map(column => (\n          <col\n            key={column.key}\n            style={column.width !== undefined\n              ? { width: `${column.width}px` }\n              : null}\n          />\n        ))}\n      </colgroup>\n    );\n  }\n}\n\nColumnGroup.propTypes = {\n  columns: PropTypes.array.isRequired,\n};\n","import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport { Sizer, RefHolder } from '@devexpress/dx-react-core';\nimport { getCollapsedGrid } from '@devexpress/dx-grid-core';\nimport { ColumnGroup } from './column-group';\n\nconst AUTO_HEIGHT = 'auto';\n\nexport class VirtualTableLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rowHeights: new Map(),\n      viewportTop: 0,\n      viewportLeft: 0,\n    };\n    this.state.headerHeight = props.headerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n    this.state.bodyHeight = 0;\n    this.state.footerHeight = props.footerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n\n    this.rowRefs = new Map();\n    this.blockRefs = new Map();\n    this.registerRowRef = this.registerRowRef.bind(this);\n    this.getRowHeight = this.getRowHeight.bind(this);\n    this.updateViewport = this.updateViewport.bind(this);\n  }\n\n  componentDidMount() {\n    this.storeRowHeights();\n    this.storeBloksHeights();\n  }\n\n  componentDidUpdate() {\n    this.storeRowHeights();\n    this.storeBloksHeights();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { rowHeights: prevRowHeight } = prevState;\n    const rowHeights = [...nextProps.headerRows, ...nextProps.bodyRows, ...nextProps.footerRows]\n      .reduce(\n        (acc, row) => {\n          const rowHeight = prevRowHeight.get(row.key);\n          if (rowHeight !== undefined) {\n            acc.set(row.key, rowHeight);\n          }\n          return acc;\n        },\n        new Map(),\n      );\n    return { rowHeights };\n  }\n\n  getRowHeight(row) {\n    const { rowHeights } = this.state;\n    const { estimatedRowHeight } = this.props;\n    const storedHeight = rowHeights.get(row.key);\n    if (storedHeight !== undefined) return storedHeight;\n    if (row.height) return row.height;\n    return estimatedRowHeight;\n  }\n\n  storeRowHeights() {\n    const rowsWithChangedHeights = Array.from(this.rowRefs.entries())\n      // eslint-disable-next-line react/no-find-dom-node\n      .map(([row, ref]) => [row, findDOMNode(ref)])\n      .filter(([, node]) => !!node)\n      .map(([row, node]) => [row, node.getBoundingClientRect().height])\n      .filter(([row]) => row.type !== 'stub')\n      .filter(([row, height]) => height !== this.getRowHeight(row));\n\n    if (rowsWithChangedHeights.length) {\n      const { rowHeights } = this.state;\n      rowsWithChangedHeights\n        .forEach(([row, height]) => rowHeights.set(row.key, height));\n\n      this.setState({\n        rowHeights,\n      });\n    }\n  }\n\n  storeBloksHeights() {\n    const headerHeight = this.blockRefs.get('header')\n      // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('header')).getBoundingClientRect().height\n      : 0;\n\n    const bodyHeight = this.blockRefs.get('body')\n      // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('body')).getBoundingClientRect().height\n      : 0;\n\n    const footerHeight = this.blockRefs.get('footer')\n      // eslint-disable-next-line react/no-find-dom-node\n      ? findDOMNode(this.blockRefs.get('footer')).getBoundingClientRect().height\n      : 0;\n\n    const {\n      headerHeight: prevHeaderHeight,\n      bodyHeight: prevBodyHeight,\n      footerHeight: prevFooterHeight,\n    } = this.state;\n\n    if (prevHeaderHeight !== headerHeight\n      || prevBodyHeight !== bodyHeight\n      || prevFooterHeight !== footerHeight) {\n      this.setState({\n        headerHeight,\n        bodyHeight,\n        footerHeight,\n      });\n    }\n  }\n\n  registerRowRef(row, ref) {\n    if (ref === null) {\n      this.rowRefs.delete(row);\n    } else {\n      this.rowRefs.set(row, ref);\n    }\n  }\n\n  registerBlockRef(name, ref) {\n    if (ref === null) {\n      this.blockRefs.delete(name);\n    } else {\n      this.blockRefs.set(name, ref);\n    }\n  }\n\n  updateViewport(e) {\n    const node = e.target;\n\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return;\n    }\n\n    // NOTE: prevent iOS to flicker in bounces\n    if (node.scrollTop < 0\n      || node.scrollLeft < 0\n      || node.scrollLeft + node.clientWidth > Math.max(node.scrollWidth, node.clientWidth)\n      || node.scrollTop + node.clientHeight > Math.max(node.scrollHeight, node.clientHeight)) {\n      return;\n    }\n\n    this.setState({\n      viewportTop: node.scrollTop,\n      viewportLeft: node.scrollLeft,\n    });\n  }\n\n  renderRowsBlock(name, collapsedGrid, Table, Body, marginBottom) {\n    const {\n      minWidth,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    return (\n      <RefHolder\n        ref={ref => this.registerBlockRef(name, ref)}\n      >\n        <Table\n          style={{ minWidth: `${minWidth}px`, ...marginBottom ? { marginBottom: `${marginBottom}px` } : null }}\n        >\n          <ColumnGroup\n            columns={collapsedGrid.columns}\n          />\n          <Body>\n            {collapsedGrid.rows.map((visibleRow) => {\n              const { row, cells = [] } = visibleRow;\n              return (\n                <RefHolder\n                  key={row.key}\n                  ref={ref => this.registerRowRef(row, ref)}\n                >\n                  <Row\n                    tableRow={row}\n                    style={row.height !== undefined\n                      ? { height: `${row.height}px` }\n                      : undefined}\n                  >\n                    {cells.map((cell) => {\n                      const { column } = cell;\n                      return (\n                        <Cell\n                          key={column.key}\n                          tableRow={row}\n                          tableColumn={column}\n                          style={column.animationState}\n                          colSpan={cell.colSpan}\n                        />\n                      );\n                    })}\n                  </Row>\n                </RefHolder>\n              );\n            })}\n          </Body>\n        </Table>\n      </RefHolder>\n    );\n  }\n\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minColumnWidth,\n      height: propHeight,\n      containerComponent: Container,\n      headTableComponent: HeadTable,\n      footerTableComponent: FootTable,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      footerComponent: Footer,\n      getCellColSpan,\n    } = this.props;\n\n    const {\n      viewportLeft,\n      viewportTop,\n      headerHeight,\n      bodyHeight,\n      footerHeight,\n    } = this.state;\n\n    return (\n      <Sizer\n        containerComponent={Container}\n        style={{\n          ...(propHeight === AUTO_HEIGHT ? null : { height: `${propHeight}px` }),\n        }}\n        onScroll={this.updateViewport}\n      >\n        {({ width, height }) => {\n          const getColSpan = (\n            tableRow, tableColumn,\n          ) => getCellColSpan({ tableRow, tableColumn, tableColumns: columns });\n          const collapsedHeaderGrid = getCollapsedGrid({\n            rows: headerRows,\n            columns,\n            top: 0,\n            left: viewportLeft,\n            width,\n            height: headerHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n          const collapsedBodyGrid = getCollapsedGrid({\n            rows: bodyRows,\n            columns,\n            top: viewportTop,\n            left: viewportLeft,\n            width,\n            height: height - headerHeight - footerHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n          const collapsedFooterGrid = getCollapsedGrid({\n            rows: footerRows,\n            columns,\n            top: 0,\n            left: viewportLeft,\n            width,\n            height: footerHeight,\n            getColumnWidth: column => column.width || minColumnWidth,\n            getRowHeight: this.getRowHeight,\n            getColSpan,\n          });\n\n          return (\n            <React.Fragment>\n              {!!headerRows.length && this.renderRowsBlock('header', collapsedHeaderGrid, HeadTable, Head)}\n              {this.renderRowsBlock('body', collapsedBodyGrid, Table, Body, Math.max(0, height - headerHeight - bodyHeight - footerHeight))}\n              {!!footerRows.length && this.renderRowsBlock('footer', collapsedFooterGrid, FootTable, Footer)}\n            </React.Fragment>\n          );\n        }}\n      </Sizer>\n    );\n  }\n}\n\nVirtualTableLayout.propTypes = {\n  minWidth: PropTypes.number.isRequired,\n  minColumnWidth: PropTypes.number.isRequired,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]).isRequired,\n  headerRows: PropTypes.array,\n  bodyRows: PropTypes.array.isRequired,\n  footerRows: PropTypes.array,\n  columns: PropTypes.array.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  bodyComponent: PropTypes.func.isRequired,\n  headComponent: PropTypes.func,\n  footerComponent: PropTypes.func,\n  tableComponent: PropTypes.func.isRequired,\n  headTableComponent: PropTypes.func,\n  footerTableComponent: PropTypes.func,\n  containerComponent: PropTypes.func.isRequired,\n  estimatedRowHeight: PropTypes.number.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n\nVirtualTableLayout.defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  headTableComponent: () => null,\n  footerComponent: () => null,\n  footerTableComponent: () => null,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nconst getColumnStyle = ({ column }) => column.animationState;\n\nconst getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n\nexport class RowLayout extends React.PureComponent {\n  render() {\n    const {\n      row,\n      columns,\n      rowComponent: Row,\n      cellComponent: Cell,\n      getCellColSpan,\n    } = this.props;\n    const getColSpan = (\n      tableRow, tableColumn,\n    ) => getCellColSpan({ tableRow, tableColumn, tableColumns: columns });\n\n    return (\n      <Row\n        tableRow={row}\n        style={getRowStyle({ row })}\n      >\n        {\n          columns\n            .map(column => (\n              <Cell\n                key={column.key}\n                tableRow={row}\n                tableColumn={column}\n                style={getColumnStyle({ column })}\n                colSpan={getColSpan(row, column)}\n              />\n            ))\n        }\n      </Row>\n    );\n  }\n}\n\nRowLayout.propTypes = {\n  row: PropTypes.any.isRequired,\n  columns: PropTypes.array.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { RowLayout } from './row-layout';\n\nexport class RowsBlockLayout extends React.PureComponent {\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  }\n}\n\nRowsBlockLayout.propTypes = {\n  rows: PropTypes.array.isRequired,\n  columns: PropTypes.array.isRequired,\n  blockComponent: PropTypes.func.isRequired,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\n\nexport class StaticTableLayout extends React.PureComponent {\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minWidth,\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Container>\n        <Table\n          style={{ minWidth: `${minWidth}px` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              columns={columns}\n              blockComponent={headComponent}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n              getCellColSpan={getCellColSpan}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            columns={columns}\n            blockComponent={bodyComponent}\n            rowComponent={rowComponent}\n            cellComponent={cellComponent}\n            getCellColSpan={getCellColSpan}\n          />\n          {!!footerRows.length && (\n            <RowsBlockLayout\n              rows={footerRows}\n              columns={columns}\n              blockComponent={footerComponent}\n              rowComponent={rowComponent}\n              cellComponent={cellComponent}\n              getCellColSpan={getCellColSpan}\n            />\n          )}\n        </Table>\n      </Container>\n    );\n  }\n}\n\nStaticTableLayout.propTypes = {\n  headerRows: PropTypes.array,\n  bodyRows: PropTypes.array.isRequired,\n  footerRows: PropTypes.array,\n  columns: PropTypes.array.isRequired,\n  minWidth: PropTypes.number.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  tableComponent: PropTypes.func.isRequired,\n  headComponent: PropTypes.func,\n  bodyComponent: PropTypes.func.isRequired,\n  footerComponent: PropTypes.func,\n  rowComponent: PropTypes.func.isRequired,\n  cellComponent: PropTypes.func.isRequired,\n  getCellColSpan: PropTypes.func.isRequired,\n};\n\nStaticTableLayout.defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { DragSource } from '@devexpress/dx-react-core';\n\nexport class ItemLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dragging: false,\n    };\n  }\n\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n      draggingEnabled,\n      onDragStart,\n      onDragEnd,\n    } = this.props;\n    const { dragging } = this.state;\n\n    const itemElement = <Item item={{ ...item, draft: dragging || item.draft }} />;\n\n    return (draggingEnabled ? (\n      <DragSource\n        payload={[{ type: 'column', columnName: item.column.name }]}\n        onStart={() => {\n          this.setState({ dragging: true });\n          onDragStart();\n        }}\n        onEnd={() => {\n          this.setState({ dragging: false });\n          onDragEnd();\n        }}\n      >\n        {itemElement}\n      </DragSource>\n    ) : (\n      itemElement\n    ));\n  }\n}\n\nItemLayout.propTypes = {\n  item: PropTypes.shape({\n    column: PropTypes.object,\n    draft: PropTypes.bool,\n  }).isRequired,\n  itemComponent: PropTypes.func.isRequired,\n  draggingEnabled: PropTypes.bool,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func,\n};\n\nItemLayout.defaultProps = {\n  draggingEnabled: false,\n  onDragStart: () => {},\n  onDragEnd: () => {},\n};\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport { DropTarget } from '@devexpress/dx-react-core';\nimport { getGroupCellTargetIndex } from '@devexpress/dx-grid-core';\nimport { ItemLayout } from './group-panel-layout/item-layout';\n\nexport class GroupPanelLayout extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    };\n    this.handleDragEvent = (eventHandler, { payload, ...restArgs }) => {\n      const { isColumnGroupingEnabled } = this.props;\n      const { columnName } = payload[0];\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler({ payload, ...restArgs });\n      }\n    };\n    this.onEnter = ({ payload }) => {\n      this.setState({\n        sourceColumnName: payload[0].columnName,\n      });\n    };\n    this.onOver = ({ clientOffset }) => {\n      const { onGroupDraft, items } = this.props;\n      const { sourceColumnName, targetItemIndex: prevTargetItemIndex } = this.state;\n      // eslint-disable-next-line react/no-find-dom-node\n      const itemGeometries = this.itemRefs.map(ref => findDOMNode(ref).getBoundingClientRect());\n      const sourceItemIndex = items.findIndex(({ column }) => column.name === sourceColumnName);\n      const targetItemIndex = getGroupCellTargetIndex(\n        itemGeometries,\n        sourceItemIndex,\n        clientOffset,\n      );\n\n      if (prevTargetItemIndex === targetItemIndex) return;\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n      this.setState({ targetItemIndex });\n    };\n    this.onLeave = () => {\n      const { onGroupDraft } = this.props;\n      const { sourceColumnName } = this.state;\n      if (!this.draggingColumnName) {\n        this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1,\n      });\n      this.setState({\n        targetItemIndex: -1,\n      });\n    };\n    this.onDrop = () => {\n      const { onGroup } = this.props;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n    };\n    this.onDragStart = (columnName) => {\n      this.draggingColumnName = columnName;\n    };\n    this.onDragEnd = () => {\n      this.draggingColumnName = null;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      const { onGroup } = this.props;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName,\n        });\n      }\n      this.resetState();\n    };\n  }\n\n  resetState() {\n    const { onGroupDraftCancel } = this.props;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    });\n  }\n\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n      draggingEnabled,\n      isColumnGroupingEnabled,\n    } = this.props;\n\n    this.itemRefs = [];\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              ref={element => element && this.itemRefs.push(element)}\n              item={item}\n              itemComponent={Item}\n              draggingEnabled={draggingEnabled && isColumnGroupingEnabled(columnName)}\n              onDragStart={() => this.onDragStart(columnName)}\n              onDragEnd={this.onDragEnd}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return draggingEnabled\n      ? (\n        <DropTarget\n          onEnter={args => this.handleDragEvent(this.onEnter, args)}\n          onOver={args => this.handleDragEvent(this.onOver, args)}\n          onLeave={args => this.handleDragEvent(this.onLeave, args)}\n          onDrop={args => this.handleDragEvent(this.onDrop, args)}\n        >\n          {groupPanel}\n        </DropTarget>\n      )\n      : groupPanel;\n  }\n}\n\nGroupPanelLayout.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    column: PropTypes.object,\n    draft: PropTypes.bool,\n  })).isRequired,\n  onGroup: PropTypes.func,\n  itemComponent: PropTypes.func.isRequired,\n  containerComponent: PropTypes.func.isRequired,\n  emptyMessageComponent: PropTypes.func.isRequired,\n  draggingEnabled: PropTypes.bool,\n  isColumnGroupingEnabled: PropTypes.func,\n  onGroupDraft: PropTypes.func,\n  onGroupDraftCancel: PropTypes.func,\n};\n\nGroupPanelLayout.defaultProps = {\n  onGroup: () => {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: () => {},\n  onGroupDraft: () => {},\n  onGroupDraftCancel: () => {},\n};\n"],"names":["GridCore","props","rows","columns","getRowId","getCellValue","Root","rootComponent","restProps","React.createElement","Getter","rowIdGetter","cellValueGetter","TemplatePlaceholder","React","propTypes","PropTypes","isRequired","defaultProps","undefined","Grid","children","pluginDependencies","name","ColumnChooser","state","handleToggle","bind","handleHide","setButtonRef","button","visible","setState","Overlay","overlayComponent","Container","containerComponent","Item","itemComponent","ToggleButton","toggleButtonComponent","messages","getMessage","getMessagesFormatter","hiddenColumnNames","isColumnTogglingEnabled","toggleColumnVisibility","map","item","columnName","column","togglingEnabled","columnExtensionValueGetter","columnExtensions","defaultValue","getColumnExtensionValueGetter","filterExpressionComputed","filters","filterExpressionValue","filterExpression","FilteringState","onFiltersChange","defaultFilters","stateHelper","createStateHelper","changeColumnFilter","applyFieldReducer","columnFilteringEnabled","Action","nextProps","prevState","optional","getCollapsedRowsComputed","filteredCollapsedRowsGetter","unwrappedRowsComputed","unwrappedFilteredRows","IntegratedFiltering","getColumnPredicate","getColumnExtension","predicate","rowsComputed","getRowLevelKey","getCollapsedRows","filteredRows","defaultPredicate","defaultFilterPredicate","EditingState","rowChanges","defaultRowChanges","addedRows","defaultAddedRows","getRowChanges","stateRowChanges","getAddedRows","stateAddedRows","editingRowIds","defaultEditingRowIds","deletedRowIds","defaultDeletedRowIds","onEditingRowIdsChange","onAddedRowsChange","onRowChangesChange","onDeletedRowIdsChange","onCommitChanges","startEditRows","stopEditRows","changeRow","cancelChangedRows","cancelChanges","commitChangedRows","rowIds","changedRowsByIds","addRow","changeAddedRow","cancelAddedRows","commitAddedRows","addedRowsByIds","deleteRows","cancelDeletedRows","commitDeletedRows","deleted","createRowChange","columnEditingEnabled","createRowChangeGetter","PagingState","onCurrentPageChange","onPageSizeChange","currentPage","defaultCurrentPage","pageSize","defaultPageSize","setCurrentPage","setPageSize","rowsWithHeadersComputed","rowsWithPageHeaders","totalCountComputed","rowCount","paginatedRowsComputed","page","paginatedRows","currentPageComputed","totalCount","IntegratedPaging","CustomPaging","dependencies","GroupingState","onGroupingChange","onExpandedGroupsChange","grouping","defaultGrouping","expandedGroups","defaultExpandedGroups","changeColumnGrouping","toggleGroupExpanded","applyReducer","toggleExpandedGroups","draftColumnGrouping","cancelColumnGroupingDraft","changeColumnSorting","sorting","keepOther","restParams","groupingIndex","findIndex","columnGrouping","sortIndex","adjustSortIndex","getters","actions","groupIndex","nextState","prevGrouping","columnSortingIndex","columnSorting","prevGroupingIndex","length","draftGrouping","columnGroupingEnabled","groupCollapsedRowsGetter","expandedGroupedRowsComputed","expandedGroupRows","IntegratedGrouping","getColumnCriteria","criteria","groupedRowsComputed","groupedRows","groupRowChecker","groupRowLevelKeyGetter","getRowIdComputed","customGroupingRowIdGetter","CustomGrouping","getChildGroups","appliedGrouping","appliedExpandedGroups","customGroupedRows","SelectionState","onSelectionChange","selection","defaultSelection","toggleSelection","rowsWithAvailableToSelectComputed","isGroupRow","rowsWithAvailableToSelect","allSelectedComputed","allSelected","someSelectedComputed","someSelected","selectAllAvailableComputed","availableToSelect","toggleSelectAll","unwrapRowsComputed","unwrapSelectedRows","IntegratedSelection","SortingState","defaultSorting","onSortingChange","persistentSortedColumns","getPersistentSortedColumns","payload","calculateKeepOther","columnSortingEnabled","IntegratedSorting","getColumnCompare","compare","sortedRows","getTargetColumns","filter","type","find","DragDropProvider","change","clientOffset","Column","columnComponent","tableHeaderRowsComputed","tableHeaderRows","tableHeaderRowsWithReordering","TableColumnReordering","defaultOrder","onOver","handleOver","onLeave","handleLeave","onDrop","handleDrop","orderState","order","getState","sourceColumnIndex","targetColumnIndex","draftOrderComputed","getDraftOrder","cellDimensionGetters","cellDimensions","getAvailableColumns","tableColumns","keys","forEach","columnIndex","TABLE_DATA_TYPE","tableColumn","getter","ensureCellDimensionGetters","x","sourceColumnName","availableColumns","relativeSourceColumnIndex","indexOf","cacheCellDimensions","overlappedColumns","left","right","relativeTargetIndex","getTableTargetColumnIndex","prevSourceColumnIndex","prevTargetColumnIndex","draftOrder","resetCellDimensions","onOrderChange","nextOrder","changeColumnOrder","tableContainerComponent","Row","rowComponent","Cell","cellComponent","columnsComputed","orderedColumns","params","tableRow","TABLE_REORDERING_TYPE","storeCellDimensionsGetter","RowPlaceholder","CellPlaceholder","tableBodyRowsComputed","tableRowsWithDataRows","tableFooterRows","Table","Layout","layoutComponent","NoDataRow","noDataRowComponent","NoDataCell","noDataCellComponent","StubRow","stubRowComponent","StubCell","stubCellComponent","StubHeaderCell","stubHeaderCellComponent","tableComponent","headComponent","bodyComponent","footerComponent","tableColumnsComputed","tableColumnsWithDataRows","tableCellColSpanGetter","headerRows","bodyRows","tableBodyRows","footerRows","getTableCellColSpan","isHeaderStubTableCell","isDataTableCell","value","row","isNoDataTableRow","isNoDataTableCell","isDataTableRow","TableSelection","highlightRow","selectByRowClick","showSelectionColumn","showSelectAll","HeaderCell","headerCellComponent","selectionColumnWidth","tableColumnsWithSelection","isSelectAllTableCell","selectAllAvailable","select","isSelectTableCell","rowId","RowDetailState","onExpandedRowIdsChange","expandedRowIds","defaultExpandedRowIds","toggleDetailRowExpanded","getCellColSpanComputed","tableDetailCellColSpanGetter","TableRowDetail","rowHeight","Content","contentComponent","ToggleCell","toggleCellComponent","toggleColumnWidth","tableColumnsWithDetail","expandedDetailRowIds","tableRowsWithExpandedDetail","isDetailToggleTableCell","isDetailRowExpanded","isDetailTableRow","isDetailTableCell","tableRowsWithGrouping","tableGroupCellColSpanGetter","showColumnWhenGroupedGetter","showColumnsWhenGrouped","reduce","acc","columnExtension","showWhenGrouped","TableGroupRow","GroupCell","GroupRow","GroupIndentCell","indentCellComponent","indentColumnWidth","tableColumnsWithGrouping","isGroupTableRow","isGroupTableCell","compoundKey","groupKey","isGroupIndentTableCell","tableRowsWithHeading","TableHeaderRow","showSortingControls","showGroupingControls","HeaderRow","isHeadingTableCell","draggingEnabled","tableColumnResizingEnabled","isColumnSortingEnabled","isColumnGroupingEnabled","changeTableColumnWidth","draftTableColumnWidth","cancelTableColumnWidthDraft","atLeastOneDataColumn","sortingEnabled","groupingEnabled","getColumnSortingDirection","direction","shift","isHeadingTableRow","TableBandHeader","bandedHeaderCellComponent","InvisibleCell","invisibleCellComponent","columnBands","tableRowsWithBands","isBandedOrHeaderRow","bandComponent","getBandComponent","BAND_DUPLICATE_RENDER","BAND_EMPTY_CELL","BAND_GROUP_CELL","BAND_HEADER_CELL","isBandedTableRow","TableFilterRow","showFilterSelector","FilterCell","FilterRow","FilterSelector","filterSelectorComponent","iconComponent","EditorComponent","editorComponent","tableHeaderRowsWithFilter","isFilterTableCell","isColumnFilteringEnabled","getAvailableFilterOperations","filterOperations","getColumnFilterConfig","onFilter","config","columnFilterOperations","getColumnFilterOperations","selectedFilterOperation","handleFilterOperationChange","isFilterValueEmpty","operation","handleFilterValueChange","filteringEnabled","isFilterTableRow","TableEditRow","EditCell","EditRow","tableRowsWithEditing","isEditTableCell","isColumnEditingEnabled","isNew","isAddedTableRow","changedRow","getRowChange","onValueChange","newValue","changeArgs","isEditTableRow","TableEditColumn","Command","commandComponent","showAddCommand","showEditCommand","showDeleteCommand","width","tableColumnsWithEditing","isHeadingEditCommandsTableCell","isEditCommandsTableCell","isEdit","isEditing","TableColumnResizing","columnWidths","defaultColumnWidths","onColumnWidthsChange","minColumnWidth","memoize","tableColumnsWithWidths","tableColumnsDraftComputed","tableColumnsWithDraftWidths","draftColumnWidths","PagingPanel","Pager","pageSizes","pageCount","GroupingPanel","EmptyMessage","emptyMessageComponent","EmptyMessagePlaceholder","ItemPlaceholder","groupingPanelItems","DataTypeProvider","columnNames","for","Formatter","formatterComponent","Editor","availableFilterOperations","getAvailableFilterOperationsComputed","getAvailableFilterOperationsGetter","includes","visibleTableColumnsComputed","visibleTableColumns","TableColumnVisibility","onHiddenColumnNamesChange","defaultHiddenColumnNames","toggleColumn","columnTogglingEnabled","tableDataColumnsExist","Toolbar","FlexibleSpaceComponent","flexibleSpaceComponent","TreeDataState","toggleRowExpanded","expandedTreeRowsComputed","expandedTreeRows","customTreeRowIdGetter","getRowLevelKeyComputed","customTreeRowLevelKeyGetter","isTreeRowLeafComputed","isTreeRowLeafGetter","getTreeRowLevelComputed","getTreeRowLevelGetter","collapsedTreeRowsGetterComputed","collapsedTreeRowsGetter","unwrappedTreeRowsComputed","unwrappedCustomTreeRows","CustomTreeData","getChildRows","treeRowsComputed","customTreeRowsWithMeta","TableTreeColumn","forColumnName","showSelectionControls","Indent","indentComponent","ExpandButton","expandButtonComponent","Checkbox","checkboxComponent","isTreeTableCell","isTreeRowLeaf","getTreeRowLevel","collapsedRows","SearchState","changeValue","changeSearchValue","searchFilterExpression","SearchPanel","Input","inputComponent","searchValue","SummaryState","totalItems","groupItems","treeItems","IntegratedSummary","calculator","totalSummaryValuesComputed","totalSummaryItems","totalSummaryValues","groupSummaryValuesComputed","groupSummaryItems","groupSummaryValues","treeSummaryValuesComputed","treeSummaryItems","treeSummaryValues","defaultCalculator","defaultSummaryCalculator","CustomSummary","totalValues","groupValues","treeValues","tableRowsWithSummaries","tableFooterRowsComputed","tableRowsWithTotalSummaries","defaultTypelessSummaries","TableSummaryRow","columnSummaries","formatlessSummaryTypes","summary","String","TotalRow","totalRowComponent","groupRowComponent","TreeRow","treeRowComponent","TotalCell","totalCellComponent","groupCellComponent","TreeCell","treeCellComponent","TreeColumnCell","treeColumnCellComponent","TreeColumnContent","treeColumnContentComponent","TreeColumnIndent","treeColumnIndentComponent","isTotalSummaryTableCell","getColumnSummaries","renderCellContent","isGroupSummaryTableCell","isTreeSummaryTableCell","tableTreeColumnName","isTotalSummaryTableRow","isGroupSummaryTableRow","isTreeSummaryTableRow","TABLE_FLEX_TYPE","TableLayout","Map","animations","tableNode","setRef","ref","prevProps","prevColumns","tableWidth","findDOMNode","scrollWidth","getAnimations","raf","requestAnimationFrame","processAnimationFrame","animationState","result","isFixedWidth","slice","push","key","size","has","get","animationComponentState","filterActiveAnimations","evalAnimations","getColumns","minWidth","ColumnGroup","AUTO_HEIGHT","VirtualTableLayout","headerHeight","getRowHeight","bodyHeight","footerHeight","rowRefs","blockRefs","registerRowRef","updateViewport","storeRowHeights","storeBloksHeights","rowHeights","estimatedRowHeight","storedHeight","height","rowsWithChangedHeights","Array","from","entries","node","getBoundingClientRect","set","prevHeaderHeight","prevBodyHeight","prevFooterHeight","delete","e","target","currentTarget","scrollTop","scrollLeft","clientWidth","Math","max","clientHeight","scrollHeight","collapsedGrid","Body","marginBottom","registerBlockRef","visibleRow","cells","cell","colSpan","propHeight","HeadTable","headTableComponent","FootTable","footerTableComponent","Head","Footer","getCellColSpan","viewportLeft","viewportTop","getColSpan","collapsedHeaderGrid","getCollapsedGrid","collapsedBodyGrid","collapsedFooterGrid","renderRowsBlock","prevRowHeight","getColumnStyle","getRowStyle","RowLayout","RowsBlockLayout","Block","blockComponent","StaticTableLayout","ItemLayout","onDragStart","onDragEnd","dragging","itemElement","draft","GroupPanelLayout","handleDragEvent","eventHandler","restArgs","onEnter","onGroupDraft","items","prevTargetItemIndex","targetItemIndex","itemGeometries","itemRefs","sourceItemIndex","getGroupCellTargetIndex","draggingColumnName","resetState","onGroup","onGroupDraftCancel","groupPanel","element","args"],"mappings":"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"}